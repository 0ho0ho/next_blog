"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/markdown-table";
exports.ids = ["vendor-chunks/markdown-table"];
exports.modules = {

/***/ "(rsc)/./node_modules/markdown-table/index.js":
/*!**********************************************!*\
  !*** ./node_modules/markdown-table/index.js ***!
  \**********************************************/
/***/ ((module) => {

eval("\nmodule.exports = markdownTable;\nvar dotRe = /\\./;\nvar lastDotRe = /\\.[^.]*$/;\n// Characters.\nvar space = \" \";\nvar lineFeed = \"\\n\";\nvar dash = \"-\";\nvar dot = \".\";\nvar colon = \":\";\nvar lowercaseC = \"c\";\nvar lowercaseL = \"l\";\nvar lowercaseR = \"r\";\nvar verticalBar = \"|\";\nvar minCellSize = 3;\n// Create a table from a matrix of strings.\nfunction markdownTable(table, options) {\n    var settings = options || {};\n    var delimiter = settings.delimiter;\n    var start = settings.start;\n    var end = settings.end;\n    var alignment = settings.align;\n    var calculateStringLength = settings.stringLength || lengthNoop;\n    var cellCount = 0;\n    var rowIndex = -1;\n    var rowLength = table.length;\n    var sizes = [];\n    var align;\n    var rule;\n    var rows;\n    var row;\n    var cells;\n    var index;\n    var position;\n    var size;\n    var value;\n    var spacing;\n    var before;\n    var after;\n    alignment = alignment ? alignment.concat() : [];\n    if (delimiter === null || delimiter === undefined) {\n        delimiter = space + verticalBar + space;\n    }\n    if (start === null || start === undefined) {\n        start = verticalBar + space;\n    }\n    if (end === null || end === undefined) {\n        end = space + verticalBar;\n    }\n    while(++rowIndex < rowLength){\n        row = table[rowIndex];\n        index = -1;\n        if (row.length > cellCount) {\n            cellCount = row.length;\n        }\n        while(++index < cellCount){\n            position = row[index] ? dotindex(row[index]) : null;\n            if (!sizes[index]) {\n                sizes[index] = minCellSize;\n            }\n            if (position > sizes[index]) {\n                sizes[index] = position;\n            }\n        }\n    }\n    if (typeof alignment === \"string\") {\n        alignment = pad(cellCount, alignment).split(\"\");\n    }\n    // Make sure only valid alignments are used.\n    index = -1;\n    while(++index < cellCount){\n        align = alignment[index];\n        if (typeof align === \"string\") {\n            align = align.charAt(0).toLowerCase();\n        }\n        if (align !== lowercaseL && align !== lowercaseR && align !== lowercaseC && align !== dot) {\n            align = \"\";\n        }\n        alignment[index] = align;\n    }\n    rowIndex = -1;\n    rows = [];\n    while(++rowIndex < rowLength){\n        row = table[rowIndex];\n        index = -1;\n        cells = [];\n        while(++index < cellCount){\n            value = row[index];\n            value = stringify(value);\n            if (alignment[index] === dot) {\n                position = dotindex(value);\n                size = sizes[index] + (dotRe.test(value) ? 0 : 1) - (calculateStringLength(value) - position);\n                cells[index] = value + pad(size - 1);\n            } else {\n                cells[index] = value;\n            }\n        }\n        rows[rowIndex] = cells;\n    }\n    sizes = [];\n    rowIndex = -1;\n    while(++rowIndex < rowLength){\n        cells = rows[rowIndex];\n        index = -1;\n        while(++index < cellCount){\n            value = cells[index];\n            if (!sizes[index]) {\n                sizes[index] = minCellSize;\n            }\n            size = calculateStringLength(value);\n            if (size > sizes[index]) {\n                sizes[index] = size;\n            }\n        }\n    }\n    rowIndex = -1;\n    while(++rowIndex < rowLength){\n        cells = rows[rowIndex];\n        index = -1;\n        if (settings.pad !== false) {\n            while(++index < cellCount){\n                value = cells[index];\n                position = sizes[index] - (calculateStringLength(value) || 0);\n                spacing = pad(position);\n                if (alignment[index] === lowercaseR || alignment[index] === dot) {\n                    value = spacing + value;\n                } else if (alignment[index] === lowercaseC) {\n                    position /= 2;\n                    if (position % 1 === 0) {\n                        before = position;\n                        after = position;\n                    } else {\n                        before = position + 0.5;\n                        after = position - 0.5;\n                    }\n                    value = pad(before) + value + pad(after);\n                } else {\n                    value += spacing;\n                }\n                cells[index] = value;\n            }\n        }\n        rows[rowIndex] = cells.join(delimiter);\n    }\n    if (settings.rule !== false) {\n        index = -1;\n        rule = [];\n        while(++index < cellCount){\n            // When `pad` is false, make the rule the same size as the first row.\n            if (settings.pad === false) {\n                value = table[0][index];\n                spacing = calculateStringLength(stringify(value));\n                spacing = spacing > minCellSize ? spacing : minCellSize;\n            } else {\n                spacing = sizes[index];\n            }\n            align = alignment[index];\n            // When `align` is left, don't add colons.\n            value = align === lowercaseR || align === \"\" ? dash : colon;\n            value += pad(spacing - 2, dash);\n            value += align !== lowercaseL && align !== \"\" ? colon : dash;\n            rule[index] = value;\n        }\n        rows.splice(1, 0, rule.join(delimiter));\n    }\n    return start + rows.join(end + lineFeed + start) + end;\n}\nfunction stringify(value) {\n    return value === null || value === undefined ? \"\" : String(value);\n}\n// Get the length of `value`.\nfunction lengthNoop(value) {\n    return String(value).length;\n}\n// Get a string consisting of `length` `character`s.\nfunction pad(length, character) {\n    return new Array(length + 1).join(character || space);\n}\n// Get the position of the last dot in `value`.\nfunction dotindex(value) {\n    var match = lastDotRe.exec(value);\n    return match ? match.index + 1 : value.length;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/markdown-table/index.js\n");

/***/ })

};
;