"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/stringify-entities";
exports.ids = ["vendor-chunks/stringify-entities"];
exports.modules = {

/***/ "(rsc)/./node_modules/stringify-entities/index.js":
/*!**************************************************!*\
  !*** ./node_modules/stringify-entities/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar entities = __webpack_require__(/*! character-entities-html4 */ \"(rsc)/./node_modules/character-entities-html4/index.json\");\nvar legacy = __webpack_require__(/*! character-entities-legacy */ \"(rsc)/./node_modules/character-entities-legacy/index.json\");\nvar hexadecimal = __webpack_require__(/*! is-hexadecimal */ \"(rsc)/./node_modules/is-hexadecimal/index.js\");\nvar decimal = __webpack_require__(/*! is-decimal */ \"(rsc)/./node_modules/is-decimal/index.js\");\nvar alphanumerical = __webpack_require__(/*! is-alphanumerical */ \"(rsc)/./node_modules/is-alphanumerical/index.js\");\nvar dangerous = __webpack_require__(/*! ./dangerous.json */ \"(rsc)/./node_modules/stringify-entities/dangerous.json\");\nmodule.exports = encode;\nencode.escape = escape;\nvar own = {}.hasOwnProperty;\n// List of enforced escapes.\nvar escapes = [\n    '\"',\n    \"'\",\n    \"<\",\n    \">\",\n    \"&\",\n    \"`\"\n];\n// Map of characters to names.\nvar characters = construct();\n// Default escapes.\nvar defaultEscapes = toExpression(escapes);\n// Surrogate pairs.\nvar surrogatePair = /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g;\n// Non-ASCII characters.\n// eslint-disable-next-line no-control-regex, unicorn/no-hex-escape\nvar bmp = /[\\x01-\\t\\x0B\\f\\x0E-\\x1F\\x7F\\x81\\x8D\\x8F\\x90\\x9D\\xA0-\\uFFFF]/g;\n// Encode special characters in `value`.\nfunction encode(value, options) {\n    var settings = options || {};\n    var subset = settings.subset;\n    var set = subset ? toExpression(subset) : defaultEscapes;\n    var escapeOnly = settings.escapeOnly;\n    var omit = settings.omitOptionalSemicolons;\n    value = value.replace(set, replace);\n    if (subset || escapeOnly) {\n        return value;\n    }\n    return value.replace(surrogatePair, replaceSurrogatePair).replace(bmp, replace);\n    function replaceSurrogatePair(pair, pos, val) {\n        return toHexReference((pair.charCodeAt(0) - 0xd800) * 0x400 + pair.charCodeAt(1) - 0xdc00 + 0x10000, val.charAt(pos + 2), omit);\n    }\n    function replace(char, pos, val) {\n        return one(char, val.charAt(pos + 1), settings);\n    }\n}\n// Shortcut to escape special characters in HTML.\nfunction escape(value) {\n    return encode(value, {\n        escapeOnly: true,\n        useNamedReferences: true\n    });\n}\n// Encode `char` according to `options`.\nfunction one(char, next, options) {\n    var shortest = options.useShortestReferences;\n    var omit = options.omitOptionalSemicolons;\n    var named;\n    var code;\n    var numeric;\n    var decimal;\n    if ((shortest || options.useNamedReferences) && own.call(characters, char)) {\n        named = toNamed(characters[char], next, omit, options.attribute);\n    }\n    if (shortest || !named) {\n        code = char.charCodeAt(0);\n        numeric = toHexReference(code, next, omit);\n        // Use the shortest numeric reference when requested.\n        // A simple algorithm would use decimal for all code points under 100, as\n        // those are shorter than hexadecimal:\n        //\n        // * `&#99;` vs `&#x63;` (decimal shorter)\n        // * `&#100;` vs `&#x64;` (equal)\n        //\n        // However, because we take `next` into consideration when `omit` is used,\n        // And it would be possible that decimals are shorter on bigger values as\n        // well if `next` is hexadecimal but not decimal, we instead compare both.\n        if (shortest) {\n            decimal = toDecimalReference(code, next, omit);\n            if (decimal.length < numeric.length) {\n                numeric = decimal;\n            }\n        }\n    }\n    if (named && (!shortest || named.length < numeric.length)) {\n        return named;\n    }\n    return numeric;\n}\n// Transform `code` into an entity.\nfunction toNamed(name, next, omit, attribute) {\n    var value = \"&\" + name;\n    if (omit && own.call(legacy, name) && dangerous.indexOf(name) === -1 && (!attribute || next && next !== \"=\" && !alphanumerical(next))) {\n        return value;\n    }\n    return value + \";\";\n}\n// Transform `code` into a hexadecimal character reference.\nfunction toHexReference(code, next, omit) {\n    var value = \"&#x\" + code.toString(16).toUpperCase();\n    return omit && next && !hexadecimal(next) ? value : value + \";\";\n}\n// Transform `code` into a decimal character reference.\nfunction toDecimalReference(code, next, omit) {\n    var value = \"&#\" + String(code);\n    return omit && next && !decimal(next) ? value : value + \";\";\n}\n// Create an expression for `characters`.\nfunction toExpression(characters) {\n    return new RegExp(\"[\" + characters.join(\"\") + \"]\", \"g\");\n}\n// Construct the map.\nfunction construct() {\n    var chars = {};\n    var name;\n    for(name in entities){\n        chars[entities[name]] = name;\n    }\n    return chars;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/stringify-entities/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/stringify-entities/dangerous.json":
/*!********************************************************!*\
  !*** ./node_modules/stringify-entities/dangerous.json ***!
  \********************************************************/
/***/ ((module) => {

module.exports = JSON.parse('["cent","copy","divide","gt","lt","not","para","times"]');

/***/ })

};
;