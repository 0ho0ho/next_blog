"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/vfile";
exports.ids = ["vendor-chunks/vfile"];
exports.modules = {

/***/ "(rsc)/./node_modules/vfile/core.js":
/*!************************************!*\
  !*** ./node_modules/vfile/core.js ***!
  \************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar path = __webpack_require__(/*! path */ \"path\");\nvar replace = __webpack_require__(/*! replace-ext */ \"(rsc)/./node_modules/replace-ext/index.js\");\nvar buffer = __webpack_require__(/*! is-buffer */ \"(rsc)/./node_modules/is-buffer/index.js\");\nmodule.exports = VFile;\nvar own = {}.hasOwnProperty;\nvar proto = VFile.prototype;\n// Order of setting (least specific to most), we need this because otherwise\n// `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n// stem can be set.\nvar order = [\n    \"history\",\n    \"path\",\n    \"basename\",\n    \"stem\",\n    \"extname\",\n    \"dirname\"\n];\nproto.toString = toString;\n// Access full path (`~/index.min.js`).\nObject.defineProperty(proto, \"path\", {\n    get: getPath,\n    set: setPath\n});\n// Access parent path (`~`).\nObject.defineProperty(proto, \"dirname\", {\n    get: getDirname,\n    set: setDirname\n});\n// Access basename (`index.min.js`).\nObject.defineProperty(proto, \"basename\", {\n    get: getBasename,\n    set: setBasename\n});\n// Access extname (`.js`).\nObject.defineProperty(proto, \"extname\", {\n    get: getExtname,\n    set: setExtname\n});\n// Access stem (`index.min`).\nObject.defineProperty(proto, \"stem\", {\n    get: getStem,\n    set: setStem\n});\n// Construct a new file.\nfunction VFile(options) {\n    var prop;\n    var index;\n    var length;\n    if (!options) {\n        options = {};\n    } else if (typeof options === \"string\" || buffer(options)) {\n        options = {\n            contents: options\n        };\n    } else if (\"message\" in options && \"messages\" in options) {\n        return options;\n    }\n    if (!(this instanceof VFile)) {\n        return new VFile(options);\n    }\n    this.data = {};\n    this.messages = [];\n    this.history = [];\n    this.cwd = process.cwd();\n    // Set path related properties in the correct order.\n    index = -1;\n    length = order.length;\n    while(++index < length){\n        prop = order[index];\n        if (own.call(options, prop)) {\n            this[prop] = options[prop];\n        }\n    }\n    // Set non-path related properties.\n    for(prop in options){\n        if (order.indexOf(prop) === -1) {\n            this[prop] = options[prop];\n        }\n    }\n}\nfunction getPath() {\n    return this.history[this.history.length - 1];\n}\nfunction setPath(path) {\n    assertNonEmpty(path, \"path\");\n    if (path !== this.path) {\n        this.history.push(path);\n    }\n}\nfunction getDirname() {\n    return typeof this.path === \"string\" ? path.dirname(this.path) : undefined;\n}\nfunction setDirname(dirname) {\n    assertPath(this.path, \"dirname\");\n    this.path = path.join(dirname || \"\", this.basename);\n}\nfunction getBasename() {\n    return typeof this.path === \"string\" ? path.basename(this.path) : undefined;\n}\nfunction setBasename(basename) {\n    assertNonEmpty(basename, \"basename\");\n    assertPart(basename, \"basename\");\n    this.path = path.join(this.dirname || \"\", basename);\n}\nfunction getExtname() {\n    return typeof this.path === \"string\" ? path.extname(this.path) : undefined;\n}\nfunction setExtname(extname) {\n    var ext = extname || \"\";\n    assertPart(ext, \"extname\");\n    assertPath(this.path, \"extname\");\n    if (ext) {\n        if (ext.charAt(0) !== \".\") {\n            throw new Error(\"`extname` must start with `.`\");\n        }\n        if (ext.indexOf(\".\", 1) !== -1) {\n            throw new Error(\"`extname` cannot contain multiple dots\");\n        }\n    }\n    this.path = replace(this.path, ext);\n}\nfunction getStem() {\n    return typeof this.path === \"string\" ? path.basename(this.path, this.extname) : undefined;\n}\nfunction setStem(stem) {\n    assertNonEmpty(stem, \"stem\");\n    assertPart(stem, \"stem\");\n    this.path = path.join(this.dirname || \"\", stem + (this.extname || \"\"));\n}\n// Get the value of the file.\nfunction toString(encoding) {\n    var value = this.contents || \"\";\n    return buffer(value) ? value.toString(encoding) : String(value);\n}\n// Assert that `part` is not a path (i.e., does not contain `path.sep`).\nfunction assertPart(part, name) {\n    if (part.indexOf(path.sep) !== -1) {\n        throw new Error(\"`\" + name + \"` cannot be a path: did not expect `\" + path.sep + \"`\");\n    }\n}\n// Assert that `part` is not empty.\nfunction assertNonEmpty(part, name) {\n    if (!part) {\n        throw new Error(\"`\" + name + \"` cannot be empty\");\n    }\n}\n// Assert `path` exists.\nfunction assertPath(path, name) {\n    if (!path) {\n        throw new Error(\"Setting `\" + name + \"` requires `path` to be set too\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/vfile/core.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/vfile/index.js":
/*!*************************************!*\
  !*** ./node_modules/vfile/index.js ***!
  \*************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar VMessage = __webpack_require__(/*! vfile-message */ \"(rsc)/./node_modules/vfile-message/index.js\");\nvar VFile = __webpack_require__(/*! ./core.js */ \"(rsc)/./node_modules/vfile/core.js\");\nmodule.exports = VFile;\nvar proto = VFile.prototype;\nproto.message = message;\nproto.info = info;\nproto.fail = fail;\n// Create a message with `reason` at `position`.\n// When an error is passed in as `reason`, copies the stack.\nfunction message(reason, position, origin) {\n    var filePath = this.path;\n    var message = new VMessage(reason, position, origin);\n    if (filePath) {\n        message.name = filePath + \":\" + message.name;\n        message.file = filePath;\n    }\n    message.fatal = false;\n    this.messages.push(message);\n    return message;\n}\n// Fail: creates a vmessage, associates it with the file, and throws it.\nfunction fail() {\n    var message = this.message.apply(this, arguments);\n    message.fatal = true;\n    throw message;\n}\n// Info: creates a vmessage, associates it with the file, and marks the fatality\n// as null.\nfunction info() {\n    var message = this.message.apply(this, arguments);\n    message.fatal = null;\n    return message;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvdmZpbGUvaW5kZXguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxXQUFXQyxtQkFBT0EsQ0FBQztBQUN2QixJQUFJQyxRQUFRRCxtQkFBT0EsQ0FBQztBQUVwQkUsT0FBT0MsT0FBTyxHQUFHRjtBQUVqQixJQUFJRyxRQUFRSCxNQUFNSSxTQUFTO0FBRTNCRCxNQUFNRSxPQUFPLEdBQUdBO0FBQ2hCRixNQUFNRyxJQUFJLEdBQUdBO0FBQ2JILE1BQU1JLElBQUksR0FBR0E7QUFFYixnREFBZ0Q7QUFDaEQsNERBQTREO0FBQzVELFNBQVNGLFFBQVFHLE1BQU0sRUFBRUMsUUFBUSxFQUFFQyxNQUFNO0lBQ3ZDLElBQUlDLFdBQVcsSUFBSSxDQUFDQyxJQUFJO0lBQ3hCLElBQUlQLFVBQVUsSUFBSVAsU0FBU1UsUUFBUUMsVUFBVUM7SUFFN0MsSUFBSUMsVUFBVTtRQUNaTixRQUFRUSxJQUFJLEdBQUdGLFdBQVcsTUFBTU4sUUFBUVEsSUFBSTtRQUM1Q1IsUUFBUVMsSUFBSSxHQUFHSDtJQUNqQjtJQUVBTixRQUFRVSxLQUFLLEdBQUc7SUFFaEIsSUFBSSxDQUFDQyxRQUFRLENBQUNDLElBQUksQ0FBQ1o7SUFFbkIsT0FBT0E7QUFDVDtBQUVBLHdFQUF3RTtBQUN4RSxTQUFTRTtJQUNQLElBQUlGLFVBQVUsSUFBSSxDQUFDQSxPQUFPLENBQUNhLEtBQUssQ0FBQyxJQUFJLEVBQUVDO0lBRXZDZCxRQUFRVSxLQUFLLEdBQUc7SUFFaEIsTUFBTVY7QUFDUjtBQUVBLGdGQUFnRjtBQUNoRixXQUFXO0FBQ1gsU0FBU0M7SUFDUCxJQUFJRCxVQUFVLElBQUksQ0FBQ0EsT0FBTyxDQUFDYSxLQUFLLENBQUMsSUFBSSxFQUFFQztJQUV2Q2QsUUFBUVUsS0FBSyxHQUFHO0lBRWhCLE9BQU9WO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy92ZmlsZS9pbmRleC5qcz9iMDgwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgVk1lc3NhZ2UgPSByZXF1aXJlKCd2ZmlsZS1tZXNzYWdlJylcbnZhciBWRmlsZSA9IHJlcXVpcmUoJy4vY29yZS5qcycpXG5cbm1vZHVsZS5leHBvcnRzID0gVkZpbGVcblxudmFyIHByb3RvID0gVkZpbGUucHJvdG90eXBlXG5cbnByb3RvLm1lc3NhZ2UgPSBtZXNzYWdlXG5wcm90by5pbmZvID0gaW5mb1xucHJvdG8uZmFpbCA9IGZhaWxcblxuLy8gQ3JlYXRlIGEgbWVzc2FnZSB3aXRoIGByZWFzb25gIGF0IGBwb3NpdGlvbmAuXG4vLyBXaGVuIGFuIGVycm9yIGlzIHBhc3NlZCBpbiBhcyBgcmVhc29uYCwgY29waWVzIHRoZSBzdGFjay5cbmZ1bmN0aW9uIG1lc3NhZ2UocmVhc29uLCBwb3NpdGlvbiwgb3JpZ2luKSB7XG4gIHZhciBmaWxlUGF0aCA9IHRoaXMucGF0aFxuICB2YXIgbWVzc2FnZSA9IG5ldyBWTWVzc2FnZShyZWFzb24sIHBvc2l0aW9uLCBvcmlnaW4pXG5cbiAgaWYgKGZpbGVQYXRoKSB7XG4gICAgbWVzc2FnZS5uYW1lID0gZmlsZVBhdGggKyAnOicgKyBtZXNzYWdlLm5hbWVcbiAgICBtZXNzYWdlLmZpbGUgPSBmaWxlUGF0aFxuICB9XG5cbiAgbWVzc2FnZS5mYXRhbCA9IGZhbHNlXG5cbiAgdGhpcy5tZXNzYWdlcy5wdXNoKG1lc3NhZ2UpXG5cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cblxuLy8gRmFpbDogY3JlYXRlcyBhIHZtZXNzYWdlLCBhc3NvY2lhdGVzIGl0IHdpdGggdGhlIGZpbGUsIGFuZCB0aHJvd3MgaXQuXG5mdW5jdGlvbiBmYWlsKCkge1xuICB2YXIgbWVzc2FnZSA9IHRoaXMubWVzc2FnZS5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG5cbiAgbWVzc2FnZS5mYXRhbCA9IHRydWVcblxuICB0aHJvdyBtZXNzYWdlXG59XG5cbi8vIEluZm86IGNyZWF0ZXMgYSB2bWVzc2FnZSwgYXNzb2NpYXRlcyBpdCB3aXRoIHRoZSBmaWxlLCBhbmQgbWFya3MgdGhlIGZhdGFsaXR5XG4vLyBhcyBudWxsLlxuZnVuY3Rpb24gaW5mbygpIHtcbiAgdmFyIG1lc3NhZ2UgPSB0aGlzLm1lc3NhZ2UuYXBwbHkodGhpcywgYXJndW1lbnRzKVxuXG4gIG1lc3NhZ2UuZmF0YWwgPSBudWxsXG5cbiAgcmV0dXJuIG1lc3NhZ2Vcbn1cbiJdLCJuYW1lcyI6WyJWTWVzc2FnZSIsInJlcXVpcmUiLCJWRmlsZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJwcm90byIsInByb3RvdHlwZSIsIm1lc3NhZ2UiLCJpbmZvIiwiZmFpbCIsInJlYXNvbiIsInBvc2l0aW9uIiwib3JpZ2luIiwiZmlsZVBhdGgiLCJwYXRoIiwibmFtZSIsImZpbGUiLCJmYXRhbCIsIm1lc3NhZ2VzIiwicHVzaCIsImFwcGx5IiwiYXJndW1lbnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/vfile/index.js\n");

/***/ })

};
;