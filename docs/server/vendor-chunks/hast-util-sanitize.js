"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/hast-util-sanitize";
exports.ids = ["vendor-chunks/hast-util-sanitize"];
exports.modules = {

/***/ "(rsc)/./node_modules/hast-util-sanitize/index.js":
/*!**************************************************!*\
  !*** ./node_modules/hast-util-sanitize/index.js ***!
  \**************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = __webpack_require__(/*! ./lib */ \"(rsc)/./node_modules/hast-util-sanitize/lib/index.js\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvaGFzdC11dGlsLXNhbml0aXplL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBQ0FBLHlHQUF5QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL2hhc3QtdXRpbC1zYW5pdGl6ZS9pbmRleC5qcz85YjI5Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2xpYicpXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsInJlcXVpcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/hast-util-sanitize/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/hast-util-sanitize/lib/index.js":
/*!******************************************************!*\
  !*** ./node_modules/hast-util-sanitize/lib/index.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar xtend = __webpack_require__(/*! xtend */ \"(rsc)/./node_modules/xtend/immutable.js\");\nvar defaults = __webpack_require__(/*! ./github.json */ \"(rsc)/./node_modules/hast-util-sanitize/lib/github.json\");\nmodule.exports = wrapper;\nvar own = {}.hasOwnProperty;\nvar allData = \"data*\";\nvar commentEnd = \"-->\";\nvar nodeSchema = {\n    root: {\n        children: all\n    },\n    doctype: handleDoctype,\n    comment: handleComment,\n    element: {\n        tagName: handleTagName,\n        properties: handleProperties,\n        children: all\n    },\n    text: {\n        value: handleValue\n    },\n    \"*\": {\n        data: allow,\n        position: allow\n    }\n};\n// Sanitize `node`, according to `schema`.\nfunction wrapper(node, schema) {\n    var ctx = {\n        type: \"root\",\n        children: []\n    };\n    var replace;\n    if (!node || typeof node !== \"object\" || !node.type) {\n        return ctx;\n    }\n    replace = one(xtend(defaults, schema || {}), node, []);\n    if (!replace) {\n        return ctx;\n    }\n    if (\"length\" in replace) {\n        if (replace.length === 1) {\n            return replace[0];\n        }\n        ctx.children = replace;\n        return ctx;\n    }\n    return replace;\n}\n// Sanitize `node`.\nfunction one(schema, node, stack) {\n    var type = node && node.type;\n    var replacement = {\n        type: node.type\n    };\n    var replace = true;\n    var definition;\n    var allowed;\n    var result;\n    var key;\n    if (!own.call(nodeSchema, type)) {\n        replace = false;\n    } else {\n        definition = nodeSchema[type];\n        if (typeof definition === \"function\") {\n            definition = definition(schema, node);\n        }\n        if (!definition) {\n            replace = false;\n        } else {\n            allowed = xtend(definition, nodeSchema[\"*\"]);\n            for(key in allowed){\n                result = allowed[key](schema, node[key], node, stack);\n                if (result === false) {\n                    replace = false;\n                    // Set the non-safe value.\n                    replacement[key] = node[key];\n                } else if (result !== null && result !== undefined) {\n                    replacement[key] = result;\n                }\n            }\n        }\n    }\n    if (!replace) {\n        if (!replacement.children || replacement.children.length === 0 || schema.strip.indexOf(replacement.tagName) !== -1) {\n            return null;\n        }\n        return replacement.children;\n    }\n    return replacement;\n}\n// Sanitize `children`.\nfunction all(schema, children, node, stack) {\n    var nodes = children || [];\n    var length = nodes.length || 0;\n    var results = [];\n    var index = -1;\n    var result;\n    stack = stack.concat(node.tagName);\n    while(++index < length){\n        result = one(schema, nodes[index], stack);\n        if (result) {\n            if (\"length\" in result) {\n                results = results.concat(result);\n            } else {\n                results.push(result);\n            }\n        }\n    }\n    return results;\n}\n// Sanitize `properties`.\nfunction handleProperties(schema, properties, node, stack) {\n    var name = handleTagName(schema, node.tagName, node, stack);\n    var attrs = schema.attributes;\n    var reqs = schema.required || /* istanbul ignore next */ {};\n    var props = properties || {};\n    var result = {};\n    var allowed;\n    var required;\n    var definition;\n    var prop;\n    var value;\n    allowed = xtend(toPropertyValueMap(attrs[\"*\"]), toPropertyValueMap(own.call(attrs, name) ? attrs[name] : []));\n    for(prop in props){\n        value = props[prop];\n        if (own.call(allowed, prop)) {\n            definition = allowed[prop];\n        } else if (data(prop) && own.call(allowed, allData)) {\n            definition = allowed[allData];\n        } else {\n            continue;\n        }\n        if (value && typeof value === \"object\" && \"length\" in value) {\n            value = handlePropertyValues(schema, value, prop, definition);\n        } else {\n            value = handlePropertyValue(schema, value, prop, definition);\n        }\n        if (value !== null && value !== undefined) {\n            result[prop] = value;\n        }\n    }\n    required = own.call(reqs, name) ? reqs[name] : {};\n    for(prop in required){\n        if (!own.call(result, prop)) {\n            result[prop] = required[prop];\n        }\n    }\n    return result;\n}\n// Sanitize a property value which is a list.\nfunction handlePropertyValues(schema, values, prop, definition) {\n    var length = values.length;\n    var result = [];\n    var index = -1;\n    var value;\n    while(++index < length){\n        value = handlePropertyValue(schema, values[index], prop, definition);\n        if (value !== null && value !== undefined) {\n            result.push(value);\n        }\n    }\n    return result;\n}\n// Sanitize a property value.\nfunction handlePropertyValue(schema, value, prop, definition) {\n    if (typeof value !== \"boolean\" && typeof value !== \"number\" && typeof value !== \"string\") {\n        return null;\n    }\n    if (!handleProtocol(schema, value, prop)) {\n        return null;\n    }\n    if (definition.length !== 0 && definition.indexOf(value) === -1) {\n        return null;\n    }\n    if (schema.clobber.indexOf(prop) !== -1) {\n        value = schema.clobberPrefix + value;\n    }\n    return value;\n}\n// Check whether `value` is a safe URL.\nfunction handleProtocol(schema, value, prop) {\n    var protocols = schema.protocols;\n    var protocol;\n    var first;\n    var colon;\n    var length;\n    var index;\n    protocols = own.call(protocols, prop) ? protocols[prop].concat() : [];\n    if (protocols.length === 0) {\n        return true;\n    }\n    value = String(value);\n    first = value.charAt(0);\n    if (first === \"#\" || first === \"/\") {\n        return true;\n    }\n    colon = value.indexOf(\":\");\n    if (colon === -1) {\n        return true;\n    }\n    length = protocols.length;\n    index = -1;\n    while(++index < length){\n        protocol = protocols[index];\n        if (colon === protocol.length && value.slice(0, protocol.length) === protocol) {\n            return true;\n        }\n    }\n    index = value.indexOf(\"?\");\n    if (index !== -1 && colon > index) {\n        return true;\n    }\n    index = value.indexOf(\"#\");\n    if (index !== -1 && colon > index) {\n        return true;\n    }\n    return false;\n}\n// Always return a valid HTML5 doctype.\nfunction handleDoctypeName() {\n    return \"html\";\n}\n// Sanitize `tagName`.\nfunction handleTagName(schema, tagName, node, stack) {\n    var name = typeof tagName === \"string\" ? tagName : null;\n    var ancestors = schema.ancestors;\n    var length;\n    var index;\n    if (!name || name === \"*\" || schema.tagNames.indexOf(name) === -1) {\n        return false;\n    }\n    ancestors = own.call(ancestors, name) ? ancestors[name] : [];\n    // Some nodes can break out of their context if they donâ€™t have a certain\n    // ancestor.\n    if (ancestors.length !== 0) {\n        length = ancestors.length + 1;\n        index = -1;\n        while(++index < length){\n            if (!ancestors[index]) {\n                return false;\n            }\n            if (stack.indexOf(ancestors[index]) !== -1) {\n                break;\n            }\n        }\n    }\n    return name;\n}\nfunction handleDoctype(schema) {\n    return schema.allowDoctypes ? {\n        name: handleDoctypeName\n    } : null;\n}\nfunction handleComment(schema) {\n    return schema.allowComments ? {\n        value: handleCommentValue\n    } : null;\n}\n// See <https://html.spec.whatwg.org/multipage/parsing.html#serialising-html-fragments>\nfunction handleCommentValue(schema, value) {\n    var result = typeof value === \"string\" ? value : \"\";\n    var index = result.indexOf(commentEnd);\n    return index === -1 ? result : result.slice(0, index);\n}\n// Sanitize `value`.\nfunction handleValue(schema, value) {\n    return typeof value === \"string\" ? value : \"\";\n}\n// Create a map from a list of props or a list of properties and values.\nfunction toPropertyValueMap(values) {\n    var result = {};\n    var length = values.length;\n    var index = -1;\n    var value;\n    while(++index < length){\n        value = values[index];\n        if (value && typeof value === \"object\" && \"length\" in value) {\n            result[value[0]] = value.slice(1);\n        } else {\n            result[value] = [];\n        }\n    }\n    return result;\n}\n// Allow `value`.\nfunction allow(schema, value) {\n    return value;\n}\n// Check if `prop` is a data property.\nfunction data(prop) {\n    return prop.length > 4 && prop.slice(0, 4).toLowerCase() === \"data\";\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/hast-util-sanitize/lib/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/hast-util-sanitize/lib/github.json":
/*!*********************************************************!*\
  !*** ./node_modules/hast-util-sanitize/lib/github.json ***!
  \*********************************************************/
/***/ ((module) => {

module.exports = JSON.parse('{"strip":["script"],"clobberPrefix":"user-content-","clobber":["name","id"],"ancestors":{"tbody":["table"],"tfoot":["table"],"thead":["table"],"td":["table"],"th":["table"],"tr":["table"]},"protocols":{"href":["http","https","mailto","xmpp","irc","ircs"],"cite":["http","https"],"src":["http","https"],"longDesc":["http","https"]},"tagNames":["h1","h2","h3","h4","h5","h6","br","b","i","strong","em","a","pre","code","img","tt","div","ins","del","sup","sub","p","ol","ul","table","thead","tbody","tfoot","blockquote","dl","dt","dd","kbd","q","samp","var","hr","ruby","rt","rp","li","tr","td","th","s","strike","summary","details","caption","figure","figcaption","abbr","bdo","cite","dfn","mark","small","span","time","wbr","input"],"attributes":{"a":["href"],"img":["src","longDesc"],"input":[["type","checkbox"],["disabled",true]],"li":[["className","task-list-item"]],"div":["itemScope","itemType"],"blockquote":["cite"],"del":["cite"],"ins":["cite"],"q":["cite"],"*":["abbr","accept","acceptCharset","accessKey","action","align","alt","ariaDescribedBy","ariaHidden","ariaLabel","ariaLabelledBy","axis","border","cellPadding","cellSpacing","char","charOff","charSet","checked","clear","cols","colSpan","color","compact","coords","dateTime","dir","disabled","encType","htmlFor","frame","headers","height","hrefLang","hSpace","isMap","id","label","lang","maxLength","media","method","multiple","name","noHref","noShade","noWrap","open","prompt","readOnly","rel","rev","rows","rowSpan","rules","scope","selected","shape","size","span","start","summary","tabIndex","target","title","type","useMap","vAlign","value","vSpace","width","itemProp"]},"required":{"input":{"type":"checkbox","disabled":true}}}');

/***/ })

};
;