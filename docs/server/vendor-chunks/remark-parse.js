"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/remark-parse";
exports.ids = ["vendor-chunks/remark-parse"];
exports.modules = {

/***/ "(rsc)/./node_modules/remark-parse/index.js":
/*!********************************************!*\
  !*** ./node_modules/remark-parse/index.js ***!
  \********************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar unherit = __webpack_require__(/*! unherit */ \"(rsc)/./node_modules/unherit/index.js\");\nvar xtend = __webpack_require__(/*! xtend */ \"(rsc)/./node_modules/xtend/immutable.js\");\nvar Parser = __webpack_require__(/*! ./lib/parser.js */ \"(rsc)/./node_modules/remark-parse/lib/parser.js\");\nmodule.exports = parse;\nparse.Parser = Parser;\nfunction parse(options) {\n    var settings = this.data(\"settings\");\n    var Local = unherit(Parser);\n    Local.prototype.options = xtend(Local.prototype.options, settings, options);\n    this.Parser = Local;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsVUFBVUMsbUJBQU9BLENBQUM7QUFDdEIsSUFBSUMsUUFBUUQsbUJBQU9BLENBQUM7QUFDcEIsSUFBSUUsU0FBU0YsbUJBQU9BLENBQUM7QUFFckJHLE9BQU9DLE9BQU8sR0FBR0M7QUFDakJBLE1BQU1ILE1BQU0sR0FBR0E7QUFFZixTQUFTRyxNQUFNQyxPQUFPO0lBQ3BCLElBQUlDLFdBQVcsSUFBSSxDQUFDQyxJQUFJLENBQUM7SUFDekIsSUFBSUMsUUFBUVYsUUFBUUc7SUFFcEJPLE1BQU1DLFNBQVMsQ0FBQ0osT0FBTyxHQUFHTCxNQUFNUSxNQUFNQyxTQUFTLENBQUNKLE9BQU8sRUFBRUMsVUFBVUQ7SUFFbkUsSUFBSSxDQUFDSixNQUFNLEdBQUdPO0FBQ2hCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2luZGV4LmpzPzA3ZTEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciB1bmhlcml0ID0gcmVxdWlyZSgndW5oZXJpdCcpXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG52YXIgUGFyc2VyID0gcmVxdWlyZSgnLi9saWIvcGFyc2VyLmpzJylcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVxucGFyc2UuUGFyc2VyID0gUGFyc2VyXG5cbmZ1bmN0aW9uIHBhcnNlKG9wdGlvbnMpIHtcbiAgdmFyIHNldHRpbmdzID0gdGhpcy5kYXRhKCdzZXR0aW5ncycpXG4gIHZhciBMb2NhbCA9IHVuaGVyaXQoUGFyc2VyKVxuXG4gIExvY2FsLnByb3RvdHlwZS5vcHRpb25zID0geHRlbmQoTG9jYWwucHJvdG90eXBlLm9wdGlvbnMsIHNldHRpbmdzLCBvcHRpb25zKVxuXG4gIHRoaXMuUGFyc2VyID0gTG9jYWxcbn1cbiJdLCJuYW1lcyI6WyJ1bmhlcml0IiwicmVxdWlyZSIsInh0ZW5kIiwiUGFyc2VyIiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcnNlIiwib3B0aW9ucyIsInNldHRpbmdzIiwiZGF0YSIsIkxvY2FsIiwicHJvdG90eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/index.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/block-elements.js":
/*!*********************************************************!*\
  !*** ./node_modules/remark-parse/lib/block-elements.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = [\n    \"address\",\n    \"article\",\n    \"aside\",\n    \"base\",\n    \"basefont\",\n    \"blockquote\",\n    \"body\",\n    \"caption\",\n    \"center\",\n    \"col\",\n    \"colgroup\",\n    \"dd\",\n    \"details\",\n    \"dialog\",\n    \"dir\",\n    \"div\",\n    \"dl\",\n    \"dt\",\n    \"fieldset\",\n    \"figcaption\",\n    \"figure\",\n    \"footer\",\n    \"form\",\n    \"frame\",\n    \"frameset\",\n    \"h1\",\n    \"h2\",\n    \"h3\",\n    \"h4\",\n    \"h5\",\n    \"h6\",\n    \"head\",\n    \"header\",\n    \"hgroup\",\n    \"hr\",\n    \"html\",\n    \"iframe\",\n    \"legend\",\n    \"li\",\n    \"link\",\n    \"main\",\n    \"menu\",\n    \"menuitem\",\n    \"meta\",\n    \"nav\",\n    \"noframes\",\n    \"ol\",\n    \"optgroup\",\n    \"option\",\n    \"p\",\n    \"param\",\n    \"pre\",\n    \"section\",\n    \"source\",\n    \"title\",\n    \"summary\",\n    \"table\",\n    \"tbody\",\n    \"td\",\n    \"tfoot\",\n    \"th\",\n    \"thead\",\n    \"title\",\n    \"tr\",\n    \"track\",\n    \"ul\"\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9ibG9jay1lbGVtZW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7Q0FDRCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvYmxvY2stZWxlbWVudHMuanM/N2ZhZiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdhZGRyZXNzJyxcbiAgJ2FydGljbGUnLFxuICAnYXNpZGUnLFxuICAnYmFzZScsXG4gICdiYXNlZm9udCcsXG4gICdibG9ja3F1b3RlJyxcbiAgJ2JvZHknLFxuICAnY2FwdGlvbicsXG4gICdjZW50ZXInLFxuICAnY29sJyxcbiAgJ2NvbGdyb3VwJyxcbiAgJ2RkJyxcbiAgJ2RldGFpbHMnLFxuICAnZGlhbG9nJyxcbiAgJ2RpcicsXG4gICdkaXYnLFxuICAnZGwnLFxuICAnZHQnLFxuICAnZmllbGRzZXQnLFxuICAnZmlnY2FwdGlvbicsXG4gICdmaWd1cmUnLFxuICAnZm9vdGVyJyxcbiAgJ2Zvcm0nLFxuICAnZnJhbWUnLFxuICAnZnJhbWVzZXQnLFxuICAnaDEnLFxuICAnaDInLFxuICAnaDMnLFxuICAnaDQnLFxuICAnaDUnLFxuICAnaDYnLFxuICAnaGVhZCcsXG4gICdoZWFkZXInLFxuICAnaGdyb3VwJyxcbiAgJ2hyJyxcbiAgJ2h0bWwnLFxuICAnaWZyYW1lJyxcbiAgJ2xlZ2VuZCcsXG4gICdsaScsXG4gICdsaW5rJyxcbiAgJ21haW4nLFxuICAnbWVudScsXG4gICdtZW51aXRlbScsXG4gICdtZXRhJyxcbiAgJ25hdicsXG4gICdub2ZyYW1lcycsXG4gICdvbCcsXG4gICdvcHRncm91cCcsXG4gICdvcHRpb24nLFxuICAncCcsXG4gICdwYXJhbScsXG4gICdwcmUnLFxuICAnc2VjdGlvbicsXG4gICdzb3VyY2UnLFxuICAndGl0bGUnLFxuICAnc3VtbWFyeScsXG4gICd0YWJsZScsXG4gICd0Ym9keScsXG4gICd0ZCcsXG4gICd0Zm9vdCcsXG4gICd0aCcsXG4gICd0aGVhZCcsXG4gICd0aXRsZScsXG4gICd0cicsXG4gICd0cmFjaycsXG4gICd1bCdcbl1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/block-elements.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/decode.js":
/*!*************************************************!*\
  !*** ./node_modules/remark-parse/lib/decode.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar xtend = __webpack_require__(/*! xtend */ \"(rsc)/./node_modules/xtend/immutable.js\");\nvar entities = __webpack_require__(/*! parse-entities */ \"(rsc)/./node_modules/parse-entities/index.js\");\nmodule.exports = factory;\n// Factory to create an entity decoder.\nfunction factory(ctx) {\n    decoder.raw = decodeRaw;\n    return decoder;\n    // Normalize `position` to add an `indent`.\n    function normalize(position) {\n        var offsets = ctx.offset;\n        var line = position.line;\n        var result = [];\n        while(++line){\n            if (!(line in offsets)) {\n                break;\n            }\n            result.push((offsets[line] || 0) + 1);\n        }\n        return {\n            start: position,\n            indent: result\n        };\n    }\n    // Decode `value` (at `position`) into text-nodes.\n    function decoder(value, position, handler) {\n        entities(value, {\n            position: normalize(position),\n            warning: handleWarning,\n            text: handler,\n            reference: handler,\n            textContext: ctx,\n            referenceContext: ctx\n        });\n    }\n    // Decode `value` (at `position`) into a string.\n    function decodeRaw(value, position, options) {\n        return entities(value, xtend(options, {\n            position: normalize(position),\n            warning: handleWarning\n        }));\n    }\n    // Handle a warning.\n    // See <https://github.com/wooorm/parse-entities> for the warnings.\n    function handleWarning(reason, position, code) {\n        if (code !== 3) {\n            ctx.file.message(reason, position);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9kZWNvZGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxRQUFRQyxtQkFBT0EsQ0FBQztBQUNwQixJQUFJQyxXQUFXRCxtQkFBT0EsQ0FBQztBQUV2QkUsT0FBT0MsT0FBTyxHQUFHQztBQUVqQix1Q0FBdUM7QUFDdkMsU0FBU0EsUUFBUUMsR0FBRztJQUNsQkMsUUFBUUMsR0FBRyxHQUFHQztJQUVkLE9BQU9GO0lBRVAsMkNBQTJDO0lBQzNDLFNBQVNHLFVBQVVDLFFBQVE7UUFDekIsSUFBSUMsVUFBVU4sSUFBSU8sTUFBTTtRQUN4QixJQUFJQyxPQUFPSCxTQUFTRyxJQUFJO1FBQ3hCLElBQUlDLFNBQVMsRUFBRTtRQUVmLE1BQU8sRUFBRUQsS0FBTTtZQUNiLElBQUksQ0FBRUEsQ0FBQUEsUUFBUUYsT0FBTSxHQUFJO2dCQUN0QjtZQUNGO1lBRUFHLE9BQU9DLElBQUksQ0FBQyxDQUFDSixPQUFPLENBQUNFLEtBQUssSUFBSSxLQUFLO1FBQ3JDO1FBRUEsT0FBTztZQUFDRyxPQUFPTjtZQUFVTyxRQUFRSDtRQUFNO0lBQ3pDO0lBRUEsa0RBQWtEO0lBQ2xELFNBQVNSLFFBQVFZLEtBQUssRUFBRVIsUUFBUSxFQUFFUyxPQUFPO1FBQ3ZDbEIsU0FBU2lCLE9BQU87WUFDZFIsVUFBVUQsVUFBVUM7WUFDcEJVLFNBQVNDO1lBQ1RDLE1BQU1IO1lBQ05JLFdBQVdKO1lBQ1hLLGFBQWFuQjtZQUNib0Isa0JBQWtCcEI7UUFDcEI7SUFDRjtJQUVBLGdEQUFnRDtJQUNoRCxTQUFTRyxVQUFVVSxLQUFLLEVBQUVSLFFBQVEsRUFBRWdCLE9BQU87UUFDekMsT0FBT3pCLFNBQ0xpQixPQUNBbkIsTUFBTTJCLFNBQVM7WUFBQ2hCLFVBQVVELFVBQVVDO1lBQVdVLFNBQVNDO1FBQWE7SUFFekU7SUFFQSxvQkFBb0I7SUFDcEIsbUVBQW1FO0lBQ25FLFNBQVNBLGNBQWNNLE1BQU0sRUFBRWpCLFFBQVEsRUFBRWtCLElBQUk7UUFDM0MsSUFBSUEsU0FBUyxHQUFHO1lBQ2R2QixJQUFJd0IsSUFBSSxDQUFDQyxPQUFPLENBQUNILFFBQVFqQjtRQUMzQjtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL2RlY29kZS5qcz8zNmE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG52YXIgZW50aXRpZXMgPSByZXF1aXJlKCdwYXJzZS1lbnRpdGllcycpXG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeVxuXG4vLyBGYWN0b3J5IHRvIGNyZWF0ZSBhbiBlbnRpdHkgZGVjb2Rlci5cbmZ1bmN0aW9uIGZhY3RvcnkoY3R4KSB7XG4gIGRlY29kZXIucmF3ID0gZGVjb2RlUmF3XG5cbiAgcmV0dXJuIGRlY29kZXJcblxuICAvLyBOb3JtYWxpemUgYHBvc2l0aW9uYCB0byBhZGQgYW4gYGluZGVudGAuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZShwb3NpdGlvbikge1xuICAgIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldFxuICAgIHZhciBsaW5lID0gcG9zaXRpb24ubGluZVxuICAgIHZhciByZXN1bHQgPSBbXVxuXG4gICAgd2hpbGUgKCsrbGluZSkge1xuICAgICAgaWYgKCEobGluZSBpbiBvZmZzZXRzKSkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICByZXN1bHQucHVzaCgob2Zmc2V0c1tsaW5lXSB8fCAwKSArIDEpXG4gICAgfVxuXG4gICAgcmV0dXJuIHtzdGFydDogcG9zaXRpb24sIGluZGVudDogcmVzdWx0fVxuICB9XG5cbiAgLy8gRGVjb2RlIGB2YWx1ZWAgKGF0IGBwb3NpdGlvbmApIGludG8gdGV4dC1ub2Rlcy5cbiAgZnVuY3Rpb24gZGVjb2Rlcih2YWx1ZSwgcG9zaXRpb24sIGhhbmRsZXIpIHtcbiAgICBlbnRpdGllcyh2YWx1ZSwge1xuICAgICAgcG9zaXRpb246IG5vcm1hbGl6ZShwb3NpdGlvbiksXG4gICAgICB3YXJuaW5nOiBoYW5kbGVXYXJuaW5nLFxuICAgICAgdGV4dDogaGFuZGxlcixcbiAgICAgIHJlZmVyZW5jZTogaGFuZGxlcixcbiAgICAgIHRleHRDb250ZXh0OiBjdHgsXG4gICAgICByZWZlcmVuY2VDb250ZXh0OiBjdHhcbiAgICB9KVxuICB9XG5cbiAgLy8gRGVjb2RlIGB2YWx1ZWAgKGF0IGBwb3NpdGlvbmApIGludG8gYSBzdHJpbmcuXG4gIGZ1bmN0aW9uIGRlY29kZVJhdyh2YWx1ZSwgcG9zaXRpb24sIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gZW50aXRpZXMoXG4gICAgICB2YWx1ZSxcbiAgICAgIHh0ZW5kKG9wdGlvbnMsIHtwb3NpdGlvbjogbm9ybWFsaXplKHBvc2l0aW9uKSwgd2FybmluZzogaGFuZGxlV2FybmluZ30pXG4gICAgKVxuICB9XG5cbiAgLy8gSGFuZGxlIGEgd2FybmluZy5cbiAgLy8gU2VlIDxodHRwczovL2dpdGh1Yi5jb20vd29vb3JtL3BhcnNlLWVudGl0aWVzPiBmb3IgdGhlIHdhcm5pbmdzLlxuICBmdW5jdGlvbiBoYW5kbGVXYXJuaW5nKHJlYXNvbiwgcG9zaXRpb24sIGNvZGUpIHtcbiAgICBpZiAoY29kZSAhPT0gMykge1xuICAgICAgY3R4LmZpbGUubWVzc2FnZShyZWFzb24sIHBvc2l0aW9uKVxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbInh0ZW5kIiwicmVxdWlyZSIsImVudGl0aWVzIiwibW9kdWxlIiwiZXhwb3J0cyIsImZhY3RvcnkiLCJjdHgiLCJkZWNvZGVyIiwicmF3IiwiZGVjb2RlUmF3Iiwibm9ybWFsaXplIiwicG9zaXRpb24iLCJvZmZzZXRzIiwib2Zmc2V0IiwibGluZSIsInJlc3VsdCIsInB1c2giLCJzdGFydCIsImluZGVudCIsInZhbHVlIiwiaGFuZGxlciIsIndhcm5pbmciLCJoYW5kbGVXYXJuaW5nIiwidGV4dCIsInJlZmVyZW5jZSIsInRleHRDb250ZXh0IiwicmVmZXJlbmNlQ29udGV4dCIsIm9wdGlvbnMiLCJyZWFzb24iLCJjb2RlIiwiZmlsZSIsIm1lc3NhZ2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/decode.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/defaults.js":
/*!***************************************************!*\
  !*** ./node_modules/remark-parse/lib/defaults.js ***!
  \***************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nmodule.exports = {\n    position: true,\n    gfm: true,\n    commonmark: false,\n    footnotes: false,\n    pedantic: false,\n    blocks: __webpack_require__(/*! ./block-elements */ \"(rsc)/./node_modules/remark-parse/lib/block-elements.js\")\n};\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9kZWZhdWx0cy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUc7SUFDZkMsVUFBVTtJQUNWQyxLQUFLO0lBQ0xDLFlBQVk7SUFDWkMsV0FBVztJQUNYQyxVQUFVO0lBQ1ZDLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ2xCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9kZWZhdWx0cy5qcz85ZmUwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgcG9zaXRpb246IHRydWUsXG4gIGdmbTogdHJ1ZSxcbiAgY29tbW9ubWFyazogZmFsc2UsXG4gIGZvb3Rub3RlczogZmFsc2UsXG4gIHBlZGFudGljOiBmYWxzZSxcbiAgYmxvY2tzOiByZXF1aXJlKCcuL2Jsb2NrLWVsZW1lbnRzJylcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicG9zaXRpb24iLCJnZm0iLCJjb21tb25tYXJrIiwiZm9vdG5vdGVzIiwicGVkYW50aWMiLCJibG9ja3MiLCJyZXF1aXJlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/defaults.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/locate/break.js":
/*!*******************************************************!*\
  !*** ./node_modules/remark-parse/lib/locate/break.js ***!
  \*******************************************************/
/***/ ((module) => {

eval("\nmodule.exports = locate;\nfunction locate(value, fromIndex) {\n    var index = value.indexOf(\"\\n\", fromIndex);\n    while(index > fromIndex){\n        if (value.charAt(index - 1) !== \" \") {\n            break;\n        }\n        index--;\n    }\n    return index;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvYnJlYWsuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxPQUFPQyxLQUFLLEVBQUVDLFNBQVM7SUFDOUIsSUFBSUMsUUFBUUYsTUFBTUcsT0FBTyxDQUFDLE1BQU1GO0lBRWhDLE1BQU9DLFFBQVFELFVBQVc7UUFDeEIsSUFBSUQsTUFBTUksTUFBTSxDQUFDRixRQUFRLE9BQU8sS0FBSztZQUNuQztRQUNGO1FBRUFBO0lBQ0Y7SUFFQSxPQUFPQTtBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvYnJlYWsuanM/YmYxOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGVcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGluZGV4ID0gdmFsdWUuaW5kZXhPZignXFxuJywgZnJvbUluZGV4KVxuXG4gIHdoaWxlIChpbmRleCA+IGZyb21JbmRleCkge1xuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXggLSAxKSAhPT0gJyAnKSB7XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGluZGV4LS1cbiAgfVxuXG4gIHJldHVybiBpbmRleFxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJsb2NhdGUiLCJ2YWx1ZSIsImZyb21JbmRleCIsImluZGV4IiwiaW5kZXhPZiIsImNoYXJBdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/locate/break.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/locate/code-inline.js":
/*!*************************************************************!*\
  !*** ./node_modules/remark-parse/lib/locate/code-inline.js ***!
  \*************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = locate;\nfunction locate(value, fromIndex) {\n    return value.indexOf(\"`\", fromIndex);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvY29kZS1pbmxpbmUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxPQUFPQyxLQUFLLEVBQUVDLFNBQVM7SUFDOUIsT0FBT0QsTUFBTUUsT0FBTyxDQUFDLEtBQUtEO0FBQzVCIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvY29kZS1pbmxpbmUuanM/YmE0NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGVcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgcmV0dXJuIHZhbHVlLmluZGV4T2YoJ2AnLCBmcm9tSW5kZXgpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxvY2F0ZSIsInZhbHVlIiwiZnJvbUluZGV4IiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/locate/code-inline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/locate/delete.js":
/*!********************************************************!*\
  !*** ./node_modules/remark-parse/lib/locate/delete.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = locate;\nfunction locate(value, fromIndex) {\n    return value.indexOf(\"~~\", fromIndex);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZGVsZXRlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0EsT0FBT0MsS0FBSyxFQUFFQyxTQUFTO0lBQzlCLE9BQU9ELE1BQU1FLE9BQU8sQ0FBQyxNQUFNRDtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2RlbGV0ZS5qcz9iNzE4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZVxuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignfn4nLCBmcm9tSW5kZXgpXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxvY2F0ZSIsInZhbHVlIiwiZnJvbUluZGV4IiwiaW5kZXhPZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/locate/delete.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/locate/emphasis.js":
/*!**********************************************************!*\
  !*** ./node_modules/remark-parse/lib/locate/emphasis.js ***!
  \**********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = locate;\nfunction locate(value, fromIndex) {\n    var asterisk = value.indexOf(\"*\", fromIndex);\n    var underscore = value.indexOf(\"_\", fromIndex);\n    if (underscore === -1) {\n        return asterisk;\n    }\n    if (asterisk === -1) {\n        return underscore;\n    }\n    return underscore < asterisk ? underscore : asterisk;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZW1waGFzaXMuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQUEsT0FBT0MsT0FBTyxHQUFHQztBQUVqQixTQUFTQSxPQUFPQyxLQUFLLEVBQUVDLFNBQVM7SUFDOUIsSUFBSUMsV0FBV0YsTUFBTUcsT0FBTyxDQUFDLEtBQUtGO0lBQ2xDLElBQUlHLGFBQWFKLE1BQU1HLE9BQU8sQ0FBQyxLQUFLRjtJQUVwQyxJQUFJRyxlQUFlLENBQUMsR0FBRztRQUNyQixPQUFPRjtJQUNUO0lBRUEsSUFBSUEsYUFBYSxDQUFDLEdBQUc7UUFDbkIsT0FBT0U7SUFDVDtJQUVBLE9BQU9BLGFBQWFGLFdBQVdFLGFBQWFGO0FBQzlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZW1waGFzaXMuanM/YTQxYSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBsb2NhdGVcblxuZnVuY3Rpb24gbG9jYXRlKHZhbHVlLCBmcm9tSW5kZXgpIHtcbiAgdmFyIGFzdGVyaXNrID0gdmFsdWUuaW5kZXhPZignKicsIGZyb21JbmRleClcbiAgdmFyIHVuZGVyc2NvcmUgPSB2YWx1ZS5pbmRleE9mKCdfJywgZnJvbUluZGV4KVxuXG4gIGlmICh1bmRlcnNjb3JlID09PSAtMSkge1xuICAgIHJldHVybiBhc3Rlcmlza1xuICB9XG5cbiAgaWYgKGFzdGVyaXNrID09PSAtMSkge1xuICAgIHJldHVybiB1bmRlcnNjb3JlXG4gIH1cblxuICByZXR1cm4gdW5kZXJzY29yZSA8IGFzdGVyaXNrID8gdW5kZXJzY29yZSA6IGFzdGVyaXNrXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxvY2F0ZSIsInZhbHVlIiwiZnJvbUluZGV4IiwiYXN0ZXJpc2siLCJpbmRleE9mIiwidW5kZXJzY29yZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/locate/emphasis.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/locate/escape.js":
/*!********************************************************!*\
  !*** ./node_modules/remark-parse/lib/locate/escape.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = locate;\nfunction locate(value, fromIndex) {\n    return value.indexOf(\"\\\\\", fromIndex);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvZXNjYXBlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0EsT0FBT0MsS0FBSyxFQUFFQyxTQUFTO0lBQzlCLE9BQU9ELE1BQU1FLE9BQU8sQ0FBQyxNQUFNRDtBQUM3QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL2VzY2FwZS5qcz8yMzAwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZVxuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignXFxcXCcsIGZyb21JbmRleClcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibG9jYXRlIiwidmFsdWUiLCJmcm9tSW5kZXgiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/locate/escape.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/locate/link.js":
/*!******************************************************!*\
  !*** ./node_modules/remark-parse/lib/locate/link.js ***!
  \******************************************************/
/***/ ((module) => {

eval("\nmodule.exports = locate;\nfunction locate(value, fromIndex) {\n    var link = value.indexOf(\"[\", fromIndex);\n    var image = value.indexOf(\"![\", fromIndex);\n    if (image === -1) {\n        return link;\n    }\n    // Link can never be `-1` if an image is found, so we don’t need to check\n    // for that :)\n    return link < image ? link : image;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvbGluay5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLE9BQU9DLEtBQUssRUFBRUMsU0FBUztJQUM5QixJQUFJQyxPQUFPRixNQUFNRyxPQUFPLENBQUMsS0FBS0Y7SUFDOUIsSUFBSUcsUUFBUUosTUFBTUcsT0FBTyxDQUFDLE1BQU1GO0lBRWhDLElBQUlHLFVBQVUsQ0FBQyxHQUFHO1FBQ2hCLE9BQU9GO0lBQ1Q7SUFFQSx5RUFBeUU7SUFDekUsY0FBYztJQUNkLE9BQU9BLE9BQU9FLFFBQVFGLE9BQU9FO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvbGluay5qcz8zOTBiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZVxuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgbGluayA9IHZhbHVlLmluZGV4T2YoJ1snLCBmcm9tSW5kZXgpXG4gIHZhciBpbWFnZSA9IHZhbHVlLmluZGV4T2YoJyFbJywgZnJvbUluZGV4KVxuXG4gIGlmIChpbWFnZSA9PT0gLTEpIHtcbiAgICByZXR1cm4gbGlua1xuICB9XG5cbiAgLy8gTGluayBjYW4gbmV2ZXIgYmUgYC0xYCBpZiBhbiBpbWFnZSBpcyBmb3VuZCwgc28gd2UgZG9u4oCZdCBuZWVkIHRvIGNoZWNrXG4gIC8vIGZvciB0aGF0IDopXG4gIHJldHVybiBsaW5rIDwgaW1hZ2UgPyBsaW5rIDogaW1hZ2Vcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibG9jYXRlIiwidmFsdWUiLCJmcm9tSW5kZXgiLCJsaW5rIiwiaW5kZXhPZiIsImltYWdlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/locate/link.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/locate/strong.js":
/*!********************************************************!*\
  !*** ./node_modules/remark-parse/lib/locate/strong.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = locate;\nfunction locate(value, fromIndex) {\n    var asterisk = value.indexOf(\"**\", fromIndex);\n    var underscore = value.indexOf(\"__\", fromIndex);\n    if (underscore === -1) {\n        return asterisk;\n    }\n    if (asterisk === -1) {\n        return underscore;\n    }\n    return underscore < asterisk ? underscore : asterisk;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvc3Ryb25nLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0EsT0FBT0MsS0FBSyxFQUFFQyxTQUFTO0lBQzlCLElBQUlDLFdBQVdGLE1BQU1HLE9BQU8sQ0FBQyxNQUFNRjtJQUNuQyxJQUFJRyxhQUFhSixNQUFNRyxPQUFPLENBQUMsTUFBTUY7SUFFckMsSUFBSUcsZUFBZSxDQUFDLEdBQUc7UUFDckIsT0FBT0Y7SUFDVDtJQUVBLElBQUlBLGFBQWEsQ0FBQyxHQUFHO1FBQ25CLE9BQU9FO0lBQ1Q7SUFFQSxPQUFPQSxhQUFhRixXQUFXRSxhQUFhRjtBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3N0cm9uZy5qcz8zNTIwIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZVxuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgYXN0ZXJpc2sgPSB2YWx1ZS5pbmRleE9mKCcqKicsIGZyb21JbmRleClcbiAgdmFyIHVuZGVyc2NvcmUgPSB2YWx1ZS5pbmRleE9mKCdfXycsIGZyb21JbmRleClcblxuICBpZiAodW5kZXJzY29yZSA9PT0gLTEpIHtcbiAgICByZXR1cm4gYXN0ZXJpc2tcbiAgfVxuXG4gIGlmIChhc3RlcmlzayA9PT0gLTEpIHtcbiAgICByZXR1cm4gdW5kZXJzY29yZVxuICB9XG5cbiAgcmV0dXJuIHVuZGVyc2NvcmUgPCBhc3RlcmlzayA/IHVuZGVyc2NvcmUgOiBhc3Rlcmlza1xufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJsb2NhdGUiLCJ2YWx1ZSIsImZyb21JbmRleCIsImFzdGVyaXNrIiwiaW5kZXhPZiIsInVuZGVyc2NvcmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/locate/strong.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/locate/tag.js":
/*!*****************************************************!*\
  !*** ./node_modules/remark-parse/lib/locate/tag.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nmodule.exports = locate;\nfunction locate(value, fromIndex) {\n    return value.indexOf(\"<\", fromIndex);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvdGFnLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0EsT0FBT0MsS0FBSyxFQUFFQyxTQUFTO0lBQzlCLE9BQU9ELE1BQU1FLE9BQU8sQ0FBQyxLQUFLRDtBQUM1QiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3RhZy5qcz9kMTk1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZVxuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICByZXR1cm4gdmFsdWUuaW5kZXhPZignPCcsIGZyb21JbmRleClcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwibG9jYXRlIiwidmFsdWUiLCJmcm9tSW5kZXgiLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/locate/tag.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/locate/url.js":
/*!*****************************************************!*\
  !*** ./node_modules/remark-parse/lib/locate/url.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\nmodule.exports = locate;\nvar protocols = [\n    \"https://\",\n    \"http://\",\n    \"mailto:\"\n];\nfunction locate(value, fromIndex) {\n    var length = protocols.length;\n    var index = -1;\n    var min = -1;\n    var position;\n    if (!this.options.gfm) {\n        return -1;\n    }\n    while(++index < length){\n        position = value.indexOf(protocols[index], fromIndex);\n        if (position !== -1 && (position < min || min === -1)) {\n            min = position;\n        }\n    }\n    return min;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9sb2NhdGUvdXJsLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsWUFBWTtJQUFDO0lBQVk7SUFBVztDQUFVO0FBRWxELFNBQVNELE9BQU9FLEtBQUssRUFBRUMsU0FBUztJQUM5QixJQUFJQyxTQUFTSCxVQUFVRyxNQUFNO0lBQzdCLElBQUlDLFFBQVEsQ0FBQztJQUNiLElBQUlDLE1BQU0sQ0FBQztJQUNYLElBQUlDO0lBRUosSUFBSSxDQUFDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxHQUFHLEVBQUU7UUFDckIsT0FBTyxDQUFDO0lBQ1Y7SUFFQSxNQUFPLEVBQUVKLFFBQVFELE9BQVE7UUFDdkJHLFdBQVdMLE1BQU1RLE9BQU8sQ0FBQ1QsU0FBUyxDQUFDSSxNQUFNLEVBQUVGO1FBRTNDLElBQUlJLGFBQWEsQ0FBQyxLQUFNQSxDQUFBQSxXQUFXRCxPQUFPQSxRQUFRLENBQUMsSUFBSTtZQUNyREEsTUFBTUM7UUFDUjtJQUNGO0lBRUEsT0FBT0Q7QUFDVCIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvbG9jYXRlL3VybC5qcz85OTdmIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGxvY2F0ZVxuXG52YXIgcHJvdG9jb2xzID0gWydodHRwczovLycsICdodHRwOi8vJywgJ21haWx0bzonXVxuXG5mdW5jdGlvbiBsb2NhdGUodmFsdWUsIGZyb21JbmRleCkge1xuICB2YXIgbGVuZ3RoID0gcHJvdG9jb2xzLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgbWluID0gLTFcbiAgdmFyIHBvc2l0aW9uXG5cbiAgaWYgKCF0aGlzLm9wdGlvbnMuZ2ZtKSB7XG4gICAgcmV0dXJuIC0xXG4gIH1cblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHBvc2l0aW9uID0gdmFsdWUuaW5kZXhPZihwcm90b2NvbHNbaW5kZXhdLCBmcm9tSW5kZXgpXG5cbiAgICBpZiAocG9zaXRpb24gIT09IC0xICYmIChwb3NpdGlvbiA8IG1pbiB8fCBtaW4gPT09IC0xKSkge1xuICAgICAgbWluID0gcG9zaXRpb25cbiAgICB9XG4gIH1cblxuICByZXR1cm4gbWluXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImxvY2F0ZSIsInByb3RvY29scyIsInZhbHVlIiwiZnJvbUluZGV4IiwibGVuZ3RoIiwiaW5kZXgiLCJtaW4iLCJwb3NpdGlvbiIsIm9wdGlvbnMiLCJnZm0iLCJpbmRleE9mIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/locate/url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/parse.js":
/*!************************************************!*\
  !*** ./node_modules/remark-parse/lib/parse.js ***!
  \************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar xtend = __webpack_require__(/*! xtend */ \"(rsc)/./node_modules/xtend/immutable.js\");\nvar removePosition = __webpack_require__(/*! unist-util-remove-position */ \"(rsc)/./node_modules/unist-util-remove-position/index.js\");\nmodule.exports = parse;\nvar lineFeed = \"\\n\";\nvar lineBreaksExpression = /\\r\\n|\\r/g;\n// Parse the bound file.\nfunction parse() {\n    var self = this;\n    var value = String(self.file);\n    var start = {\n        line: 1,\n        column: 1,\n        offset: 0\n    };\n    var content = xtend(start);\n    var node;\n    // Clean non-unix newlines: `\\r\\n` and `\\r` are all changed to `\\n`.\n    // This should not affect positional information.\n    value = value.replace(lineBreaksExpression, lineFeed);\n    // BOM.\n    if (value.charCodeAt(0) === 0xfeff) {\n        value = value.slice(1);\n        content.column++;\n        content.offset++;\n    }\n    node = {\n        type: \"root\",\n        children: self.tokenizeBlock(value, content),\n        position: {\n            start: start,\n            end: self.eof || xtend(start)\n        }\n    };\n    if (!self.options.position) {\n        removePosition(node, true);\n    }\n    return node;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9wYXJzZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlDLGlCQUFpQkQsbUJBQU9BLENBQUM7QUFFN0JFLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsV0FBVztBQUNmLElBQUlDLHVCQUF1QjtBQUUzQix3QkFBd0I7QUFDeEIsU0FBU0Y7SUFDUCxJQUFJRyxPQUFPLElBQUk7SUFDZixJQUFJQyxRQUFRQyxPQUFPRixLQUFLRyxJQUFJO0lBQzVCLElBQUlDLFFBQVE7UUFBQ0MsTUFBTTtRQUFHQyxRQUFRO1FBQUdDLFFBQVE7SUFBQztJQUMxQyxJQUFJQyxVQUFVaEIsTUFBTVk7SUFDcEIsSUFBSUs7SUFFSixvRUFBb0U7SUFDcEUsaURBQWlEO0lBQ2pEUixRQUFRQSxNQUFNUyxPQUFPLENBQUNYLHNCQUFzQkQ7SUFFNUMsT0FBTztJQUNQLElBQUlHLE1BQU1VLFVBQVUsQ0FBQyxPQUFPLFFBQVE7UUFDbENWLFFBQVFBLE1BQU1XLEtBQUssQ0FBQztRQUVwQkosUUFBUUYsTUFBTTtRQUNkRSxRQUFRRCxNQUFNO0lBQ2hCO0lBRUFFLE9BQU87UUFDTEksTUFBTTtRQUNOQyxVQUFVZCxLQUFLZSxhQUFhLENBQUNkLE9BQU9PO1FBQ3BDUSxVQUFVO1lBQUNaLE9BQU9BO1lBQU9hLEtBQUtqQixLQUFLa0IsR0FBRyxJQUFJMUIsTUFBTVk7UUFBTTtJQUN4RDtJQUVBLElBQUksQ0FBQ0osS0FBS21CLE9BQU8sQ0FBQ0gsUUFBUSxFQUFFO1FBQzFCdEIsZUFBZWUsTUFBTTtJQUN2QjtJQUVBLE9BQU9BO0FBQ1QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3BhcnNlLmpzPzU1ZDEiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciB4dGVuZCA9IHJlcXVpcmUoJ3h0ZW5kJylcbnZhciByZW1vdmVQb3NpdGlvbiA9IHJlcXVpcmUoJ3VuaXN0LXV0aWwtcmVtb3ZlLXBvc2l0aW9uJylcblxubW9kdWxlLmV4cG9ydHMgPSBwYXJzZVxuXG52YXIgbGluZUZlZWQgPSAnXFxuJ1xudmFyIGxpbmVCcmVha3NFeHByZXNzaW9uID0gL1xcclxcbnxcXHIvZ1xuXG4vLyBQYXJzZSB0aGUgYm91bmQgZmlsZS5cbmZ1bmN0aW9uIHBhcnNlKCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHZhbHVlID0gU3RyaW5nKHNlbGYuZmlsZSlcbiAgdmFyIHN0YXJ0ID0ge2xpbmU6IDEsIGNvbHVtbjogMSwgb2Zmc2V0OiAwfVxuICB2YXIgY29udGVudCA9IHh0ZW5kKHN0YXJ0KVxuICB2YXIgbm9kZVxuXG4gIC8vIENsZWFuIG5vbi11bml4IG5ld2xpbmVzOiBgXFxyXFxuYCBhbmQgYFxccmAgYXJlIGFsbCBjaGFuZ2VkIHRvIGBcXG5gLlxuICAvLyBUaGlzIHNob3VsZCBub3QgYWZmZWN0IHBvc2l0aW9uYWwgaW5mb3JtYXRpb24uXG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShsaW5lQnJlYWtzRXhwcmVzc2lvbiwgbGluZUZlZWQpXG5cbiAgLy8gQk9NLlxuICBpZiAodmFsdWUuY2hhckNvZGVBdCgwKSA9PT0gMHhmZWZmKSB7XG4gICAgdmFsdWUgPSB2YWx1ZS5zbGljZSgxKVxuXG4gICAgY29udGVudC5jb2x1bW4rK1xuICAgIGNvbnRlbnQub2Zmc2V0KytcbiAgfVxuXG4gIG5vZGUgPSB7XG4gICAgdHlwZTogJ3Jvb3QnLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplQmxvY2sodmFsdWUsIGNvbnRlbnQpLFxuICAgIHBvc2l0aW9uOiB7c3RhcnQ6IHN0YXJ0LCBlbmQ6IHNlbGYuZW9mIHx8IHh0ZW5kKHN0YXJ0KX1cbiAgfVxuXG4gIGlmICghc2VsZi5vcHRpb25zLnBvc2l0aW9uKSB7XG4gICAgcmVtb3ZlUG9zaXRpb24obm9kZSwgdHJ1ZSlcbiAgfVxuXG4gIHJldHVybiBub2RlXG59XG4iXSwibmFtZXMiOlsieHRlbmQiLCJyZXF1aXJlIiwicmVtb3ZlUG9zaXRpb24iLCJtb2R1bGUiLCJleHBvcnRzIiwicGFyc2UiLCJsaW5lRmVlZCIsImxpbmVCcmVha3NFeHByZXNzaW9uIiwic2VsZiIsInZhbHVlIiwiU3RyaW5nIiwiZmlsZSIsInN0YXJ0IiwibGluZSIsImNvbHVtbiIsIm9mZnNldCIsImNvbnRlbnQiLCJub2RlIiwicmVwbGFjZSIsImNoYXJDb2RlQXQiLCJzbGljZSIsInR5cGUiLCJjaGlsZHJlbiIsInRva2VuaXplQmxvY2siLCJwb3NpdGlvbiIsImVuZCIsImVvZiIsIm9wdGlvbnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/parse.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/parser.js":
/*!*************************************************!*\
  !*** ./node_modules/remark-parse/lib/parser.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar xtend = __webpack_require__(/*! xtend */ \"(rsc)/./node_modules/xtend/immutable.js\");\nvar toggle = __webpack_require__(/*! state-toggle */ \"(rsc)/./node_modules/state-toggle/index.js\");\nvar vfileLocation = __webpack_require__(/*! vfile-location */ \"(rsc)/./node_modules/vfile-location/index.js\");\nvar unescape = __webpack_require__(/*! ./unescape */ \"(rsc)/./node_modules/remark-parse/lib/unescape.js\");\nvar decode = __webpack_require__(/*! ./decode */ \"(rsc)/./node_modules/remark-parse/lib/decode.js\");\nvar tokenizer = __webpack_require__(/*! ./tokenizer */ \"(rsc)/./node_modules/remark-parse/lib/tokenizer.js\");\nmodule.exports = Parser;\nfunction Parser(doc, file) {\n    this.file = file;\n    this.offset = {};\n    this.options = xtend(this.options);\n    this.setOptions({});\n    this.inList = false;\n    this.inBlock = false;\n    this.inLink = false;\n    this.atStart = true;\n    this.toOffset = vfileLocation(file).toOffset;\n    this.unescape = unescape(this, \"escape\");\n    this.decode = decode(this);\n}\nvar proto = Parser.prototype;\n// Expose core.\nproto.setOptions = __webpack_require__(/*! ./set-options */ \"(rsc)/./node_modules/remark-parse/lib/set-options.js\");\nproto.parse = __webpack_require__(/*! ./parse */ \"(rsc)/./node_modules/remark-parse/lib/parse.js\");\n// Expose `defaults`.\nproto.options = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/remark-parse/lib/defaults.js\");\n// Enter and exit helpers.\nproto.exitStart = toggle(\"atStart\", true);\nproto.enterList = toggle(\"inList\", false);\nproto.enterLink = toggle(\"inLink\", false);\nproto.enterBlock = toggle(\"inBlock\", false);\n// Nodes that can interupt a paragraph:\n//\n// ```markdown\n// A paragraph, followed by a thematic break.\n// ___\n// ```\n//\n// In the above example, the thematic break “interupts” the paragraph.\nproto.interruptParagraph = [\n    [\n        \"thematicBreak\"\n    ],\n    [\n        \"atxHeading\"\n    ],\n    [\n        \"fencedCode\"\n    ],\n    [\n        \"blockquote\"\n    ],\n    [\n        \"html\"\n    ],\n    [\n        \"setextHeading\",\n        {\n            commonmark: false\n        }\n    ],\n    [\n        \"definition\",\n        {\n            commonmark: false\n        }\n    ],\n    [\n        \"footnote\",\n        {\n            commonmark: false\n        }\n    ]\n];\n// Nodes that can interupt a list:\n//\n// ```markdown\n// - One\n// ___\n// ```\n//\n// In the above example, the thematic break “interupts” the list.\nproto.interruptList = [\n    [\n        \"atxHeading\",\n        {\n            pedantic: false\n        }\n    ],\n    [\n        \"fencedCode\",\n        {\n            pedantic: false\n        }\n    ],\n    [\n        \"thematicBreak\",\n        {\n            pedantic: false\n        }\n    ],\n    [\n        \"definition\",\n        {\n            commonmark: false\n        }\n    ],\n    [\n        \"footnote\",\n        {\n            commonmark: false\n        }\n    ]\n];\n// Nodes that can interupt a blockquote:\n//\n// ```markdown\n// > A paragraph.\n// ___\n// ```\n//\n// In the above example, the thematic break “interupts” the blockquote.\nproto.interruptBlockquote = [\n    [\n        \"indentedCode\",\n        {\n            commonmark: true\n        }\n    ],\n    [\n        \"fencedCode\",\n        {\n            commonmark: true\n        }\n    ],\n    [\n        \"atxHeading\",\n        {\n            commonmark: true\n        }\n    ],\n    [\n        \"setextHeading\",\n        {\n            commonmark: true\n        }\n    ],\n    [\n        \"thematicBreak\",\n        {\n            commonmark: true\n        }\n    ],\n    [\n        \"html\",\n        {\n            commonmark: true\n        }\n    ],\n    [\n        \"list\",\n        {\n            commonmark: true\n        }\n    ],\n    [\n        \"definition\",\n        {\n            commonmark: false\n        }\n    ],\n    [\n        \"footnote\",\n        {\n            commonmark: false\n        }\n    ]\n];\n// Handlers.\nproto.blockTokenizers = {\n    newline: __webpack_require__(/*! ./tokenize/newline */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/newline.js\"),\n    indentedCode: __webpack_require__(/*! ./tokenize/code-indented */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/code-indented.js\"),\n    fencedCode: __webpack_require__(/*! ./tokenize/code-fenced */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/code-fenced.js\"),\n    blockquote: __webpack_require__(/*! ./tokenize/blockquote */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/blockquote.js\"),\n    atxHeading: __webpack_require__(/*! ./tokenize/heading-atx */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/heading-atx.js\"),\n    thematicBreak: __webpack_require__(/*! ./tokenize/thematic-break */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/thematic-break.js\"),\n    list: __webpack_require__(/*! ./tokenize/list */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/list.js\"),\n    setextHeading: __webpack_require__(/*! ./tokenize/heading-setext */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/heading-setext.js\"),\n    html: __webpack_require__(/*! ./tokenize/html-block */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/html-block.js\"),\n    footnote: __webpack_require__(/*! ./tokenize/footnote-definition */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/footnote-definition.js\"),\n    definition: __webpack_require__(/*! ./tokenize/definition */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/definition.js\"),\n    table: __webpack_require__(/*! ./tokenize/table */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/table.js\"),\n    paragraph: __webpack_require__(/*! ./tokenize/paragraph */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/paragraph.js\")\n};\nproto.inlineTokenizers = {\n    escape: __webpack_require__(/*! ./tokenize/escape */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/escape.js\"),\n    autoLink: __webpack_require__(/*! ./tokenize/auto-link */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/auto-link.js\"),\n    url: __webpack_require__(/*! ./tokenize/url */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/url.js\"),\n    html: __webpack_require__(/*! ./tokenize/html-inline */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/html-inline.js\"),\n    link: __webpack_require__(/*! ./tokenize/link */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/link.js\"),\n    reference: __webpack_require__(/*! ./tokenize/reference */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/reference.js\"),\n    strong: __webpack_require__(/*! ./tokenize/strong */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/strong.js\"),\n    emphasis: __webpack_require__(/*! ./tokenize/emphasis */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/emphasis.js\"),\n    deletion: __webpack_require__(/*! ./tokenize/delete */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/delete.js\"),\n    code: __webpack_require__(/*! ./tokenize/code-inline */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/code-inline.js\"),\n    break: __webpack_require__(/*! ./tokenize/break */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/break.js\"),\n    text: __webpack_require__(/*! ./tokenize/text */ \"(rsc)/./node_modules/remark-parse/lib/tokenize/text.js\")\n};\n// Expose precedence.\nproto.blockMethods = keys(proto.blockTokenizers);\nproto.inlineMethods = keys(proto.inlineTokenizers);\n// Tokenizers.\nproto.tokenizeBlock = tokenizer(\"block\");\nproto.tokenizeInline = tokenizer(\"inline\");\nproto.tokenizeFactory = tokenizer;\n// Get all keys in `value`.\nfunction keys(value) {\n    var result = [];\n    var key;\n    for(key in value){\n        result.push(key);\n    }\n    return result;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/parser.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/set-options.js":
/*!******************************************************!*\
  !*** ./node_modules/remark-parse/lib/set-options.js ***!
  \******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar xtend = __webpack_require__(/*! xtend */ \"(rsc)/./node_modules/xtend/immutable.js\");\nvar escapes = __webpack_require__(/*! markdown-escapes */ \"(rsc)/./node_modules/markdown-escapes/index.js\");\nvar defaults = __webpack_require__(/*! ./defaults */ \"(rsc)/./node_modules/remark-parse/lib/defaults.js\");\nmodule.exports = setOptions;\nfunction setOptions(options) {\n    var self = this;\n    var current = self.options;\n    var key;\n    var value;\n    if (options == null) {\n        options = {};\n    } else if (typeof options === \"object\") {\n        options = xtend(options);\n    } else {\n        throw new Error(\"Invalid value `\" + options + \"` for setting `options`\");\n    }\n    for(key in defaults){\n        value = options[key];\n        if (value == null) {\n            value = current[key];\n        }\n        if (key !== \"blocks\" && typeof value !== \"boolean\" || key === \"blocks\" && typeof value !== \"object\") {\n            throw new Error(\"Invalid value `\" + value + \"` for setting `options.\" + key + \"`\");\n        }\n        options[key] = value;\n    }\n    self.options = options;\n    self.escape = escapes(options);\n    return self;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9zZXQtb3B0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFFBQVFDLG1CQUFPQSxDQUFDO0FBQ3BCLElBQUlDLFVBQVVELG1CQUFPQSxDQUFDO0FBQ3RCLElBQUlFLFdBQVdGLG1CQUFPQSxDQUFDO0FBRXZCRyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLFdBQVdDLE9BQU87SUFDekIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSUMsVUFBVUQsS0FBS0QsT0FBTztJQUMxQixJQUFJRztJQUNKLElBQUlDO0lBRUosSUFBSUosV0FBVyxNQUFNO1FBQ25CQSxVQUFVLENBQUM7SUFDYixPQUFPLElBQUksT0FBT0EsWUFBWSxVQUFVO1FBQ3RDQSxVQUFVUCxNQUFNTztJQUNsQixPQUFPO1FBQ0wsTUFBTSxJQUFJSyxNQUFNLG9CQUFvQkwsVUFBVTtJQUNoRDtJQUVBLElBQUtHLE9BQU9QLFNBQVU7UUFDcEJRLFFBQVFKLE9BQU8sQ0FBQ0csSUFBSTtRQUVwQixJQUFJQyxTQUFTLE1BQU07WUFDakJBLFFBQVFGLE9BQU8sQ0FBQ0MsSUFBSTtRQUN0QjtRQUVBLElBQ0UsUUFBUyxZQUFZLE9BQU9DLFVBQVUsYUFDckNELFFBQVEsWUFBWSxPQUFPQyxVQUFVLFVBQ3RDO1lBQ0EsTUFBTSxJQUFJQyxNQUNSLG9CQUFvQkQsUUFBUSw0QkFBNEJELE1BQU07UUFFbEU7UUFFQUgsT0FBTyxDQUFDRyxJQUFJLEdBQUdDO0lBQ2pCO0lBRUFILEtBQUtELE9BQU8sR0FBR0E7SUFDZkMsS0FBS0ssTUFBTSxHQUFHWCxRQUFRSztJQUV0QixPQUFPQztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi9zZXQtb3B0aW9ucy5qcz83NDcyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgeHRlbmQgPSByZXF1aXJlKCd4dGVuZCcpXG52YXIgZXNjYXBlcyA9IHJlcXVpcmUoJ21hcmtkb3duLWVzY2FwZXMnKVxudmFyIGRlZmF1bHRzID0gcmVxdWlyZSgnLi9kZWZhdWx0cycpXG5cbm1vZHVsZS5leHBvcnRzID0gc2V0T3B0aW9uc1xuXG5mdW5jdGlvbiBzZXRPcHRpb25zKG9wdGlvbnMpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBjdXJyZW50ID0gc2VsZi5vcHRpb25zXG4gIHZhciBrZXlcbiAgdmFyIHZhbHVlXG5cbiAgaWYgKG9wdGlvbnMgPT0gbnVsbCkge1xuICAgIG9wdGlvbnMgPSB7fVxuICB9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgIG9wdGlvbnMgPSB4dGVuZChvcHRpb25zKVxuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcignSW52YWxpZCB2YWx1ZSBgJyArIG9wdGlvbnMgKyAnYCBmb3Igc2V0dGluZyBgb3B0aW9uc2AnKVxuICB9XG5cbiAgZm9yIChrZXkgaW4gZGVmYXVsdHMpIHtcbiAgICB2YWx1ZSA9IG9wdGlvbnNba2V5XVxuXG4gICAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICAgIHZhbHVlID0gY3VycmVudFtrZXldXG4gICAgfVxuXG4gICAgaWYgKFxuICAgICAgKGtleSAhPT0gJ2Jsb2NrcycgJiYgdHlwZW9mIHZhbHVlICE9PSAnYm9vbGVhbicpIHx8XG4gICAgICAoa2V5ID09PSAnYmxvY2tzJyAmJiB0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKVxuICAgICkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAnSW52YWxpZCB2YWx1ZSBgJyArIHZhbHVlICsgJ2AgZm9yIHNldHRpbmcgYG9wdGlvbnMuJyArIGtleSArICdgJ1xuICAgICAgKVxuICAgIH1cblxuICAgIG9wdGlvbnNba2V5XSA9IHZhbHVlXG4gIH1cblxuICBzZWxmLm9wdGlvbnMgPSBvcHRpb25zXG4gIHNlbGYuZXNjYXBlID0gZXNjYXBlcyhvcHRpb25zKVxuXG4gIHJldHVybiBzZWxmXG59XG4iXSwibmFtZXMiOlsieHRlbmQiLCJyZXF1aXJlIiwiZXNjYXBlcyIsImRlZmF1bHRzIiwibW9kdWxlIiwiZXhwb3J0cyIsInNldE9wdGlvbnMiLCJvcHRpb25zIiwic2VsZiIsImN1cnJlbnQiLCJrZXkiLCJ2YWx1ZSIsIkVycm9yIiwiZXNjYXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/set-options.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/auto-link.js":
/*!*************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/auto-link.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nvar decode = __webpack_require__(/*! parse-entities */ \"(rsc)/./node_modules/parse-entities/index.js\");\nvar locate = __webpack_require__(/*! ../locate/tag */ \"(rsc)/./node_modules/remark-parse/lib/locate/tag.js\");\nmodule.exports = autoLink;\nautoLink.locator = locate;\nautoLink.notInLink = true;\nvar lessThan = \"<\";\nvar greaterThan = \">\";\nvar atSign = \"@\";\nvar slash = \"/\";\nvar mailto = \"mailto:\";\nvar mailtoLength = mailto.length;\nfunction autoLink(eat, value, silent) {\n    var self = this;\n    var subvalue = \"\";\n    var length = value.length;\n    var index = 0;\n    var queue = \"\";\n    var hasAtCharacter = false;\n    var link = \"\";\n    var character;\n    var now;\n    var content;\n    var tokenizers;\n    var exit;\n    if (value.charAt(0) !== lessThan) {\n        return;\n    }\n    index++;\n    subvalue = lessThan;\n    while(index < length){\n        character = value.charAt(index);\n        if (whitespace(character) || character === greaterThan || character === atSign || character === \":\" && value.charAt(index + 1) === slash) {\n            break;\n        }\n        queue += character;\n        index++;\n    }\n    if (!queue) {\n        return;\n    }\n    link += queue;\n    queue = \"\";\n    character = value.charAt(index);\n    link += character;\n    index++;\n    if (character === atSign) {\n        hasAtCharacter = true;\n    } else {\n        if (character !== \":\" || value.charAt(index + 1) !== slash) {\n            return;\n        }\n        link += slash;\n        index++;\n    }\n    while(index < length){\n        character = value.charAt(index);\n        if (whitespace(character) || character === greaterThan) {\n            break;\n        }\n        queue += character;\n        index++;\n    }\n    character = value.charAt(index);\n    if (!queue || character !== greaterThan) {\n        return;\n    }\n    /* istanbul ignore if - never used (yet) */ if (silent) {\n        return true;\n    }\n    link += queue;\n    content = link;\n    subvalue += link + character;\n    now = eat.now();\n    now.column++;\n    now.offset++;\n    if (hasAtCharacter) {\n        if (link.slice(0, mailtoLength).toLowerCase() === mailto) {\n            content = content.slice(mailtoLength);\n            now.column += mailtoLength;\n            now.offset += mailtoLength;\n        } else {\n            link = mailto + link;\n        }\n    }\n    // Temporarily remove all tokenizers except text in autolinks.\n    tokenizers = self.inlineTokenizers;\n    self.inlineTokenizers = {\n        text: tokenizers.text\n    };\n    exit = self.enterLink();\n    content = self.tokenizeInline(content, now);\n    self.inlineTokenizers = tokenizers;\n    exit();\n    return eat(subvalue)({\n        type: \"link\",\n        title: null,\n        url: decode(link, {\n            nonTerminated: false\n        }),\n        children: content\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9hdXRvLWxpbmsuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUN6QixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUNyQixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUVyQkcsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsU0FBU0MsT0FBTyxHQUFHSjtBQUNuQkcsU0FBU0UsU0FBUyxHQUFHO0FBRXJCLElBQUlDLFdBQVc7QUFDZixJQUFJQyxjQUFjO0FBQ2xCLElBQUlDLFNBQVM7QUFDYixJQUFJQyxRQUFRO0FBQ1osSUFBSUMsU0FBUztBQUNiLElBQUlDLGVBQWVELE9BQU9FLE1BQU07QUFFaEMsU0FBU1QsU0FBU1UsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDbEMsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSUMsV0FBVztJQUNmLElBQUlMLFNBQVNFLE1BQU1GLE1BQU07SUFDekIsSUFBSU0sUUFBUTtJQUNaLElBQUlDLFFBQVE7SUFDWixJQUFJQyxpQkFBaUI7SUFDckIsSUFBSUMsT0FBTztJQUNYLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFFSixJQUFJWixNQUFNYSxNQUFNLENBQUMsT0FBT3JCLFVBQVU7UUFDaEM7SUFDRjtJQUVBWTtJQUNBRCxXQUFXWDtJQUVYLE1BQU9ZLFFBQVFOLE9BQVE7UUFDckJVLFlBQVlSLE1BQU1hLE1BQU0sQ0FBQ1Q7UUFFekIsSUFDRXJCLFdBQVd5QixjQUNYQSxjQUFjZixlQUNkZSxjQUFjZCxVQUNiYyxjQUFjLE9BQU9SLE1BQU1hLE1BQU0sQ0FBQ1QsUUFBUSxPQUFPVCxPQUNsRDtZQUNBO1FBQ0Y7UUFFQVUsU0FBU0c7UUFDVEo7SUFDRjtJQUVBLElBQUksQ0FBQ0MsT0FBTztRQUNWO0lBQ0Y7SUFFQUUsUUFBUUY7SUFDUkEsUUFBUTtJQUVSRyxZQUFZUixNQUFNYSxNQUFNLENBQUNUO0lBQ3pCRyxRQUFRQztJQUNSSjtJQUVBLElBQUlJLGNBQWNkLFFBQVE7UUFDeEJZLGlCQUFpQjtJQUNuQixPQUFPO1FBQ0wsSUFBSUUsY0FBYyxPQUFPUixNQUFNYSxNQUFNLENBQUNULFFBQVEsT0FBT1QsT0FBTztZQUMxRDtRQUNGO1FBRUFZLFFBQVFaO1FBQ1JTO0lBQ0Y7SUFFQSxNQUFPQSxRQUFRTixPQUFRO1FBQ3JCVSxZQUFZUixNQUFNYSxNQUFNLENBQUNUO1FBRXpCLElBQUlyQixXQUFXeUIsY0FBY0EsY0FBY2YsYUFBYTtZQUN0RDtRQUNGO1FBRUFZLFNBQVNHO1FBQ1RKO0lBQ0Y7SUFFQUksWUFBWVIsTUFBTWEsTUFBTSxDQUFDVDtJQUV6QixJQUFJLENBQUNDLFNBQVNHLGNBQWNmLGFBQWE7UUFDdkM7SUFDRjtJQUVBLHlDQUF5QyxHQUN6QyxJQUFJUSxRQUFRO1FBQ1YsT0FBTztJQUNUO0lBRUFNLFFBQVFGO0lBQ1JLLFVBQVVIO0lBQ1ZKLFlBQVlJLE9BQU9DO0lBQ25CQyxNQUFNVixJQUFJVSxHQUFHO0lBQ2JBLElBQUlLLE1BQU07SUFDVkwsSUFBSU0sTUFBTTtJQUVWLElBQUlULGdCQUFnQjtRQUNsQixJQUFJQyxLQUFLUyxLQUFLLENBQUMsR0FBR25CLGNBQWNvQixXQUFXLE9BQU9yQixRQUFRO1lBQ3hEYyxVQUFVQSxRQUFRTSxLQUFLLENBQUNuQjtZQUN4QlksSUFBSUssTUFBTSxJQUFJakI7WUFDZFksSUFBSU0sTUFBTSxJQUFJbEI7UUFDaEIsT0FBTztZQUNMVSxPQUFPWCxTQUFTVztRQUNsQjtJQUNGO0lBRUEsOERBQThEO0lBQzlESSxhQUFhVCxLQUFLZ0IsZ0JBQWdCO0lBQ2xDaEIsS0FBS2dCLGdCQUFnQixHQUFHO1FBQUNDLE1BQU1SLFdBQVdRLElBQUk7SUFBQTtJQUU5Q1AsT0FBT1YsS0FBS2tCLFNBQVM7SUFFckJWLFVBQVVSLEtBQUttQixjQUFjLENBQUNYLFNBQVNEO0lBRXZDUCxLQUFLZ0IsZ0JBQWdCLEdBQUdQO0lBQ3hCQztJQUVBLE9BQU9iLElBQUlJLFVBQVU7UUFDbkJtQixNQUFNO1FBQ05DLE9BQU87UUFDUEMsS0FBS3ZDLE9BQU9zQixNQUFNO1lBQUNrQixlQUFlO1FBQUs7UUFDdkNDLFVBQVVoQjtJQUNaO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2F1dG8tbGluay5qcz9mZmM1Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJylcbnZhciBkZWNvZGUgPSByZXF1aXJlKCdwYXJzZS1lbnRpdGllcycpXG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL3RhZycpXG5cbm1vZHVsZS5leHBvcnRzID0gYXV0b0xpbmtcbmF1dG9MaW5rLmxvY2F0b3IgPSBsb2NhdGVcbmF1dG9MaW5rLm5vdEluTGluayA9IHRydWVcblxudmFyIGxlc3NUaGFuID0gJzwnXG52YXIgZ3JlYXRlclRoYW4gPSAnPidcbnZhciBhdFNpZ24gPSAnQCdcbnZhciBzbGFzaCA9ICcvJ1xudmFyIG1haWx0byA9ICdtYWlsdG86J1xudmFyIG1haWx0b0xlbmd0aCA9IG1haWx0by5sZW5ndGhcblxuZnVuY3Rpb24gYXV0b0xpbmsoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgc3VidmFsdWUgPSAnJ1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoXG4gIHZhciBpbmRleCA9IDBcbiAgdmFyIHF1ZXVlID0gJydcbiAgdmFyIGhhc0F0Q2hhcmFjdGVyID0gZmFsc2VcbiAgdmFyIGxpbmsgPSAnJ1xuICB2YXIgY2hhcmFjdGVyXG4gIHZhciBub3dcbiAgdmFyIGNvbnRlbnRcbiAgdmFyIHRva2VuaXplcnNcbiAgdmFyIGV4aXRcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSBsZXNzVGhhbikge1xuICAgIHJldHVyblxuICB9XG5cbiAgaW5kZXgrK1xuICBzdWJ2YWx1ZSA9IGxlc3NUaGFuXG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgaWYgKFxuICAgICAgd2hpdGVzcGFjZShjaGFyYWN0ZXIpIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IGdyZWF0ZXJUaGFuIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IGF0U2lnbiB8fFxuICAgICAgKGNoYXJhY3RlciA9PT0gJzonICYmIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBzbGFzaClcbiAgICApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyXG4gICAgaW5kZXgrK1xuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgbGluayArPSBxdWV1ZVxuICBxdWV1ZSA9ICcnXG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuICBsaW5rICs9IGNoYXJhY3RlclxuICBpbmRleCsrXG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gYXRTaWduKSB7XG4gICAgaGFzQXRDaGFyYWN0ZXIgPSB0cnVlXG4gIH0gZWxzZSB7XG4gICAgaWYgKGNoYXJhY3RlciAhPT0gJzonIHx8IHZhbHVlLmNoYXJBdChpbmRleCArIDEpICE9PSBzbGFzaCkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgbGluayArPSBzbGFzaFxuICAgIGluZGV4KytcbiAgfVxuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleClcblxuICAgIGlmICh3aGl0ZXNwYWNlKGNoYXJhY3RlcikgfHwgY2hhcmFjdGVyID09PSBncmVhdGVyVGhhbikge1xuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXJcbiAgICBpbmRleCsrXG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgaWYgKCFxdWV1ZSB8fCBjaGFyYWN0ZXIgIT09IGdyZWF0ZXJUaGFuKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgbGluayArPSBxdWV1ZVxuICBjb250ZW50ID0gbGlua1xuICBzdWJ2YWx1ZSArPSBsaW5rICsgY2hhcmFjdGVyXG4gIG5vdyA9IGVhdC5ub3coKVxuICBub3cuY29sdW1uKytcbiAgbm93Lm9mZnNldCsrXG5cbiAgaWYgKGhhc0F0Q2hhcmFjdGVyKSB7XG4gICAgaWYgKGxpbmsuc2xpY2UoMCwgbWFpbHRvTGVuZ3RoKS50b0xvd2VyQ2FzZSgpID09PSBtYWlsdG8pIHtcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKG1haWx0b0xlbmd0aClcbiAgICAgIG5vdy5jb2x1bW4gKz0gbWFpbHRvTGVuZ3RoXG4gICAgICBub3cub2Zmc2V0ICs9IG1haWx0b0xlbmd0aFxuICAgIH0gZWxzZSB7XG4gICAgICBsaW5rID0gbWFpbHRvICsgbGlua1xuICAgIH1cbiAgfVxuXG4gIC8vIFRlbXBvcmFyaWx5IHJlbW92ZSBhbGwgdG9rZW5pemVycyBleGNlcHQgdGV4dCBpbiBhdXRvbGlua3MuXG4gIHRva2VuaXplcnMgPSBzZWxmLmlubGluZVRva2VuaXplcnNcbiAgc2VsZi5pbmxpbmVUb2tlbml6ZXJzID0ge3RleHQ6IHRva2VuaXplcnMudGV4dH1cblxuICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKVxuXG4gIGNvbnRlbnQgPSBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdylcblxuICBzZWxmLmlubGluZVRva2VuaXplcnMgPSB0b2tlbml6ZXJzXG4gIGV4aXQoKVxuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAnbGluaycsXG4gICAgdGl0bGU6IG51bGwsXG4gICAgdXJsOiBkZWNvZGUobGluaywge25vblRlcm1pbmF0ZWQ6IGZhbHNlfSksXG4gICAgY2hpbGRyZW46IGNvbnRlbnRcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJ3aGl0ZXNwYWNlIiwicmVxdWlyZSIsImRlY29kZSIsImxvY2F0ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJhdXRvTGluayIsImxvY2F0b3IiLCJub3RJbkxpbmsiLCJsZXNzVGhhbiIsImdyZWF0ZXJUaGFuIiwiYXRTaWduIiwic2xhc2giLCJtYWlsdG8iLCJtYWlsdG9MZW5ndGgiLCJsZW5ndGgiLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsInNlbGYiLCJzdWJ2YWx1ZSIsImluZGV4IiwicXVldWUiLCJoYXNBdENoYXJhY3RlciIsImxpbmsiLCJjaGFyYWN0ZXIiLCJub3ciLCJjb250ZW50IiwidG9rZW5pemVycyIsImV4aXQiLCJjaGFyQXQiLCJjb2x1bW4iLCJvZmZzZXQiLCJzbGljZSIsInRvTG93ZXJDYXNlIiwiaW5saW5lVG9rZW5pemVycyIsInRleHQiLCJlbnRlckxpbmsiLCJ0b2tlbml6ZUlubGluZSIsInR5cGUiLCJ0aXRsZSIsInVybCIsIm5vblRlcm1pbmF0ZWQiLCJjaGlsZHJlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/auto-link.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/blockquote.js":
/*!**************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/blockquote.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar trim = __webpack_require__(/*! trim */ \"(rsc)/./node_modules/trim/index.js\");\nvar interrupt = __webpack_require__(/*! ../util/interrupt */ \"(rsc)/./node_modules/remark-parse/lib/util/interrupt.js\");\nmodule.exports = blockquote;\nvar lineFeed = \"\\n\";\nvar tab = \"\t\";\nvar space = \" \";\nvar greaterThan = \">\";\nfunction blockquote(eat, value, silent) {\n    var self = this;\n    var offsets = self.offset;\n    var tokenizers = self.blockTokenizers;\n    var interruptors = self.interruptBlockquote;\n    var now = eat.now();\n    var currentLine = now.line;\n    var length = value.length;\n    var values = [];\n    var contents = [];\n    var indents = [];\n    var add;\n    var index = 0;\n    var character;\n    var rest;\n    var nextIndex;\n    var content;\n    var line;\n    var startIndex;\n    var prefixed;\n    var exit;\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== space && character !== tab) {\n            break;\n        }\n        index++;\n    }\n    if (value.charAt(index) !== greaterThan) {\n        return;\n    }\n    if (silent) {\n        return true;\n    }\n    index = 0;\n    while(index < length){\n        nextIndex = value.indexOf(lineFeed, index);\n        startIndex = index;\n        prefixed = false;\n        if (nextIndex === -1) {\n            nextIndex = length;\n        }\n        while(index < length){\n            character = value.charAt(index);\n            if (character !== space && character !== tab) {\n                break;\n            }\n            index++;\n        }\n        if (value.charAt(index) === greaterThan) {\n            index++;\n            prefixed = true;\n            if (value.charAt(index) === space) {\n                index++;\n            }\n        } else {\n            index = startIndex;\n        }\n        content = value.slice(index, nextIndex);\n        if (!prefixed && !trim(content)) {\n            index = startIndex;\n            break;\n        }\n        if (!prefixed) {\n            rest = value.slice(index);\n            // Check if the following code contains a possible block.\n            if (interrupt(interruptors, tokenizers, self, [\n                eat,\n                rest,\n                true\n            ])) {\n                break;\n            }\n        }\n        line = startIndex === index ? content : value.slice(startIndex, nextIndex);\n        indents.push(index - startIndex);\n        values.push(line);\n        contents.push(content);\n        index = nextIndex + 1;\n    }\n    index = -1;\n    length = indents.length;\n    add = eat(values.join(lineFeed));\n    while(++index < length){\n        offsets[currentLine] = (offsets[currentLine] || 0) + indents[index];\n        currentLine++;\n    }\n    exit = self.enterBlock();\n    contents = self.tokenizeBlock(contents.join(lineFeed), now);\n    exit();\n    return add({\n        type: \"blockquote\",\n        children: contents\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9ibG9ja3F1b3RlLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsWUFBWUQsbUJBQU9BLENBQUM7QUFFeEJFLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsV0FBVztBQUNmLElBQUlDLE1BQU07QUFDVixJQUFJQyxRQUFRO0FBQ1osSUFBSUMsY0FBYztBQUVsQixTQUFTSixXQUFXSyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtJQUNwQyxJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJQyxVQUFVRCxLQUFLRSxNQUFNO0lBQ3pCLElBQUlDLGFBQWFILEtBQUtJLGVBQWU7SUFDckMsSUFBSUMsZUFBZUwsS0FBS00sbUJBQW1CO0lBQzNDLElBQUlDLE1BQU1WLElBQUlVLEdBQUc7SUFDakIsSUFBSUMsY0FBY0QsSUFBSUUsSUFBSTtJQUMxQixJQUFJQyxTQUFTWixNQUFNWSxNQUFNO0lBQ3pCLElBQUlDLFNBQVMsRUFBRTtJQUNmLElBQUlDLFdBQVcsRUFBRTtJQUNqQixJQUFJQyxVQUFVLEVBQUU7SUFDaEIsSUFBSUM7SUFDSixJQUFJQyxRQUFRO0lBQ1osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJVjtJQUNKLElBQUlXO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUVKLE1BQU9QLFFBQVFMLE9BQVE7UUFDckJNLFlBQVlsQixNQUFNeUIsTUFBTSxDQUFDUjtRQUV6QixJQUFJQyxjQUFjckIsU0FBU3FCLGNBQWN0QixLQUFLO1lBQzVDO1FBQ0Y7UUFFQXFCO0lBQ0Y7SUFFQSxJQUFJakIsTUFBTXlCLE1BQU0sQ0FBQ1IsV0FBV25CLGFBQWE7UUFDdkM7SUFDRjtJQUVBLElBQUlHLFFBQVE7UUFDVixPQUFPO0lBQ1Q7SUFFQWdCLFFBQVE7SUFFUixNQUFPQSxRQUFRTCxPQUFRO1FBQ3JCUSxZQUFZcEIsTUFBTTBCLE9BQU8sQ0FBQy9CLFVBQVVzQjtRQUNwQ0ssYUFBYUw7UUFDYk0sV0FBVztRQUVYLElBQUlILGNBQWMsQ0FBQyxHQUFHO1lBQ3BCQSxZQUFZUjtRQUNkO1FBRUEsTUFBT0ssUUFBUUwsT0FBUTtZQUNyQk0sWUFBWWxCLE1BQU15QixNQUFNLENBQUNSO1lBRXpCLElBQUlDLGNBQWNyQixTQUFTcUIsY0FBY3RCLEtBQUs7Z0JBQzVDO1lBQ0Y7WUFFQXFCO1FBQ0Y7UUFFQSxJQUFJakIsTUFBTXlCLE1BQU0sQ0FBQ1IsV0FBV25CLGFBQWE7WUFDdkNtQjtZQUNBTSxXQUFXO1lBRVgsSUFBSXZCLE1BQU15QixNQUFNLENBQUNSLFdBQVdwQixPQUFPO2dCQUNqQ29CO1lBQ0Y7UUFDRixPQUFPO1lBQ0xBLFFBQVFLO1FBQ1Y7UUFFQUQsVUFBVXJCLE1BQU0yQixLQUFLLENBQUNWLE9BQU9HO1FBRTdCLElBQUksQ0FBQ0csWUFBWSxDQUFDbEMsS0FBS2dDLFVBQVU7WUFDL0JKLFFBQVFLO1lBQ1I7UUFDRjtRQUVBLElBQUksQ0FBQ0MsVUFBVTtZQUNiSixPQUFPbkIsTUFBTTJCLEtBQUssQ0FBQ1Y7WUFFbkIseURBQXlEO1lBQ3pELElBQUkxQixVQUFVZ0IsY0FBY0YsWUFBWUgsTUFBTTtnQkFBQ0g7Z0JBQUtvQjtnQkFBTTthQUFLLEdBQUc7Z0JBQ2hFO1lBQ0Y7UUFDRjtRQUVBUixPQUFPVyxlQUFlTCxRQUFRSSxVQUFVckIsTUFBTTJCLEtBQUssQ0FBQ0wsWUFBWUY7UUFFaEVMLFFBQVFhLElBQUksQ0FBQ1gsUUFBUUs7UUFDckJULE9BQU9lLElBQUksQ0FBQ2pCO1FBQ1pHLFNBQVNjLElBQUksQ0FBQ1A7UUFFZEosUUFBUUcsWUFBWTtJQUN0QjtJQUVBSCxRQUFRLENBQUM7SUFDVEwsU0FBU0csUUFBUUgsTUFBTTtJQUN2QkksTUFBTWpCLElBQUljLE9BQU9nQixJQUFJLENBQUNsQztJQUV0QixNQUFPLEVBQUVzQixRQUFRTCxPQUFRO1FBQ3ZCVCxPQUFPLENBQUNPLFlBQVksR0FBRyxDQUFDUCxPQUFPLENBQUNPLFlBQVksSUFBSSxLQUFLSyxPQUFPLENBQUNFLE1BQU07UUFDbkVQO0lBQ0Y7SUFFQWMsT0FBT3RCLEtBQUs0QixVQUFVO0lBQ3RCaEIsV0FBV1osS0FBSzZCLGFBQWEsQ0FBQ2pCLFNBQVNlLElBQUksQ0FBQ2xDLFdBQVdjO0lBQ3ZEZTtJQUVBLE9BQU9SLElBQUk7UUFBQ2dCLE1BQU07UUFBY0MsVUFBVW5CO0lBQVE7QUFDcEQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2Jsb2NrcXVvdGUuanM/MmZhZSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJylcbnZhciBpbnRlcnJ1cHQgPSByZXF1aXJlKCcuLi91dGlsL2ludGVycnVwdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gYmxvY2txdW90ZVxuXG52YXIgbGluZUZlZWQgPSAnXFxuJ1xudmFyIHRhYiA9ICdcXHQnXG52YXIgc3BhY2UgPSAnICdcbnZhciBncmVhdGVyVGhhbiA9ICc+J1xuXG5mdW5jdGlvbiBibG9ja3F1b3RlKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIG9mZnNldHMgPSBzZWxmLm9mZnNldFxuICB2YXIgdG9rZW5pemVycyA9IHNlbGYuYmxvY2tUb2tlbml6ZXJzXG4gIHZhciBpbnRlcnJ1cHRvcnMgPSBzZWxmLmludGVycnVwdEJsb2NrcXVvdGVcbiAgdmFyIG5vdyA9IGVhdC5ub3coKVxuICB2YXIgY3VycmVudExpbmUgPSBub3cubGluZVxuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoXG4gIHZhciB2YWx1ZXMgPSBbXVxuICB2YXIgY29udGVudHMgPSBbXVxuICB2YXIgaW5kZW50cyA9IFtdXG4gIHZhciBhZGRcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgY2hhcmFjdGVyXG4gIHZhciByZXN0XG4gIHZhciBuZXh0SW5kZXhcbiAgdmFyIGNvbnRlbnRcbiAgdmFyIGxpbmVcbiAgdmFyIHN0YXJ0SW5kZXhcbiAgdmFyIHByZWZpeGVkXG4gIHZhciBleGl0XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gc3BhY2UgJiYgY2hhcmFjdGVyICE9PSB0YWIpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgaW5kZXgrK1xuICB9XG5cbiAgaWYgKHZhbHVlLmNoYXJBdChpbmRleCkgIT09IGdyZWF0ZXJUaGFuKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGluZGV4ID0gMFxuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIG5leHRJbmRleCA9IHZhbHVlLmluZGV4T2YobGluZUZlZWQsIGluZGV4KVxuICAgIHN0YXJ0SW5kZXggPSBpbmRleFxuICAgIHByZWZpeGVkID0gZmFsc2VcblxuICAgIGlmIChuZXh0SW5kZXggPT09IC0xKSB7XG4gICAgICBuZXh0SW5kZXggPSBsZW5ndGhcbiAgICB9XG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleClcblxuICAgICAgaWYgKGNoYXJhY3RlciAhPT0gc3BhY2UgJiYgY2hhcmFjdGVyICE9PSB0YWIpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgaW5kZXgrK1xuICAgIH1cblxuICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpID09PSBncmVhdGVyVGhhbikge1xuICAgICAgaW5kZXgrK1xuICAgICAgcHJlZml4ZWQgPSB0cnVlXG5cbiAgICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpID09PSBzcGFjZSkge1xuICAgICAgICBpbmRleCsrXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGluZGV4ID0gc3RhcnRJbmRleFxuICAgIH1cblxuICAgIGNvbnRlbnQgPSB2YWx1ZS5zbGljZShpbmRleCwgbmV4dEluZGV4KVxuXG4gICAgaWYgKCFwcmVmaXhlZCAmJiAhdHJpbShjb250ZW50KSkge1xuICAgICAgaW5kZXggPSBzdGFydEluZGV4XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGlmICghcHJlZml4ZWQpIHtcbiAgICAgIHJlc3QgPSB2YWx1ZS5zbGljZShpbmRleClcblxuICAgICAgLy8gQ2hlY2sgaWYgdGhlIGZvbGxvd2luZyBjb2RlIGNvbnRhaW5zIGEgcG9zc2libGUgYmxvY2suXG4gICAgICBpZiAoaW50ZXJydXB0KGludGVycnVwdG9ycywgdG9rZW5pemVycywgc2VsZiwgW2VhdCwgcmVzdCwgdHJ1ZV0pKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgbGluZSA9IHN0YXJ0SW5kZXggPT09IGluZGV4ID8gY29udGVudCA6IHZhbHVlLnNsaWNlKHN0YXJ0SW5kZXgsIG5leHRJbmRleClcblxuICAgIGluZGVudHMucHVzaChpbmRleCAtIHN0YXJ0SW5kZXgpXG4gICAgdmFsdWVzLnB1c2gobGluZSlcbiAgICBjb250ZW50cy5wdXNoKGNvbnRlbnQpXG5cbiAgICBpbmRleCA9IG5leHRJbmRleCArIDFcbiAgfVxuXG4gIGluZGV4ID0gLTFcbiAgbGVuZ3RoID0gaW5kZW50cy5sZW5ndGhcbiAgYWRkID0gZWF0KHZhbHVlcy5qb2luKGxpbmVGZWVkKSlcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIG9mZnNldHNbY3VycmVudExpbmVdID0gKG9mZnNldHNbY3VycmVudExpbmVdIHx8IDApICsgaW5kZW50c1tpbmRleF1cbiAgICBjdXJyZW50TGluZSsrXG4gIH1cblxuICBleGl0ID0gc2VsZi5lbnRlckJsb2NrKClcbiAgY29udGVudHMgPSBzZWxmLnRva2VuaXplQmxvY2soY29udGVudHMuam9pbihsaW5lRmVlZCksIG5vdylcbiAgZXhpdCgpXG5cbiAgcmV0dXJuIGFkZCh7dHlwZTogJ2Jsb2NrcXVvdGUnLCBjaGlsZHJlbjogY29udGVudHN9KVxufVxuIl0sIm5hbWVzIjpbInRyaW0iLCJyZXF1aXJlIiwiaW50ZXJydXB0IiwibW9kdWxlIiwiZXhwb3J0cyIsImJsb2NrcXVvdGUiLCJsaW5lRmVlZCIsInRhYiIsInNwYWNlIiwiZ3JlYXRlclRoYW4iLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsInNlbGYiLCJvZmZzZXRzIiwib2Zmc2V0IiwidG9rZW5pemVycyIsImJsb2NrVG9rZW5pemVycyIsImludGVycnVwdG9ycyIsImludGVycnVwdEJsb2NrcXVvdGUiLCJub3ciLCJjdXJyZW50TGluZSIsImxpbmUiLCJsZW5ndGgiLCJ2YWx1ZXMiLCJjb250ZW50cyIsImluZGVudHMiLCJhZGQiLCJpbmRleCIsImNoYXJhY3RlciIsInJlc3QiLCJuZXh0SW5kZXgiLCJjb250ZW50Iiwic3RhcnRJbmRleCIsInByZWZpeGVkIiwiZXhpdCIsImNoYXJBdCIsImluZGV4T2YiLCJzbGljZSIsInB1c2giLCJqb2luIiwiZW50ZXJCbG9jayIsInRva2VuaXplQmxvY2siLCJ0eXBlIiwiY2hpbGRyZW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/blockquote.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/break.js":
/*!*********************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/break.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar locate = __webpack_require__(/*! ../locate/break */ \"(rsc)/./node_modules/remark-parse/lib/locate/break.js\");\nmodule.exports = hardBreak;\nhardBreak.locator = locate;\nvar space = \" \";\nvar lineFeed = \"\\n\";\nvar minBreakLength = 2;\nfunction hardBreak(eat, value, silent) {\n    var length = value.length;\n    var index = -1;\n    var queue = \"\";\n    var character;\n    while(++index < length){\n        character = value.charAt(index);\n        if (character === lineFeed) {\n            if (index < minBreakLength) {\n                return;\n            }\n            /* istanbul ignore if - never used (yet) */ if (silent) {\n                return true;\n            }\n            queue += character;\n            return eat(queue)({\n                type: \"break\"\n            });\n        }\n        if (character !== space) {\n            return;\n        }\n        queue += character;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9icmVhay5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBRXJCQyxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxVQUFVQyxPQUFPLEdBQUdMO0FBRXBCLElBQUlNLFFBQVE7QUFDWixJQUFJQyxXQUFXO0FBQ2YsSUFBSUMsaUJBQWlCO0FBRXJCLFNBQVNKLFVBQVVLLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQ25DLElBQUlDLFNBQVNGLE1BQU1FLE1BQU07SUFDekIsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsSUFBSUMsUUFBUTtJQUNaLElBQUlDO0lBRUosTUFBTyxFQUFFRixRQUFRRCxPQUFRO1FBQ3ZCRyxZQUFZTCxNQUFNTSxNQUFNLENBQUNIO1FBRXpCLElBQUlFLGNBQWNSLFVBQVU7WUFDMUIsSUFBSU0sUUFBUUwsZ0JBQWdCO2dCQUMxQjtZQUNGO1lBRUEseUNBQXlDLEdBQ3pDLElBQUlHLFFBQVE7Z0JBQ1YsT0FBTztZQUNUO1lBRUFHLFNBQVNDO1lBRVQsT0FBT04sSUFBSUssT0FBTztnQkFBQ0csTUFBTTtZQUFPO1FBQ2xDO1FBRUEsSUFBSUYsY0FBY1QsT0FBTztZQUN2QjtRQUNGO1FBRUFRLFNBQVNDO0lBQ1g7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvYnJlYWsuanM/NmM4MiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9icmVhaycpXG5cbm1vZHVsZS5leHBvcnRzID0gaGFyZEJyZWFrXG5oYXJkQnJlYWsubG9jYXRvciA9IGxvY2F0ZVxuXG52YXIgc3BhY2UgPSAnICdcbnZhciBsaW5lRmVlZCA9ICdcXG4nXG52YXIgbWluQnJlYWtMZW5ndGggPSAyXG5cbmZ1bmN0aW9uIGhhcmRCcmVhayhlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgcXVldWUgPSAnJ1xuICB2YXIgY2hhcmFjdGVyXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSBsaW5lRmVlZCkge1xuICAgICAgaWYgKGluZGV4IDwgbWluQnJlYWtMZW5ndGgpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyXG5cbiAgICAgIHJldHVybiBlYXQocXVldWUpKHt0eXBlOiAnYnJlYWsnfSlcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBzcGFjZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJsb2NhdGUiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsImhhcmRCcmVhayIsImxvY2F0b3IiLCJzcGFjZSIsImxpbmVGZWVkIiwibWluQnJlYWtMZW5ndGgiLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsImxlbmd0aCIsImluZGV4IiwicXVldWUiLCJjaGFyYWN0ZXIiLCJjaGFyQXQiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/break.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/code-fenced.js":
/*!***************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/code-fenced.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = fencedCode;\nvar lineFeed = \"\\n\";\nvar tab = \"\t\";\nvar space = \" \";\nvar tilde = \"~\";\nvar graveAccent = \"`\";\nvar minFenceCount = 3;\nvar tabSize = 4;\nfunction fencedCode(eat, value, silent) {\n    var self = this;\n    var gfm = self.options.gfm;\n    var length = value.length + 1;\n    var index = 0;\n    var subvalue = \"\";\n    var fenceCount;\n    var marker;\n    var character;\n    var flag;\n    var lang;\n    var meta;\n    var queue;\n    var content;\n    var exdentedContent;\n    var closing;\n    var exdentedClosing;\n    var indent;\n    var now;\n    if (!gfm) {\n        return;\n    }\n    // Eat initial spacing.\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== space && character !== tab) {\n            break;\n        }\n        subvalue += character;\n        index++;\n    }\n    indent = index;\n    // Eat the fence.\n    character = value.charAt(index);\n    if (character !== tilde && character !== graveAccent) {\n        return;\n    }\n    index++;\n    marker = character;\n    fenceCount = 1;\n    subvalue += character;\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== marker) {\n            break;\n        }\n        subvalue += character;\n        fenceCount++;\n        index++;\n    }\n    if (fenceCount < minFenceCount) {\n        return;\n    }\n    // Eat spacing before flag.\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== space && character !== tab) {\n            break;\n        }\n        subvalue += character;\n        index++;\n    }\n    // Eat flag.\n    flag = \"\";\n    queue = \"\";\n    while(index < length){\n        character = value.charAt(index);\n        if (character === lineFeed || marker === graveAccent && character === marker) {\n            break;\n        }\n        if (character === space || character === tab) {\n            queue += character;\n        } else {\n            flag += queue + character;\n            queue = \"\";\n        }\n        index++;\n    }\n    character = value.charAt(index);\n    if (character && character !== lineFeed) {\n        return;\n    }\n    if (silent) {\n        return true;\n    }\n    now = eat.now();\n    now.column += subvalue.length;\n    now.offset += subvalue.length;\n    subvalue += flag;\n    flag = self.decode.raw(self.unescape(flag), now);\n    if (queue) {\n        subvalue += queue;\n    }\n    queue = \"\";\n    closing = \"\";\n    exdentedClosing = \"\";\n    content = \"\";\n    exdentedContent = \"\";\n    var skip = true;\n    // Eat content.\n    while(index < length){\n        character = value.charAt(index);\n        content += closing;\n        exdentedContent += exdentedClosing;\n        closing = \"\";\n        exdentedClosing = \"\";\n        if (character !== lineFeed) {\n            content += character;\n            exdentedClosing += character;\n            index++;\n            continue;\n        }\n        // The first line feed is ignored. Others aren’t.\n        if (skip) {\n            subvalue += character;\n            skip = false;\n        } else {\n            closing += character;\n            exdentedClosing += character;\n        }\n        queue = \"\";\n        index++;\n        while(index < length){\n            character = value.charAt(index);\n            if (character !== space) {\n                break;\n            }\n            queue += character;\n            index++;\n        }\n        closing += queue;\n        exdentedClosing += queue.slice(indent);\n        if (queue.length >= tabSize) {\n            continue;\n        }\n        queue = \"\";\n        while(index < length){\n            character = value.charAt(index);\n            if (character !== marker) {\n                break;\n            }\n            queue += character;\n            index++;\n        }\n        closing += queue;\n        exdentedClosing += queue;\n        if (queue.length < fenceCount) {\n            continue;\n        }\n        queue = \"\";\n        while(index < length){\n            character = value.charAt(index);\n            if (character !== space && character !== tab) {\n                break;\n            }\n            closing += character;\n            exdentedClosing += character;\n            index++;\n        }\n        if (!character || character === lineFeed) {\n            break;\n        }\n    }\n    subvalue += content + closing;\n    // Get lang and meta from the flag.\n    index = -1;\n    length = flag.length;\n    while(++index < length){\n        character = flag.charAt(index);\n        if (character === space || character === tab) {\n            if (!lang) {\n                lang = flag.slice(0, index);\n            }\n        } else if (lang) {\n            meta = flag.slice(index);\n            break;\n        }\n    }\n    return eat(subvalue)({\n        type: \"code\",\n        lang: lang || flag || null,\n        meta: meta || null,\n        value: exdentedContent\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/code-fenced.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/code-indented.js":
/*!*****************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/code-indented.js ***!
  \*****************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar repeat = __webpack_require__(/*! repeat-string */ \"(rsc)/./node_modules/repeat-string/index.js\");\nvar trim = __webpack_require__(/*! trim-trailing-lines */ \"(rsc)/./node_modules/trim-trailing-lines/index.js\");\nmodule.exports = indentedCode;\nvar lineFeed = \"\\n\";\nvar tab = \"\t\";\nvar space = \" \";\nvar tabSize = 4;\nvar codeIndent = repeat(space, tabSize);\nfunction indentedCode(eat, value, silent) {\n    var index = -1;\n    var length = value.length;\n    var subvalue = \"\";\n    var content = \"\";\n    var subvalueQueue = \"\";\n    var contentQueue = \"\";\n    var character;\n    var blankQueue;\n    var indent;\n    while(++index < length){\n        character = value.charAt(index);\n        if (indent) {\n            indent = false;\n            subvalue += subvalueQueue;\n            content += contentQueue;\n            subvalueQueue = \"\";\n            contentQueue = \"\";\n            if (character === lineFeed) {\n                subvalueQueue = character;\n                contentQueue = character;\n            } else {\n                subvalue += character;\n                content += character;\n                while(++index < length){\n                    character = value.charAt(index);\n                    if (!character || character === lineFeed) {\n                        contentQueue = character;\n                        subvalueQueue = character;\n                        break;\n                    }\n                    subvalue += character;\n                    content += character;\n                }\n            }\n        } else if (character === space && value.charAt(index + 1) === character && value.charAt(index + 2) === character && value.charAt(index + 3) === character) {\n            subvalueQueue += codeIndent;\n            index += 3;\n            indent = true;\n        } else if (character === tab) {\n            subvalueQueue += character;\n            indent = true;\n        } else {\n            blankQueue = \"\";\n            while(character === tab || character === space){\n                blankQueue += character;\n                character = value.charAt(++index);\n            }\n            if (character !== lineFeed) {\n                break;\n            }\n            subvalueQueue += blankQueue + character;\n            contentQueue += character;\n        }\n    }\n    if (content) {\n        if (silent) {\n            return true;\n        }\n        return eat(subvalue)({\n            type: \"code\",\n            lang: null,\n            meta: null,\n            value: trim(content)\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9jb2RlLWluZGVudGVkLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsU0FBU0MsbUJBQU9BLENBQUM7QUFDckIsSUFBSUMsT0FBT0QsbUJBQU9BLENBQUM7QUFFbkJFLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsV0FBVztBQUNmLElBQUlDLE1BQU07QUFDVixJQUFJQyxRQUFRO0FBRVosSUFBSUMsVUFBVTtBQUNkLElBQUlDLGFBQWFWLE9BQU9RLE9BQU9DO0FBRS9CLFNBQVNKLGFBQWFNLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQ3RDLElBQUlDLFFBQVEsQ0FBQztJQUNiLElBQUlDLFNBQVNILE1BQU1HLE1BQU07SUFDekIsSUFBSUMsV0FBVztJQUNmLElBQUlDLFVBQVU7SUFDZCxJQUFJQyxnQkFBZ0I7SUFDcEIsSUFBSUMsZUFBZTtJQUNuQixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFFSixNQUFPLEVBQUVSLFFBQVFDLE9BQVE7UUFDdkJLLFlBQVlSLE1BQU1XLE1BQU0sQ0FBQ1Q7UUFFekIsSUFBSVEsUUFBUTtZQUNWQSxTQUFTO1lBRVROLFlBQVlFO1lBQ1pELFdBQVdFO1lBQ1hELGdCQUFnQjtZQUNoQkMsZUFBZTtZQUVmLElBQUlDLGNBQWNkLFVBQVU7Z0JBQzFCWSxnQkFBZ0JFO2dCQUNoQkQsZUFBZUM7WUFDakIsT0FBTztnQkFDTEosWUFBWUk7Z0JBQ1pILFdBQVdHO2dCQUVYLE1BQU8sRUFBRU4sUUFBUUMsT0FBUTtvQkFDdkJLLFlBQVlSLE1BQU1XLE1BQU0sQ0FBQ1Q7b0JBRXpCLElBQUksQ0FBQ00sYUFBYUEsY0FBY2QsVUFBVTt3QkFDeENhLGVBQWVDO3dCQUNmRixnQkFBZ0JFO3dCQUNoQjtvQkFDRjtvQkFFQUosWUFBWUk7b0JBQ1pILFdBQVdHO2dCQUNiO1lBQ0Y7UUFDRixPQUFPLElBQ0xBLGNBQWNaLFNBQ2RJLE1BQU1XLE1BQU0sQ0FBQ1QsUUFBUSxPQUFPTSxhQUM1QlIsTUFBTVcsTUFBTSxDQUFDVCxRQUFRLE9BQU9NLGFBQzVCUixNQUFNVyxNQUFNLENBQUNULFFBQVEsT0FBT00sV0FDNUI7WUFDQUYsaUJBQWlCUjtZQUNqQkksU0FBUztZQUNUUSxTQUFTO1FBQ1gsT0FBTyxJQUFJRixjQUFjYixLQUFLO1lBQzVCVyxpQkFBaUJFO1lBQ2pCRSxTQUFTO1FBQ1gsT0FBTztZQUNMRCxhQUFhO1lBRWIsTUFBT0QsY0FBY2IsT0FBT2EsY0FBY1osTUFBTztnQkFDL0NhLGNBQWNEO2dCQUNkQSxZQUFZUixNQUFNVyxNQUFNLENBQUMsRUFBRVQ7WUFDN0I7WUFFQSxJQUFJTSxjQUFjZCxVQUFVO2dCQUMxQjtZQUNGO1lBRUFZLGlCQUFpQkcsYUFBYUQ7WUFDOUJELGdCQUFnQkM7UUFDbEI7SUFDRjtJQUVBLElBQUlILFNBQVM7UUFDWCxJQUFJSixRQUFRO1lBQ1YsT0FBTztRQUNUO1FBRUEsT0FBT0YsSUFBSUssVUFBVTtZQUNuQlEsTUFBTTtZQUNOQyxNQUFNO1lBQ05DLE1BQU07WUFDTmQsT0FBT1YsS0FBS2U7UUFDZDtJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2NvZGUtaW5kZW50ZWQuanM/NzZlYiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKVxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltLXRyYWlsaW5nLWxpbmVzJylcblxubW9kdWxlLmV4cG9ydHMgPSBpbmRlbnRlZENvZGVcblxudmFyIGxpbmVGZWVkID0gJ1xcbidcbnZhciB0YWIgPSAnXFx0J1xudmFyIHNwYWNlID0gJyAnXG5cbnZhciB0YWJTaXplID0gNFxudmFyIGNvZGVJbmRlbnQgPSByZXBlYXQoc3BhY2UsIHRhYlNpemUpXG5cbmZ1bmN0aW9uIGluZGVudGVkQ29kZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIGxlbmd0aCA9IHZhbHVlLmxlbmd0aFxuICB2YXIgc3VidmFsdWUgPSAnJ1xuICB2YXIgY29udGVudCA9ICcnXG4gIHZhciBzdWJ2YWx1ZVF1ZXVlID0gJydcbiAgdmFyIGNvbnRlbnRRdWV1ZSA9ICcnXG4gIHZhciBjaGFyYWN0ZXJcbiAgdmFyIGJsYW5rUXVldWVcbiAgdmFyIGluZGVudFxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgaWYgKGluZGVudCkge1xuICAgICAgaW5kZW50ID0gZmFsc2VcblxuICAgICAgc3VidmFsdWUgKz0gc3VidmFsdWVRdWV1ZVxuICAgICAgY29udGVudCArPSBjb250ZW50UXVldWVcbiAgICAgIHN1YnZhbHVlUXVldWUgPSAnJ1xuICAgICAgY29udGVudFF1ZXVlID0gJydcblxuICAgICAgaWYgKGNoYXJhY3RlciA9PT0gbGluZUZlZWQpIHtcbiAgICAgICAgc3VidmFsdWVRdWV1ZSA9IGNoYXJhY3RlclxuICAgICAgICBjb250ZW50UXVldWUgPSBjaGFyYWN0ZXJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlclxuICAgICAgICBjb250ZW50ICs9IGNoYXJhY3RlclxuXG4gICAgICAgIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgICAgICAgaWYgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBsaW5lRmVlZCkge1xuICAgICAgICAgICAgY29udGVudFF1ZXVlID0gY2hhcmFjdGVyXG4gICAgICAgICAgICBzdWJ2YWx1ZVF1ZXVlID0gY2hhcmFjdGVyXG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHN1YnZhbHVlICs9IGNoYXJhY3RlclxuICAgICAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBzcGFjZSAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IGNoYXJhY3RlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMikgPT09IGNoYXJhY3RlciAmJlxuICAgICAgdmFsdWUuY2hhckF0KGluZGV4ICsgMykgPT09IGNoYXJhY3RlclxuICAgICkge1xuICAgICAgc3VidmFsdWVRdWV1ZSArPSBjb2RlSW5kZW50XG4gICAgICBpbmRleCArPSAzXG4gICAgICBpbmRlbnQgPSB0cnVlXG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IHRhYikge1xuICAgICAgc3VidmFsdWVRdWV1ZSArPSBjaGFyYWN0ZXJcbiAgICAgIGluZGVudCA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgYmxhbmtRdWV1ZSA9ICcnXG5cbiAgICAgIHdoaWxlIChjaGFyYWN0ZXIgPT09IHRhYiB8fCBjaGFyYWN0ZXIgPT09IHNwYWNlKSB7XG4gICAgICAgIGJsYW5rUXVldWUgKz0gY2hhcmFjdGVyXG4gICAgICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBsaW5lRmVlZCkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBzdWJ2YWx1ZVF1ZXVlICs9IGJsYW5rUXVldWUgKyBjaGFyYWN0ZXJcbiAgICAgIGNvbnRlbnRRdWV1ZSArPSBjaGFyYWN0ZXJcbiAgICB9XG4gIH1cblxuICBpZiAoY29udGVudCkge1xuICAgIGlmIChzaWxlbnQpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuXG4gICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgICAgdHlwZTogJ2NvZGUnLFxuICAgICAgbGFuZzogbnVsbCxcbiAgICAgIG1ldGE6IG51bGwsXG4gICAgICB2YWx1ZTogdHJpbShjb250ZW50KVxuICAgIH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJyZXBlYXQiLCJyZXF1aXJlIiwidHJpbSIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmRlbnRlZENvZGUiLCJsaW5lRmVlZCIsInRhYiIsInNwYWNlIiwidGFiU2l6ZSIsImNvZGVJbmRlbnQiLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsImluZGV4IiwibGVuZ3RoIiwic3VidmFsdWUiLCJjb250ZW50Iiwic3VidmFsdWVRdWV1ZSIsImNvbnRlbnRRdWV1ZSIsImNoYXJhY3RlciIsImJsYW5rUXVldWUiLCJpbmRlbnQiLCJjaGFyQXQiLCJ0eXBlIiwibGFuZyIsIm1ldGEiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/code-indented.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/code-inline.js":
/*!***************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/code-inline.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar locate = __webpack_require__(/*! ../locate/code-inline */ \"(rsc)/./node_modules/remark-parse/lib/locate/code-inline.js\");\nmodule.exports = inlineCode;\ninlineCode.locator = locate;\nvar lineFeed = 10 //  '\\n'\n;\nvar space = 32 // ' '\n;\nvar graveAccent = 96 //  '`'\n;\nfunction inlineCode(eat, value, silent) {\n    var length = value.length;\n    var index = 0;\n    var openingFenceEnd;\n    var closingFenceStart;\n    var closingFenceEnd;\n    var code;\n    var next;\n    var found;\n    while(index < length){\n        if (value.charCodeAt(index) !== graveAccent) {\n            break;\n        }\n        index++;\n    }\n    if (index === 0 || index === length) {\n        return;\n    }\n    openingFenceEnd = index;\n    next = value.charCodeAt(index);\n    while(index < length){\n        code = next;\n        next = value.charCodeAt(index + 1);\n        if (code === graveAccent) {\n            if (closingFenceStart === undefined) {\n                closingFenceStart = index;\n            }\n            closingFenceEnd = index + 1;\n            if (next !== graveAccent && closingFenceEnd - closingFenceStart === openingFenceEnd) {\n                found = true;\n                break;\n            }\n        } else if (closingFenceStart !== undefined) {\n            closingFenceStart = undefined;\n            closingFenceEnd = undefined;\n        }\n        index++;\n    }\n    if (!found) {\n        return;\n    }\n    /* istanbul ignore if - never used (yet) */ if (silent) {\n        return true;\n    }\n    // Remove the initial and final space (or line feed), iff they exist and there\n    // are non-space characters in the content.\n    index = openingFenceEnd;\n    length = closingFenceStart;\n    code = value.charCodeAt(index);\n    next = value.charCodeAt(length - 1);\n    found = false;\n    if (length - index > 2 && (code === space || code === lineFeed) && (next === space || next === lineFeed)) {\n        index++;\n        length--;\n        while(index < length){\n            code = value.charCodeAt(index);\n            if (code !== space && code !== lineFeed) {\n                found = true;\n                break;\n            }\n            index++;\n        }\n        if (found === true) {\n            openingFenceEnd++;\n            closingFenceStart--;\n        }\n    }\n    return eat(value.slice(0, closingFenceEnd))({\n        type: \"inlineCode\",\n        value: value.slice(openingFenceEnd, closingFenceStart)\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9jb2RlLWlubGluZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLFNBQVNDLG1CQUFPQSxDQUFDO0FBRXJCQyxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxXQUFXQyxPQUFPLEdBQUdMO0FBRXJCLElBQUlNLFdBQVcsR0FBRyxRQUFROztBQUMxQixJQUFJQyxRQUFRLEdBQUcsTUFBTTs7QUFDckIsSUFBSUMsY0FBYyxHQUFHLE9BQU87O0FBRTVCLFNBQVNKLFdBQVdLLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQ3BDLElBQUlDLFNBQVNGLE1BQU1FLE1BQU07SUFDekIsSUFBSUMsUUFBUTtJQUNaLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUVKLE1BQU9OLFFBQVFELE9BQVE7UUFDckIsSUFBSUYsTUFBTVUsVUFBVSxDQUFDUCxXQUFXTCxhQUFhO1lBQzNDO1FBQ0Y7UUFFQUs7SUFDRjtJQUVBLElBQUlBLFVBQVUsS0FBS0EsVUFBVUQsUUFBUTtRQUNuQztJQUNGO0lBRUFFLGtCQUFrQkQ7SUFDbEJLLE9BQU9SLE1BQU1VLFVBQVUsQ0FBQ1A7SUFFeEIsTUFBT0EsUUFBUUQsT0FBUTtRQUNyQkssT0FBT0M7UUFDUEEsT0FBT1IsTUFBTVUsVUFBVSxDQUFDUCxRQUFRO1FBRWhDLElBQUlJLFNBQVNULGFBQWE7WUFDeEIsSUFBSU8sc0JBQXNCTSxXQUFXO2dCQUNuQ04sb0JBQW9CRjtZQUN0QjtZQUVBRyxrQkFBa0JILFFBQVE7WUFFMUIsSUFDRUssU0FBU1YsZUFDVFEsa0JBQWtCRCxzQkFBc0JELGlCQUN4QztnQkFDQUssUUFBUTtnQkFDUjtZQUNGO1FBQ0YsT0FBTyxJQUFJSixzQkFBc0JNLFdBQVc7WUFDMUNOLG9CQUFvQk07WUFDcEJMLGtCQUFrQks7UUFDcEI7UUFFQVI7SUFDRjtJQUVBLElBQUksQ0FBQ00sT0FBTztRQUNWO0lBQ0Y7SUFFQSx5Q0FBeUMsR0FDekMsSUFBSVIsUUFBUTtRQUNWLE9BQU87SUFDVDtJQUVBLDhFQUE4RTtJQUM5RSwyQ0FBMkM7SUFDM0NFLFFBQVFDO0lBQ1JGLFNBQVNHO0lBQ1RFLE9BQU9QLE1BQU1VLFVBQVUsQ0FBQ1A7SUFDeEJLLE9BQU9SLE1BQU1VLFVBQVUsQ0FBQ1IsU0FBUztJQUNqQ08sUUFBUTtJQUVSLElBQ0VQLFNBQVNDLFFBQVEsS0FDaEJJLENBQUFBLFNBQVNWLFNBQVNVLFNBQVNYLFFBQU8sS0FDbENZLENBQUFBLFNBQVNYLFNBQVNXLFNBQVNaLFFBQU8sR0FDbkM7UUFDQU87UUFDQUQ7UUFFQSxNQUFPQyxRQUFRRCxPQUFRO1lBQ3JCSyxPQUFPUCxNQUFNVSxVQUFVLENBQUNQO1lBRXhCLElBQUlJLFNBQVNWLFNBQVNVLFNBQVNYLFVBQVU7Z0JBQ3ZDYSxRQUFRO2dCQUNSO1lBQ0Y7WUFFQU47UUFDRjtRQUVBLElBQUlNLFVBQVUsTUFBTTtZQUNsQkw7WUFDQUM7UUFDRjtJQUNGO0lBRUEsT0FBT04sSUFBSUMsTUFBTVksS0FBSyxDQUFDLEdBQUdOLGtCQUFrQjtRQUMxQ08sTUFBTTtRQUNOYixPQUFPQSxNQUFNWSxLQUFLLENBQUNSLGlCQUFpQkM7SUFDdEM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvY29kZS1pbmxpbmUuanM/Y2NmZCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9jb2RlLWlubGluZScpXG5cbm1vZHVsZS5leHBvcnRzID0gaW5saW5lQ29kZVxuaW5saW5lQ29kZS5sb2NhdG9yID0gbG9jYXRlXG5cbnZhciBsaW5lRmVlZCA9IDEwIC8vICAnXFxuJ1xudmFyIHNwYWNlID0gMzIgLy8gJyAnXG52YXIgZ3JhdmVBY2NlbnQgPSA5NiAvLyAgJ2AnXG5cbmZ1bmN0aW9uIGlubGluZUNvZGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGhcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgb3BlbmluZ0ZlbmNlRW5kXG4gIHZhciBjbG9zaW5nRmVuY2VTdGFydFxuICB2YXIgY2xvc2luZ0ZlbmNlRW5kXG4gIHZhciBjb2RlXG4gIHZhciBuZXh0XG4gIHZhciBmb3VuZFxuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmICh2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KSAhPT0gZ3JhdmVBY2NlbnQpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgaW5kZXgrK1xuICB9XG5cbiAgaWYgKGluZGV4ID09PSAwIHx8IGluZGV4ID09PSBsZW5ndGgpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIG9wZW5pbmdGZW5jZUVuZCA9IGluZGV4XG4gIG5leHQgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KVxuXG4gIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgIGNvZGUgPSBuZXh0XG4gICAgbmV4dCA9IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXggKyAxKVxuXG4gICAgaWYgKGNvZGUgPT09IGdyYXZlQWNjZW50KSB7XG4gICAgICBpZiAoY2xvc2luZ0ZlbmNlU3RhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjbG9zaW5nRmVuY2VTdGFydCA9IGluZGV4XG4gICAgICB9XG5cbiAgICAgIGNsb3NpbmdGZW5jZUVuZCA9IGluZGV4ICsgMVxuXG4gICAgICBpZiAoXG4gICAgICAgIG5leHQgIT09IGdyYXZlQWNjZW50ICYmXG4gICAgICAgIGNsb3NpbmdGZW5jZUVuZCAtIGNsb3NpbmdGZW5jZVN0YXJ0ID09PSBvcGVuaW5nRmVuY2VFbmRcbiAgICAgICkge1xuICAgICAgICBmb3VuZCA9IHRydWVcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGNsb3NpbmdGZW5jZVN0YXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNsb3NpbmdGZW5jZVN0YXJ0ID0gdW5kZWZpbmVkXG4gICAgICBjbG9zaW5nRmVuY2VFbmQgPSB1bmRlZmluZWRcbiAgICB9XG5cbiAgICBpbmRleCsrXG4gIH1cblxuICBpZiAoIWZvdW5kKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLy8gUmVtb3ZlIHRoZSBpbml0aWFsIGFuZCBmaW5hbCBzcGFjZSAob3IgbGluZSBmZWVkKSwgaWZmIHRoZXkgZXhpc3QgYW5kIHRoZXJlXG4gIC8vIGFyZSBub24tc3BhY2UgY2hhcmFjdGVycyBpbiB0aGUgY29udGVudC5cbiAgaW5kZXggPSBvcGVuaW5nRmVuY2VFbmRcbiAgbGVuZ3RoID0gY2xvc2luZ0ZlbmNlU3RhcnRcbiAgY29kZSA9IHZhbHVlLmNoYXJDb2RlQXQoaW5kZXgpXG4gIG5leHQgPSB2YWx1ZS5jaGFyQ29kZUF0KGxlbmd0aCAtIDEpXG4gIGZvdW5kID0gZmFsc2VcblxuICBpZiAoXG4gICAgbGVuZ3RoIC0gaW5kZXggPiAyICYmXG4gICAgKGNvZGUgPT09IHNwYWNlIHx8IGNvZGUgPT09IGxpbmVGZWVkKSAmJlxuICAgIChuZXh0ID09PSBzcGFjZSB8fCBuZXh0ID09PSBsaW5lRmVlZClcbiAgKSB7XG4gICAgaW5kZXgrK1xuICAgIGxlbmd0aC0tXG5cbiAgICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAgIGNvZGUgPSB2YWx1ZS5jaGFyQ29kZUF0KGluZGV4KVxuXG4gICAgICBpZiAoY29kZSAhPT0gc3BhY2UgJiYgY29kZSAhPT0gbGluZUZlZWQpIHtcbiAgICAgICAgZm91bmQgPSB0cnVlXG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGluZGV4KytcbiAgICB9XG5cbiAgICBpZiAoZm91bmQgPT09IHRydWUpIHtcbiAgICAgIG9wZW5pbmdGZW5jZUVuZCsrXG4gICAgICBjbG9zaW5nRmVuY2VTdGFydC0tXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGVhdCh2YWx1ZS5zbGljZSgwLCBjbG9zaW5nRmVuY2VFbmQpKSh7XG4gICAgdHlwZTogJ2lubGluZUNvZGUnLFxuICAgIHZhbHVlOiB2YWx1ZS5zbGljZShvcGVuaW5nRmVuY2VFbmQsIGNsb3NpbmdGZW5jZVN0YXJ0KVxuICB9KVxufVxuIl0sIm5hbWVzIjpbImxvY2F0ZSIsInJlcXVpcmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiaW5saW5lQ29kZSIsImxvY2F0b3IiLCJsaW5lRmVlZCIsInNwYWNlIiwiZ3JhdmVBY2NlbnQiLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsImxlbmd0aCIsImluZGV4Iiwib3BlbmluZ0ZlbmNlRW5kIiwiY2xvc2luZ0ZlbmNlU3RhcnQiLCJjbG9zaW5nRmVuY2VFbmQiLCJjb2RlIiwibmV4dCIsImZvdW5kIiwiY2hhckNvZGVBdCIsInVuZGVmaW5lZCIsInNsaWNlIiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/code-inline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/definition.js":
/*!**************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/definition.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nvar normalize = __webpack_require__(/*! ../util/normalize */ \"(rsc)/./node_modules/remark-parse/lib/util/normalize.js\");\nmodule.exports = definition;\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar backslash = \"\\\\\";\nvar lineFeed = \"\\n\";\nvar tab = \"\t\";\nvar space = \" \";\nvar leftSquareBracket = \"[\";\nvar rightSquareBracket = \"]\";\nvar leftParenthesis = \"(\";\nvar rightParenthesis = \")\";\nvar colon = \":\";\nvar lessThan = \"<\";\nvar greaterThan = \">\";\nfunction definition(eat, value, silent) {\n    var self = this;\n    var commonmark = self.options.commonmark;\n    var index = 0;\n    var length = value.length;\n    var subvalue = \"\";\n    var beforeURL;\n    var beforeTitle;\n    var queue;\n    var character;\n    var test;\n    var identifier;\n    var url;\n    var title;\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== space && character !== tab) {\n            break;\n        }\n        subvalue += character;\n        index++;\n    }\n    character = value.charAt(index);\n    if (character !== leftSquareBracket) {\n        return;\n    }\n    index++;\n    subvalue += character;\n    queue = \"\";\n    while(index < length){\n        character = value.charAt(index);\n        if (character === rightSquareBracket) {\n            break;\n        } else if (character === backslash) {\n            queue += character;\n            index++;\n            character = value.charAt(index);\n        }\n        queue += character;\n        index++;\n    }\n    if (!queue || value.charAt(index) !== rightSquareBracket || value.charAt(index + 1) !== colon) {\n        return;\n    }\n    identifier = queue;\n    subvalue += queue + rightSquareBracket + colon;\n    index = subvalue.length;\n    queue = \"\";\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== tab && character !== space && character !== lineFeed) {\n            break;\n        }\n        subvalue += character;\n        index++;\n    }\n    character = value.charAt(index);\n    queue = \"\";\n    beforeURL = subvalue;\n    if (character === lessThan) {\n        index++;\n        while(index < length){\n            character = value.charAt(index);\n            if (!isEnclosedURLCharacter(character)) {\n                break;\n            }\n            queue += character;\n            index++;\n        }\n        character = value.charAt(index);\n        if (character === isEnclosedURLCharacter.delimiter) {\n            subvalue += lessThan + queue + character;\n            index++;\n        } else {\n            if (commonmark) {\n                return;\n            }\n            index -= queue.length + 1;\n            queue = \"\";\n        }\n    }\n    if (!queue) {\n        while(index < length){\n            character = value.charAt(index);\n            if (!isUnclosedURLCharacter(character)) {\n                break;\n            }\n            queue += character;\n            index++;\n        }\n        subvalue += queue;\n    }\n    if (!queue) {\n        return;\n    }\n    url = queue;\n    queue = \"\";\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== tab && character !== space && character !== lineFeed) {\n            break;\n        }\n        queue += character;\n        index++;\n    }\n    character = value.charAt(index);\n    test = null;\n    if (character === quotationMark) {\n        test = quotationMark;\n    } else if (character === apostrophe) {\n        test = apostrophe;\n    } else if (character === leftParenthesis) {\n        test = rightParenthesis;\n    }\n    if (!test) {\n        queue = \"\";\n        index = subvalue.length;\n    } else if (queue) {\n        subvalue += queue + character;\n        index = subvalue.length;\n        queue = \"\";\n        while(index < length){\n            character = value.charAt(index);\n            if (character === test) {\n                break;\n            }\n            if (character === lineFeed) {\n                index++;\n                character = value.charAt(index);\n                if (character === lineFeed || character === test) {\n                    return;\n                }\n                queue += lineFeed;\n            }\n            queue += character;\n            index++;\n        }\n        character = value.charAt(index);\n        if (character !== test) {\n            return;\n        }\n        beforeTitle = subvalue;\n        subvalue += queue + character;\n        index++;\n        title = queue;\n        queue = \"\";\n    } else {\n        return;\n    }\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== tab && character !== space) {\n            break;\n        }\n        subvalue += character;\n        index++;\n    }\n    character = value.charAt(index);\n    if (!character || character === lineFeed) {\n        if (silent) {\n            return true;\n        }\n        beforeURL = eat(beforeURL).test().end;\n        url = self.decode.raw(self.unescape(url), beforeURL, {\n            nonTerminated: false\n        });\n        if (title) {\n            beforeTitle = eat(beforeTitle).test().end;\n            title = self.decode.raw(self.unescape(title), beforeTitle);\n        }\n        return eat(subvalue)({\n            type: \"definition\",\n            identifier: normalize(identifier),\n            label: identifier,\n            title: title || null,\n            url: url\n        });\n    }\n}\n// Check if `character` can be inside an enclosed URI.\nfunction isEnclosedURLCharacter(character) {\n    return character !== greaterThan && character !== leftSquareBracket && character !== rightSquareBracket;\n}\nisEnclosedURLCharacter.delimiter = greaterThan;\n// Check if `character` can be inside an unclosed URI.\nfunction isUnclosedURLCharacter(character) {\n    return character !== leftSquareBracket && character !== rightSquareBracket && !whitespace(character);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/definition.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/delete.js":
/*!**********************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/delete.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nvar locate = __webpack_require__(/*! ../locate/delete */ \"(rsc)/./node_modules/remark-parse/lib/locate/delete.js\");\nmodule.exports = strikethrough;\nstrikethrough.locator = locate;\nvar tilde = \"~\";\nvar fence = \"~~\";\nfunction strikethrough(eat, value, silent) {\n    var self = this;\n    var character = \"\";\n    var previous = \"\";\n    var preceding = \"\";\n    var subvalue = \"\";\n    var index;\n    var length;\n    var now;\n    if (!self.options.gfm || value.charAt(0) !== tilde || value.charAt(1) !== tilde || whitespace(value.charAt(2))) {\n        return;\n    }\n    index = 1;\n    length = value.length;\n    now = eat.now();\n    now.column += 2;\n    now.offset += 2;\n    while(++index < length){\n        character = value.charAt(index);\n        if (character === tilde && previous === tilde && (!preceding || !whitespace(preceding))) {\n            /* istanbul ignore if - never used (yet) */ if (silent) {\n                return true;\n            }\n            return eat(fence + subvalue + fence)({\n                type: \"delete\",\n                children: self.tokenizeInline(subvalue, now)\n            });\n        }\n        subvalue += previous;\n        preceding = previous;\n        previous = character;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9kZWxldGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxhQUFhQyxtQkFBT0EsQ0FBQztBQUN6QixJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQztBQUVyQkUsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsY0FBY0MsT0FBTyxHQUFHSjtBQUV4QixJQUFJSyxRQUFRO0FBQ1osSUFBSUMsUUFBUTtBQUVaLFNBQVNILGNBQWNJLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQ3ZDLElBQUlDLE9BQU8sSUFBSTtJQUNmLElBQUlDLFlBQVk7SUFDaEIsSUFBSUMsV0FBVztJQUNmLElBQUlDLFlBQVk7SUFDaEIsSUFBSUMsV0FBVztJQUNmLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUVKLElBQ0UsQ0FBQ1AsS0FBS1EsT0FBTyxDQUFDQyxHQUFHLElBQ2pCWCxNQUFNWSxNQUFNLENBQUMsT0FBT2YsU0FDcEJHLE1BQU1ZLE1BQU0sQ0FBQyxPQUFPZixTQUNwQlAsV0FBV1UsTUFBTVksTUFBTSxDQUFDLEtBQ3hCO1FBQ0E7SUFDRjtJQUVBTCxRQUFRO0lBQ1JDLFNBQVNSLE1BQU1RLE1BQU07SUFDckJDLE1BQU1WLElBQUlVLEdBQUc7SUFDYkEsSUFBSUksTUFBTSxJQUFJO0lBQ2RKLElBQUlLLE1BQU0sSUFBSTtJQUVkLE1BQU8sRUFBRVAsUUFBUUMsT0FBUTtRQUN2QkwsWUFBWUgsTUFBTVksTUFBTSxDQUFDTDtRQUV6QixJQUNFSixjQUFjTixTQUNkTyxhQUFhUCxTQUNaLEVBQUNRLGFBQWEsQ0FBQ2YsV0FBV2UsVUFBUyxHQUNwQztZQUNBLHlDQUF5QyxHQUN6QyxJQUFJSixRQUFRO2dCQUNWLE9BQU87WUFDVDtZQUVBLE9BQU9GLElBQUlELFFBQVFRLFdBQVdSLE9BQU87Z0JBQ25DaUIsTUFBTTtnQkFDTkMsVUFBVWQsS0FBS2UsY0FBYyxDQUFDWCxVQUFVRztZQUMxQztRQUNGO1FBRUFILFlBQVlGO1FBQ1pDLFlBQVlEO1FBQ1pBLFdBQVdEO0lBQ2I7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvZGVsZXRlLmpzPzBiYzIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKVxudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS9kZWxldGUnKVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0cmlrZXRocm91Z2hcbnN0cmlrZXRocm91Z2gubG9jYXRvciA9IGxvY2F0ZVxuXG52YXIgdGlsZGUgPSAnfidcbnZhciBmZW5jZSA9ICd+fidcblxuZnVuY3Rpb24gc3RyaWtldGhyb3VnaChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBjaGFyYWN0ZXIgPSAnJ1xuICB2YXIgcHJldmlvdXMgPSAnJ1xuICB2YXIgcHJlY2VkaW5nID0gJydcbiAgdmFyIHN1YnZhbHVlID0gJydcbiAgdmFyIGluZGV4XG4gIHZhciBsZW5ndGhcbiAgdmFyIG5vd1xuXG4gIGlmIChcbiAgICAhc2VsZi5vcHRpb25zLmdmbSB8fFxuICAgIHZhbHVlLmNoYXJBdCgwKSAhPT0gdGlsZGUgfHxcbiAgICB2YWx1ZS5jaGFyQXQoMSkgIT09IHRpbGRlIHx8XG4gICAgd2hpdGVzcGFjZSh2YWx1ZS5jaGFyQXQoMikpXG4gICkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaW5kZXggPSAxXG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aFxuICBub3cgPSBlYXQubm93KClcbiAgbm93LmNvbHVtbiArPSAyXG4gIG5vdy5vZmZzZXQgKz0gMlxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSB0aWxkZSAmJlxuICAgICAgcHJldmlvdXMgPT09IHRpbGRlICYmXG4gICAgICAoIXByZWNlZGluZyB8fCAhd2hpdGVzcGFjZShwcmVjZWRpbmcpKVxuICAgICkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWF0KGZlbmNlICsgc3VidmFsdWUgKyBmZW5jZSkoe1xuICAgICAgICB0eXBlOiAnZGVsZXRlJyxcbiAgICAgICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoc3VidmFsdWUsIG5vdylcbiAgICAgIH0pXG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gcHJldmlvdXNcbiAgICBwcmVjZWRpbmcgPSBwcmV2aW91c1xuICAgIHByZXZpb3VzID0gY2hhcmFjdGVyXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ3aGl0ZXNwYWNlIiwicmVxdWlyZSIsImxvY2F0ZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJzdHJpa2V0aHJvdWdoIiwibG9jYXRvciIsInRpbGRlIiwiZmVuY2UiLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsInNlbGYiLCJjaGFyYWN0ZXIiLCJwcmV2aW91cyIsInByZWNlZGluZyIsInN1YnZhbHVlIiwiaW5kZXgiLCJsZW5ndGgiLCJub3ciLCJvcHRpb25zIiwiZ2ZtIiwiY2hhckF0IiwiY29sdW1uIiwib2Zmc2V0IiwidHlwZSIsImNoaWxkcmVuIiwidG9rZW5pemVJbmxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/delete.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/emphasis.js":
/*!************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/emphasis.js ***!
  \************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar trim = __webpack_require__(/*! trim */ \"(rsc)/./node_modules/trim/index.js\");\nvar word = __webpack_require__(/*! is-word-character */ \"(rsc)/./node_modules/is-word-character/index.js\");\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nvar locate = __webpack_require__(/*! ../locate/emphasis */ \"(rsc)/./node_modules/remark-parse/lib/locate/emphasis.js\");\nmodule.exports = emphasis;\nemphasis.locator = locate;\nvar asterisk = \"*\";\nvar underscore = \"_\";\nvar backslash = \"\\\\\";\nfunction emphasis(eat, value, silent) {\n    var self = this;\n    var index = 0;\n    var character = value.charAt(index);\n    var now;\n    var pedantic;\n    var marker;\n    var queue;\n    var subvalue;\n    var length;\n    var prev;\n    if (character !== asterisk && character !== underscore) {\n        return;\n    }\n    pedantic = self.options.pedantic;\n    subvalue = character;\n    marker = character;\n    length = value.length;\n    index++;\n    queue = \"\";\n    character = \"\";\n    if (pedantic && whitespace(value.charAt(index))) {\n        return;\n    }\n    while(index < length){\n        prev = character;\n        character = value.charAt(index);\n        if (character === marker && (!pedantic || !whitespace(prev))) {\n            character = value.charAt(++index);\n            if (character !== marker) {\n                if (!trim(queue) || prev === marker) {\n                    return;\n                }\n                if (!pedantic && marker === underscore && word(character)) {\n                    queue += marker;\n                    continue;\n                }\n                /* istanbul ignore if - never used (yet) */ if (silent) {\n                    return true;\n                }\n                now = eat.now();\n                now.column++;\n                now.offset++;\n                return eat(subvalue + queue + marker)({\n                    type: \"emphasis\",\n                    children: self.tokenizeInline(queue, now)\n                });\n            }\n            queue += marker;\n        }\n        if (!pedantic && character === backslash) {\n            queue += character;\n            character = value.charAt(++index);\n        }\n        queue += character;\n        index++;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9lbXBoYXNpcy5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLE9BQU9ELG1CQUFPQSxDQUFDO0FBQ25CLElBQUlFLGFBQWFGLG1CQUFPQSxDQUFDO0FBQ3pCLElBQUlHLFNBQVNILG1CQUFPQSxDQUFDO0FBRXJCSSxPQUFPQyxPQUFPLEdBQUdDO0FBQ2pCQSxTQUFTQyxPQUFPLEdBQUdKO0FBRW5CLElBQUlLLFdBQVc7QUFDZixJQUFJQyxhQUFhO0FBQ2pCLElBQUlDLFlBQVk7QUFFaEIsU0FBU0osU0FBU0ssR0FBRyxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDbEMsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSUMsUUFBUTtJQUNaLElBQUlDLFlBQVlKLE1BQU1LLE1BQU0sQ0FBQ0Y7SUFDN0IsSUFBSUc7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFFSixJQUFJUixjQUFjUixZQUFZUSxjQUFjUCxZQUFZO1FBQ3REO0lBQ0Y7SUFFQVUsV0FBV0wsS0FBS1csT0FBTyxDQUFDTixRQUFRO0lBQ2hDRyxXQUFXTjtJQUNYSSxTQUFTSjtJQUNUTyxTQUFTWCxNQUFNVyxNQUFNO0lBQ3JCUjtJQUNBTSxRQUFRO0lBQ1JMLFlBQVk7SUFFWixJQUFJRyxZQUFZakIsV0FBV1UsTUFBTUssTUFBTSxDQUFDRixTQUFTO1FBQy9DO0lBQ0Y7SUFFQSxNQUFPQSxRQUFRUSxPQUFRO1FBQ3JCQyxPQUFPUjtRQUNQQSxZQUFZSixNQUFNSyxNQUFNLENBQUNGO1FBRXpCLElBQUlDLGNBQWNJLFVBQVcsRUFBQ0QsWUFBWSxDQUFDakIsV0FBV3NCLEtBQUksR0FBSTtZQUM1RFIsWUFBWUosTUFBTUssTUFBTSxDQUFDLEVBQUVGO1lBRTNCLElBQUlDLGNBQWNJLFFBQVE7Z0JBQ3hCLElBQUksQ0FBQ3JCLEtBQUtzQixVQUFVRyxTQUFTSixRQUFRO29CQUNuQztnQkFDRjtnQkFFQSxJQUFJLENBQUNELFlBQVlDLFdBQVdYLGNBQWNSLEtBQUtlLFlBQVk7b0JBQ3pESyxTQUFTRDtvQkFDVDtnQkFDRjtnQkFFQSx5Q0FBeUMsR0FDekMsSUFBSVAsUUFBUTtvQkFDVixPQUFPO2dCQUNUO2dCQUVBSyxNQUFNUCxJQUFJTyxHQUFHO2dCQUNiQSxJQUFJUSxNQUFNO2dCQUNWUixJQUFJUyxNQUFNO2dCQUVWLE9BQU9oQixJQUFJVyxXQUFXRCxRQUFRRCxRQUFRO29CQUNwQ1EsTUFBTTtvQkFDTkMsVUFBVWYsS0FBS2dCLGNBQWMsQ0FBQ1QsT0FBT0g7Z0JBQ3ZDO1lBQ0Y7WUFFQUcsU0FBU0Q7UUFDWDtRQUVBLElBQUksQ0FBQ0QsWUFBWUgsY0FBY04sV0FBVztZQUN4Q1csU0FBU0w7WUFDVEEsWUFBWUosTUFBTUssTUFBTSxDQUFDLEVBQUVGO1FBQzdCO1FBRUFNLFNBQVNMO1FBQ1REO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvZW1waGFzaXMuanM/NmI3NyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJylcbnZhciB3b3JkID0gcmVxdWlyZSgnaXMtd29yZC1jaGFyYWN0ZXInKVxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpXG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2VtcGhhc2lzJylcblxubW9kdWxlLmV4cG9ydHMgPSBlbXBoYXNpc1xuZW1waGFzaXMubG9jYXRvciA9IGxvY2F0ZVxuXG52YXIgYXN0ZXJpc2sgPSAnKidcbnZhciB1bmRlcnNjb3JlID0gJ18nXG52YXIgYmFja3NsYXNoID0gJ1xcXFwnXG5cbmZ1bmN0aW9uIGVtcGhhc2lzKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuICB2YXIgbm93XG4gIHZhciBwZWRhbnRpY1xuICB2YXIgbWFya2VyXG4gIHZhciBxdWV1ZVxuICB2YXIgc3VidmFsdWVcbiAgdmFyIGxlbmd0aFxuICB2YXIgcHJldlxuXG4gIGlmIChjaGFyYWN0ZXIgIT09IGFzdGVyaXNrICYmIGNoYXJhY3RlciAhPT0gdW5kZXJzY29yZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWNcbiAgc3VidmFsdWUgPSBjaGFyYWN0ZXJcbiAgbWFya2VyID0gY2hhcmFjdGVyXG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aFxuICBpbmRleCsrXG4gIHF1ZXVlID0gJydcbiAgY2hhcmFjdGVyID0gJydcblxuICBpZiAocGVkYW50aWMgJiYgd2hpdGVzcGFjZSh2YWx1ZS5jaGFyQXQoaW5kZXgpKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgcHJldiA9IGNoYXJhY3RlclxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleClcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IG1hcmtlciAmJiAoIXBlZGFudGljIHx8ICF3aGl0ZXNwYWNlKHByZXYpKSkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpXG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IG1hcmtlcikge1xuICAgICAgICBpZiAoIXRyaW0ocXVldWUpIHx8IHByZXYgPT09IG1hcmtlcikge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFwZWRhbnRpYyAmJiBtYXJrZXIgPT09IHVuZGVyc2NvcmUgJiYgd29yZChjaGFyYWN0ZXIpKSB7XG4gICAgICAgICAgcXVldWUgKz0gbWFya2VyXG4gICAgICAgICAgY29udGludWVcbiAgICAgICAgfVxuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cblxuICAgICAgICBub3cgPSBlYXQubm93KClcbiAgICAgICAgbm93LmNvbHVtbisrXG4gICAgICAgIG5vdy5vZmZzZXQrK1xuXG4gICAgICAgIHJldHVybiBlYXQoc3VidmFsdWUgKyBxdWV1ZSArIG1hcmtlcikoe1xuICAgICAgICAgIHR5cGU6ICdlbXBoYXNpcycsXG4gICAgICAgICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUocXVldWUsIG5vdylcbiAgICAgICAgfSlcbiAgICAgIH1cblxuICAgICAgcXVldWUgKz0gbWFya2VyXG4gICAgfVxuXG4gICAgaWYgKCFwZWRhbnRpYyAmJiBjaGFyYWN0ZXIgPT09IGJhY2tzbGFzaCkge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyXG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleClcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXJcbiAgICBpbmRleCsrXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJ0cmltIiwicmVxdWlyZSIsIndvcmQiLCJ3aGl0ZXNwYWNlIiwibG9jYXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsImVtcGhhc2lzIiwibG9jYXRvciIsImFzdGVyaXNrIiwidW5kZXJzY29yZSIsImJhY2tzbGFzaCIsImVhdCIsInZhbHVlIiwic2lsZW50Iiwic2VsZiIsImluZGV4IiwiY2hhcmFjdGVyIiwiY2hhckF0Iiwibm93IiwicGVkYW50aWMiLCJtYXJrZXIiLCJxdWV1ZSIsInN1YnZhbHVlIiwibGVuZ3RoIiwicHJldiIsIm9wdGlvbnMiLCJjb2x1bW4iLCJvZmZzZXQiLCJ0eXBlIiwiY2hpbGRyZW4iLCJ0b2tlbml6ZUlubGluZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/emphasis.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/escape.js":
/*!**********************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/escape.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar locate = __webpack_require__(/*! ../locate/escape */ \"(rsc)/./node_modules/remark-parse/lib/locate/escape.js\");\nmodule.exports = escape;\nescape.locator = locate;\nvar lineFeed = \"\\n\";\nvar backslash = \"\\\\\";\nfunction escape(eat, value, silent) {\n    var self = this;\n    var character;\n    var node;\n    if (value.charAt(0) === backslash) {\n        character = value.charAt(1);\n        if (self.escape.indexOf(character) !== -1) {\n            /* istanbul ignore if - never used (yet) */ if (silent) {\n                return true;\n            }\n            if (character === lineFeed) {\n                node = {\n                    type: \"break\"\n                };\n            } else {\n                node = {\n                    type: \"text\",\n                    value: character\n                };\n            }\n            return eat(backslash + character)(node);\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9lc2NhcGUuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUVyQkMsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsT0FBT0MsT0FBTyxHQUFHTDtBQUVqQixJQUFJTSxXQUFXO0FBQ2YsSUFBSUMsWUFBWTtBQUVoQixTQUFTSCxPQUFPSSxHQUFHLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtJQUNoQyxJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJQztJQUNKLElBQUlDO0lBRUosSUFBSUosTUFBTUssTUFBTSxDQUFDLE9BQU9QLFdBQVc7UUFDakNLLFlBQVlILE1BQU1LLE1BQU0sQ0FBQztRQUV6QixJQUFJSCxLQUFLUCxNQUFNLENBQUNXLE9BQU8sQ0FBQ0gsZUFBZSxDQUFDLEdBQUc7WUFDekMseUNBQXlDLEdBQ3pDLElBQUlGLFFBQVE7Z0JBQ1YsT0FBTztZQUNUO1lBRUEsSUFBSUUsY0FBY04sVUFBVTtnQkFDMUJPLE9BQU87b0JBQUNHLE1BQU07Z0JBQU87WUFDdkIsT0FBTztnQkFDTEgsT0FBTztvQkFBQ0csTUFBTTtvQkFBUVAsT0FBT0c7Z0JBQVM7WUFDeEM7WUFFQSxPQUFPSixJQUFJRCxZQUFZSyxXQUFXQztRQUNwQztJQUNGO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2VzY2FwZS5qcz8yODY4Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL2VzY2FwZScpXG5cbm1vZHVsZS5leHBvcnRzID0gZXNjYXBlXG5lc2NhcGUubG9jYXRvciA9IGxvY2F0ZVxuXG52YXIgbGluZUZlZWQgPSAnXFxuJ1xudmFyIGJhY2tzbGFzaCA9ICdcXFxcJ1xuXG5mdW5jdGlvbiBlc2NhcGUoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgY2hhcmFjdGVyXG4gIHZhciBub2RlXG5cbiAgaWYgKHZhbHVlLmNoYXJBdCgwKSA9PT0gYmFja3NsYXNoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KDEpXG5cbiAgICBpZiAoc2VsZi5lc2NhcGUuaW5kZXhPZihjaGFyYWN0ZXIpICE9PSAtMSkge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICAgICAgaWYgKHNpbGVudCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuXG4gICAgICBpZiAoY2hhcmFjdGVyID09PSBsaW5lRmVlZCkge1xuICAgICAgICBub2RlID0ge3R5cGU6ICdicmVhayd9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBub2RlID0ge3R5cGU6ICd0ZXh0JywgdmFsdWU6IGNoYXJhY3Rlcn1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdChiYWNrc2xhc2ggKyBjaGFyYWN0ZXIpKG5vZGUpXG4gICAgfVxuICB9XG59XG4iXSwibmFtZXMiOlsibG9jYXRlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJlc2NhcGUiLCJsb2NhdG9yIiwibGluZUZlZWQiLCJiYWNrc2xhc2giLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsInNlbGYiLCJjaGFyYWN0ZXIiLCJub2RlIiwiY2hhckF0IiwiaW5kZXhPZiIsInR5cGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/escape.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/footnote-definition.js":
/*!***********************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/footnote-definition.js ***!
  \***********************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nvar normalize = __webpack_require__(/*! ../util/normalize */ \"(rsc)/./node_modules/remark-parse/lib/util/normalize.js\");\nmodule.exports = footnoteDefinition;\nfootnoteDefinition.notInList = true;\nfootnoteDefinition.notInBlock = true;\nvar backslash = \"\\\\\";\nvar lineFeed = \"\\n\";\nvar tab = \"\t\";\nvar space = \" \";\nvar leftSquareBracket = \"[\";\nvar rightSquareBracket = \"]\";\nvar caret = \"^\";\nvar colon = \":\";\nvar EXPRESSION_INITIAL_TAB = /^( {4}|\\t)?/gm;\nfunction footnoteDefinition(eat, value, silent) {\n    var self = this;\n    var offsets = self.offset;\n    var index;\n    var length;\n    var subvalue;\n    var now;\n    var currentLine;\n    var content;\n    var queue;\n    var subqueue;\n    var character;\n    var identifier;\n    var add;\n    var exit;\n    if (!self.options.footnotes) {\n        return;\n    }\n    index = 0;\n    length = value.length;\n    subvalue = \"\";\n    now = eat.now();\n    currentLine = now.line;\n    while(index < length){\n        character = value.charAt(index);\n        if (!whitespace(character)) {\n            break;\n        }\n        subvalue += character;\n        index++;\n    }\n    if (value.charAt(index) !== leftSquareBracket || value.charAt(index + 1) !== caret) {\n        return;\n    }\n    subvalue += leftSquareBracket + caret;\n    index = subvalue.length;\n    queue = \"\";\n    while(index < length){\n        character = value.charAt(index);\n        if (character === rightSquareBracket) {\n            break;\n        } else if (character === backslash) {\n            queue += character;\n            index++;\n            character = value.charAt(index);\n        }\n        queue += character;\n        index++;\n    }\n    if (!queue || value.charAt(index) !== rightSquareBracket || value.charAt(index + 1) !== colon) {\n        return;\n    }\n    if (silent) {\n        return true;\n    }\n    identifier = queue;\n    subvalue += queue + rightSquareBracket + colon;\n    index = subvalue.length;\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== tab && character !== space) {\n            break;\n        }\n        subvalue += character;\n        index++;\n    }\n    now.column += subvalue.length;\n    now.offset += subvalue.length;\n    queue = \"\";\n    content = \"\";\n    subqueue = \"\";\n    while(index < length){\n        character = value.charAt(index);\n        if (character === lineFeed) {\n            subqueue = character;\n            index++;\n            while(index < length){\n                character = value.charAt(index);\n                if (character !== lineFeed) {\n                    break;\n                }\n                subqueue += character;\n                index++;\n            }\n            queue += subqueue;\n            subqueue = \"\";\n            while(index < length){\n                character = value.charAt(index);\n                if (character !== space) {\n                    break;\n                }\n                subqueue += character;\n                index++;\n            }\n            if (subqueue.length === 0) {\n                break;\n            }\n            queue += subqueue;\n        }\n        if (queue) {\n            content += queue;\n            queue = \"\";\n        }\n        content += character;\n        index++;\n    }\n    subvalue += content;\n    content = content.replace(EXPRESSION_INITIAL_TAB, function(line) {\n        offsets[currentLine] = (offsets[currentLine] || 0) + line.length;\n        currentLine++;\n        return \"\";\n    });\n    add = eat(subvalue);\n    exit = self.enterBlock();\n    content = self.tokenizeBlock(content, now);\n    exit();\n    return add({\n        type: \"footnoteDefinition\",\n        identifier: normalize(identifier),\n        label: identifier,\n        children: content\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/footnote-definition.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/heading-atx.js":
/*!***************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/heading-atx.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = atxHeading;\nvar lineFeed = \"\\n\";\nvar tab = \"\t\";\nvar space = \" \";\nvar numberSign = \"#\";\nvar maxFenceCount = 6;\nfunction atxHeading(eat, value, silent) {\n    var self = this;\n    var pedantic = self.options.pedantic;\n    var length = value.length + 1;\n    var index = -1;\n    var now = eat.now();\n    var subvalue = \"\";\n    var content = \"\";\n    var character;\n    var queue;\n    var depth;\n    // Eat initial spacing.\n    while(++index < length){\n        character = value.charAt(index);\n        if (character !== space && character !== tab) {\n            index--;\n            break;\n        }\n        subvalue += character;\n    }\n    // Eat hashes.\n    depth = 0;\n    while(++index <= length){\n        character = value.charAt(index);\n        if (character !== numberSign) {\n            index--;\n            break;\n        }\n        subvalue += character;\n        depth++;\n    }\n    if (depth > maxFenceCount) {\n        return;\n    }\n    if (!depth || !pedantic && value.charAt(index + 1) === numberSign) {\n        return;\n    }\n    length = value.length + 1;\n    // Eat intermediate white-space.\n    queue = \"\";\n    while(++index < length){\n        character = value.charAt(index);\n        if (character !== space && character !== tab) {\n            index--;\n            break;\n        }\n        queue += character;\n    }\n    // Exit when not in pedantic mode without spacing.\n    if (!pedantic && queue.length === 0 && character && character !== lineFeed) {\n        return;\n    }\n    if (silent) {\n        return true;\n    }\n    // Eat content.\n    subvalue += queue;\n    queue = \"\";\n    content = \"\";\n    while(++index < length){\n        character = value.charAt(index);\n        if (!character || character === lineFeed) {\n            break;\n        }\n        if (character !== space && character !== tab && character !== numberSign) {\n            content += queue + character;\n            queue = \"\";\n            continue;\n        }\n        while(character === space || character === tab){\n            queue += character;\n            character = value.charAt(++index);\n        }\n        // `#` without a queue is part of the content.\n        if (!pedantic && content && !queue && character === numberSign) {\n            content += character;\n            continue;\n        }\n        while(character === numberSign){\n            queue += character;\n            character = value.charAt(++index);\n        }\n        while(character === space || character === tab){\n            queue += character;\n            character = value.charAt(++index);\n        }\n        index--;\n    }\n    now.column += subvalue.length;\n    now.offset += subvalue.length;\n    subvalue += content + queue;\n    return eat(subvalue)({\n        type: \"heading\",\n        depth: depth,\n        children: self.tokenizeInline(content, now)\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9oZWFkaW5nLWF0eC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFdBQVc7QUFDZixJQUFJQyxNQUFNO0FBQ1YsSUFBSUMsUUFBUTtBQUNaLElBQUlDLGFBQWE7QUFFakIsSUFBSUMsZ0JBQWdCO0FBRXBCLFNBQVNMLFdBQVdNLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQ3BDLElBQUlDLE9BQU8sSUFBSTtJQUNmLElBQUlDLFdBQVdELEtBQUtFLE9BQU8sQ0FBQ0QsUUFBUTtJQUNwQyxJQUFJRSxTQUFTTCxNQUFNSyxNQUFNLEdBQUc7SUFDNUIsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsSUFBSUMsTUFBTVIsSUFBSVEsR0FBRztJQUNqQixJQUFJQyxXQUFXO0lBQ2YsSUFBSUMsVUFBVTtJQUNkLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUVKLHVCQUF1QjtJQUN2QixNQUFPLEVBQUVOLFFBQVFELE9BQVE7UUFDdkJLLFlBQVlWLE1BQU1hLE1BQU0sQ0FBQ1A7UUFFekIsSUFBSUksY0FBY2QsU0FBU2MsY0FBY2YsS0FBSztZQUM1Q1c7WUFDQTtRQUNGO1FBRUFFLFlBQVlFO0lBQ2Q7SUFFQSxjQUFjO0lBQ2RFLFFBQVE7SUFFUixNQUFPLEVBQUVOLFNBQVNELE9BQVE7UUFDeEJLLFlBQVlWLE1BQU1hLE1BQU0sQ0FBQ1A7UUFFekIsSUFBSUksY0FBY2IsWUFBWTtZQUM1QlM7WUFDQTtRQUNGO1FBRUFFLFlBQVlFO1FBQ1pFO0lBQ0Y7SUFFQSxJQUFJQSxRQUFRZCxlQUFlO1FBQ3pCO0lBQ0Y7SUFFQSxJQUFJLENBQUNjLFNBQVUsQ0FBQ1QsWUFBWUgsTUFBTWEsTUFBTSxDQUFDUCxRQUFRLE9BQU9ULFlBQWE7UUFDbkU7SUFDRjtJQUVBUSxTQUFTTCxNQUFNSyxNQUFNLEdBQUc7SUFFeEIsZ0NBQWdDO0lBQ2hDTSxRQUFRO0lBRVIsTUFBTyxFQUFFTCxRQUFRRCxPQUFRO1FBQ3ZCSyxZQUFZVixNQUFNYSxNQUFNLENBQUNQO1FBRXpCLElBQUlJLGNBQWNkLFNBQVNjLGNBQWNmLEtBQUs7WUFDNUNXO1lBQ0E7UUFDRjtRQUVBSyxTQUFTRDtJQUNYO0lBRUEsa0RBQWtEO0lBQ2xELElBQUksQ0FBQ1AsWUFBWVEsTUFBTU4sTUFBTSxLQUFLLEtBQUtLLGFBQWFBLGNBQWNoQixVQUFVO1FBQzFFO0lBQ0Y7SUFFQSxJQUFJTyxRQUFRO1FBQ1YsT0FBTztJQUNUO0lBRUEsZUFBZTtJQUNmTyxZQUFZRztJQUNaQSxRQUFRO0lBQ1JGLFVBQVU7SUFFVixNQUFPLEVBQUVILFFBQVFELE9BQVE7UUFDdkJLLFlBQVlWLE1BQU1hLE1BQU0sQ0FBQ1A7UUFFekIsSUFBSSxDQUFDSSxhQUFhQSxjQUFjaEIsVUFBVTtZQUN4QztRQUNGO1FBRUEsSUFBSWdCLGNBQWNkLFNBQVNjLGNBQWNmLE9BQU9lLGNBQWNiLFlBQVk7WUFDeEVZLFdBQVdFLFFBQVFEO1lBQ25CQyxRQUFRO1lBQ1I7UUFDRjtRQUVBLE1BQU9ELGNBQWNkLFNBQVNjLGNBQWNmLElBQUs7WUFDL0NnQixTQUFTRDtZQUNUQSxZQUFZVixNQUFNYSxNQUFNLENBQUMsRUFBRVA7UUFDN0I7UUFFQSw4Q0FBOEM7UUFDOUMsSUFBSSxDQUFDSCxZQUFZTSxXQUFXLENBQUNFLFNBQVNELGNBQWNiLFlBQVk7WUFDOURZLFdBQVdDO1lBQ1g7UUFDRjtRQUVBLE1BQU9BLGNBQWNiLFdBQVk7WUFDL0JjLFNBQVNEO1lBQ1RBLFlBQVlWLE1BQU1hLE1BQU0sQ0FBQyxFQUFFUDtRQUM3QjtRQUVBLE1BQU9JLGNBQWNkLFNBQVNjLGNBQWNmLElBQUs7WUFDL0NnQixTQUFTRDtZQUNUQSxZQUFZVixNQUFNYSxNQUFNLENBQUMsRUFBRVA7UUFDN0I7UUFFQUE7SUFDRjtJQUVBQyxJQUFJTyxNQUFNLElBQUlOLFNBQVNILE1BQU07SUFDN0JFLElBQUlRLE1BQU0sSUFBSVAsU0FBU0gsTUFBTTtJQUM3QkcsWUFBWUMsVUFBVUU7SUFFdEIsT0FBT1osSUFBSVMsVUFBVTtRQUNuQlEsTUFBTTtRQUNOSixPQUFPQTtRQUNQSyxVQUFVZixLQUFLZ0IsY0FBYyxDQUFDVCxTQUFTRjtJQUN6QztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9oZWFkaW5nLWF0eC5qcz8wYzBhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGF0eEhlYWRpbmdcblxudmFyIGxpbmVGZWVkID0gJ1xcbidcbnZhciB0YWIgPSAnXFx0J1xudmFyIHNwYWNlID0gJyAnXG52YXIgbnVtYmVyU2lnbiA9ICcjJ1xuXG52YXIgbWF4RmVuY2VDb3VudCA9IDZcblxuZnVuY3Rpb24gYXR4SGVhZGluZyhlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBwZWRhbnRpYyA9IHNlbGYub3B0aW9ucy5wZWRhbnRpY1xuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMVxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgbm93ID0gZWF0Lm5vdygpXG4gIHZhciBzdWJ2YWx1ZSA9ICcnXG4gIHZhciBjb250ZW50ID0gJydcbiAgdmFyIGNoYXJhY3RlclxuICB2YXIgcXVldWVcbiAgdmFyIGRlcHRoXG5cbiAgLy8gRWF0IGluaXRpYWwgc3BhY2luZy5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBzcGFjZSAmJiBjaGFyYWN0ZXIgIT09IHRhYikge1xuICAgICAgaW5kZXgtLVxuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXJcbiAgfVxuXG4gIC8vIEVhdCBoYXNoZXMuXG4gIGRlcHRoID0gMFxuXG4gIHdoaWxlICgrK2luZGV4IDw9IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleClcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IG51bWJlclNpZ24pIHtcbiAgICAgIGluZGV4LS1cbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyXG4gICAgZGVwdGgrK1xuICB9XG5cbiAgaWYgKGRlcHRoID4gbWF4RmVuY2VDb3VudCkge1xuICAgIHJldHVyblxuICB9XG5cbiAgaWYgKCFkZXB0aCB8fCAoIXBlZGFudGljICYmIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBudW1iZXJTaWduKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMVxuXG4gIC8vIEVhdCBpbnRlcm1lZGlhdGUgd2hpdGUtc3BhY2UuXG4gIHF1ZXVlID0gJydcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleClcblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IHNwYWNlICYmIGNoYXJhY3RlciAhPT0gdGFiKSB7XG4gICAgICBpbmRleC0tXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlclxuICB9XG5cbiAgLy8gRXhpdCB3aGVuIG5vdCBpbiBwZWRhbnRpYyBtb2RlIHdpdGhvdXQgc3BhY2luZy5cbiAgaWYgKCFwZWRhbnRpYyAmJiBxdWV1ZS5sZW5ndGggPT09IDAgJiYgY2hhcmFjdGVyICYmIGNoYXJhY3RlciAhPT0gbGluZUZlZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgLy8gRWF0IGNvbnRlbnQuXG4gIHN1YnZhbHVlICs9IHF1ZXVlXG4gIHF1ZXVlID0gJydcbiAgY29udGVudCA9ICcnXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICBpZiAoIWNoYXJhY3RlciB8fCBjaGFyYWN0ZXIgPT09IGxpbmVGZWVkKSB7XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgIT09IHNwYWNlICYmIGNoYXJhY3RlciAhPT0gdGFiICYmIGNoYXJhY3RlciAhPT0gbnVtYmVyU2lnbikge1xuICAgICAgY29udGVudCArPSBxdWV1ZSArIGNoYXJhY3RlclxuICAgICAgcXVldWUgPSAnJ1xuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB3aGlsZSAoY2hhcmFjdGVyID09PSBzcGFjZSB8fCBjaGFyYWN0ZXIgPT09IHRhYikge1xuICAgICAgcXVldWUgKz0gY2hhcmFjdGVyXG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleClcbiAgICB9XG5cbiAgICAvLyBgI2Agd2l0aG91dCBhIHF1ZXVlIGlzIHBhcnQgb2YgdGhlIGNvbnRlbnQuXG4gICAgaWYgKCFwZWRhbnRpYyAmJiBjb250ZW50ICYmICFxdWV1ZSAmJiBjaGFyYWN0ZXIgPT09IG51bWJlclNpZ24pIHtcbiAgICAgIGNvbnRlbnQgKz0gY2hhcmFjdGVyXG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIHdoaWxlIChjaGFyYWN0ZXIgPT09IG51bWJlclNpZ24pIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlclxuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpXG4gICAgfVxuXG4gICAgd2hpbGUgKGNoYXJhY3RlciA9PT0gc3BhY2UgfHwgY2hhcmFjdGVyID09PSB0YWIpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlclxuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpXG4gICAgfVxuXG4gICAgaW5kZXgtLVxuICB9XG5cbiAgbm93LmNvbHVtbiArPSBzdWJ2YWx1ZS5sZW5ndGhcbiAgbm93Lm9mZnNldCArPSBzdWJ2YWx1ZS5sZW5ndGhcbiAgc3VidmFsdWUgKz0gY29udGVudCArIHF1ZXVlXG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe1xuICAgIHR5cGU6ICdoZWFkaW5nJyxcbiAgICBkZXB0aDogZGVwdGgsXG4gICAgY2hpbGRyZW46IHNlbGYudG9rZW5pemVJbmxpbmUoY29udGVudCwgbm93KVxuICB9KVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhdHhIZWFkaW5nIiwibGluZUZlZWQiLCJ0YWIiLCJzcGFjZSIsIm51bWJlclNpZ24iLCJtYXhGZW5jZUNvdW50IiwiZWF0IiwidmFsdWUiLCJzaWxlbnQiLCJzZWxmIiwicGVkYW50aWMiLCJvcHRpb25zIiwibGVuZ3RoIiwiaW5kZXgiLCJub3ciLCJzdWJ2YWx1ZSIsImNvbnRlbnQiLCJjaGFyYWN0ZXIiLCJxdWV1ZSIsImRlcHRoIiwiY2hhckF0IiwiY29sdW1uIiwib2Zmc2V0IiwidHlwZSIsImNoaWxkcmVuIiwidG9rZW5pemVJbmxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/heading-atx.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/heading-setext.js":
/*!******************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/heading-setext.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = setextHeading;\nvar lineFeed = \"\\n\";\nvar tab = \"\t\";\nvar space = \" \";\nvar equalsTo = \"=\";\nvar dash = \"-\";\nvar maxIndent = 3;\nvar equalsToDepth = 1;\nvar dashDepth = 2;\nfunction setextHeading(eat, value, silent) {\n    var self = this;\n    var now = eat.now();\n    var length = value.length;\n    var index = -1;\n    var subvalue = \"\";\n    var content;\n    var queue;\n    var character;\n    var marker;\n    var depth;\n    // Eat initial indentation.\n    while(++index < length){\n        character = value.charAt(index);\n        if (character !== space || index >= maxIndent) {\n            index--;\n            break;\n        }\n        subvalue += character;\n    }\n    // Eat content.\n    content = \"\";\n    queue = \"\";\n    while(++index < length){\n        character = value.charAt(index);\n        if (character === lineFeed) {\n            index--;\n            break;\n        }\n        if (character === space || character === tab) {\n            queue += character;\n        } else {\n            content += queue + character;\n            queue = \"\";\n        }\n    }\n    now.column += subvalue.length;\n    now.offset += subvalue.length;\n    subvalue += content + queue;\n    // Ensure the content is followed by a newline and a valid marker.\n    character = value.charAt(++index);\n    marker = value.charAt(++index);\n    if (character !== lineFeed || marker !== equalsTo && marker !== dash) {\n        return;\n    }\n    subvalue += character;\n    // Eat Setext-line.\n    queue = marker;\n    depth = marker === equalsTo ? equalsToDepth : dashDepth;\n    while(++index < length){\n        character = value.charAt(index);\n        if (character !== marker) {\n            if (character !== lineFeed) {\n                return;\n            }\n            index--;\n            break;\n        }\n        queue += character;\n    }\n    if (silent) {\n        return true;\n    }\n    return eat(subvalue + queue)({\n        type: \"heading\",\n        depth: depth,\n        children: self.tokenizeInline(content, now)\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9oZWFkaW5nLXNldGV4dC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFdBQVc7QUFDZixJQUFJQyxNQUFNO0FBQ1YsSUFBSUMsUUFBUTtBQUNaLElBQUlDLFdBQVc7QUFDZixJQUFJQyxPQUFPO0FBRVgsSUFBSUMsWUFBWTtBQUVoQixJQUFJQyxnQkFBZ0I7QUFDcEIsSUFBSUMsWUFBWTtBQUVoQixTQUFTUixjQUFjUyxHQUFHLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtJQUN2QyxJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJQyxNQUFNSixJQUFJSSxHQUFHO0lBQ2pCLElBQUlDLFNBQVNKLE1BQU1JLE1BQU07SUFDekIsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsSUFBSUMsV0FBVztJQUNmLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFFSiwyQkFBMkI7SUFDM0IsTUFBTyxFQUFFTixRQUFRRCxPQUFRO1FBQ3ZCSyxZQUFZVCxNQUFNWSxNQUFNLENBQUNQO1FBRXpCLElBQUlJLGNBQWNoQixTQUFTWSxTQUFTVCxXQUFXO1lBQzdDUztZQUNBO1FBQ0Y7UUFFQUMsWUFBWUc7SUFDZDtJQUVBLGVBQWU7SUFDZkYsVUFBVTtJQUNWQyxRQUFRO0lBRVIsTUFBTyxFQUFFSCxRQUFRRCxPQUFRO1FBQ3ZCSyxZQUFZVCxNQUFNWSxNQUFNLENBQUNQO1FBRXpCLElBQUlJLGNBQWNsQixVQUFVO1lBQzFCYztZQUNBO1FBQ0Y7UUFFQSxJQUFJSSxjQUFjaEIsU0FBU2dCLGNBQWNqQixLQUFLO1lBQzVDZ0IsU0FBU0M7UUFDWCxPQUFPO1lBQ0xGLFdBQVdDLFFBQVFDO1lBQ25CRCxRQUFRO1FBQ1Y7SUFDRjtJQUVBTCxJQUFJVSxNQUFNLElBQUlQLFNBQVNGLE1BQU07SUFDN0JELElBQUlXLE1BQU0sSUFBSVIsU0FBU0YsTUFBTTtJQUM3QkUsWUFBWUMsVUFBVUM7SUFFdEIsa0VBQWtFO0lBQ2xFQyxZQUFZVCxNQUFNWSxNQUFNLENBQUMsRUFBRVA7SUFDM0JLLFNBQVNWLE1BQU1ZLE1BQU0sQ0FBQyxFQUFFUDtJQUV4QixJQUFJSSxjQUFjbEIsWUFBYW1CLFdBQVdoQixZQUFZZ0IsV0FBV2YsTUFBTztRQUN0RTtJQUNGO0lBRUFXLFlBQVlHO0lBRVosbUJBQW1CO0lBQ25CRCxRQUFRRTtJQUNSQyxRQUFRRCxXQUFXaEIsV0FBV0csZ0JBQWdCQztJQUU5QyxNQUFPLEVBQUVPLFFBQVFELE9BQVE7UUFDdkJLLFlBQVlULE1BQU1ZLE1BQU0sQ0FBQ1A7UUFFekIsSUFBSUksY0FBY0MsUUFBUTtZQUN4QixJQUFJRCxjQUFjbEIsVUFBVTtnQkFDMUI7WUFDRjtZQUVBYztZQUNBO1FBQ0Y7UUFFQUcsU0FBU0M7SUFDWDtJQUVBLElBQUlSLFFBQVE7UUFDVixPQUFPO0lBQ1Q7SUFFQSxPQUFPRixJQUFJTyxXQUFXRSxPQUFPO1FBQzNCTyxNQUFNO1FBQ05KLE9BQU9BO1FBQ1BLLFVBQVVkLEtBQUtlLGNBQWMsQ0FBQ1YsU0FBU0o7SUFDekM7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvaGVhZGluZy1zZXRleHQuanM/NWU2YSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSBzZXRleHRIZWFkaW5nXG5cbnZhciBsaW5lRmVlZCA9ICdcXG4nXG52YXIgdGFiID0gJ1xcdCdcbnZhciBzcGFjZSA9ICcgJ1xudmFyIGVxdWFsc1RvID0gJz0nXG52YXIgZGFzaCA9ICctJ1xuXG52YXIgbWF4SW5kZW50ID0gM1xuXG52YXIgZXF1YWxzVG9EZXB0aCA9IDFcbnZhciBkYXNoRGVwdGggPSAyXG5cbmZ1bmN0aW9uIHNldGV4dEhlYWRpbmcoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgbm93ID0gZWF0Lm5vdygpXG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGhcbiAgdmFyIGluZGV4ID0gLTFcbiAgdmFyIHN1YnZhbHVlID0gJydcbiAgdmFyIGNvbnRlbnRcbiAgdmFyIHF1ZXVlXG4gIHZhciBjaGFyYWN0ZXJcbiAgdmFyIG1hcmtlclxuICB2YXIgZGVwdGhcblxuICAvLyBFYXQgaW5pdGlhbCBpbmRlbnRhdGlvbi5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBzcGFjZSB8fCBpbmRleCA+PSBtYXhJbmRlbnQpIHtcbiAgICAgIGluZGV4LS1cbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyXG4gIH1cblxuICAvLyBFYXQgY29udGVudC5cbiAgY29udGVudCA9ICcnXG4gIHF1ZXVlID0gJydcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleClcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IGxpbmVGZWVkKSB7XG4gICAgICBpbmRleC0tXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IHNwYWNlIHx8IGNoYXJhY3RlciA9PT0gdGFiKSB7XG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXJcbiAgICB9IGVsc2Uge1xuICAgICAgY29udGVudCArPSBxdWV1ZSArIGNoYXJhY3RlclxuICAgICAgcXVldWUgPSAnJ1xuICAgIH1cbiAgfVxuXG4gIG5vdy5jb2x1bW4gKz0gc3VidmFsdWUubGVuZ3RoXG4gIG5vdy5vZmZzZXQgKz0gc3VidmFsdWUubGVuZ3RoXG4gIHN1YnZhbHVlICs9IGNvbnRlbnQgKyBxdWV1ZVxuXG4gIC8vIEVuc3VyZSB0aGUgY29udGVudCBpcyBmb2xsb3dlZCBieSBhIG5ld2xpbmUgYW5kIGEgdmFsaWQgbWFya2VyLlxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoKytpbmRleClcbiAgbWFya2VyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpXG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gbGluZUZlZWQgfHwgKG1hcmtlciAhPT0gZXF1YWxzVG8gJiYgbWFya2VyICE9PSBkYXNoKSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgc3VidmFsdWUgKz0gY2hhcmFjdGVyXG5cbiAgLy8gRWF0IFNldGV4dC1saW5lLlxuICBxdWV1ZSA9IG1hcmtlclxuICBkZXB0aCA9IG1hcmtlciA9PT0gZXF1YWxzVG8gPyBlcXVhbHNUb0RlcHRoIDogZGFzaERlcHRoXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgIGlmIChjaGFyYWN0ZXIgIT09IGxpbmVGZWVkKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpbmRleC0tXG4gICAgICBicmVha1xuICAgIH1cblxuICAgIHF1ZXVlICs9IGNoYXJhY3RlclxuICB9XG5cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICByZXR1cm4gZWF0KHN1YnZhbHVlICsgcXVldWUpKHtcbiAgICB0eXBlOiAnaGVhZGluZycsXG4gICAgZGVwdGg6IGRlcHRoLFxuICAgIGNoaWxkcmVuOiBzZWxmLnRva2VuaXplSW5saW5lKGNvbnRlbnQsIG5vdylcbiAgfSlcbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwic2V0ZXh0SGVhZGluZyIsImxpbmVGZWVkIiwidGFiIiwic3BhY2UiLCJlcXVhbHNUbyIsImRhc2giLCJtYXhJbmRlbnQiLCJlcXVhbHNUb0RlcHRoIiwiZGFzaERlcHRoIiwiZWF0IiwidmFsdWUiLCJzaWxlbnQiLCJzZWxmIiwibm93IiwibGVuZ3RoIiwiaW5kZXgiLCJzdWJ2YWx1ZSIsImNvbnRlbnQiLCJxdWV1ZSIsImNoYXJhY3RlciIsIm1hcmtlciIsImRlcHRoIiwiY2hhckF0IiwiY29sdW1uIiwib2Zmc2V0IiwidHlwZSIsImNoaWxkcmVuIiwidG9rZW5pemVJbmxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/heading-setext.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/html-block.js":
/*!**************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/html-block.js ***!
  \**************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar openCloseTag = (__webpack_require__(/*! ../util/html */ \"(rsc)/./node_modules/remark-parse/lib/util/html.js\").openCloseTag);\nmodule.exports = blockHtml;\nvar tab = \"\t\";\nvar space = \" \";\nvar lineFeed = \"\\n\";\nvar lessThan = \"<\";\nvar rawOpenExpression = /^<(script|pre|style)(?=(\\s|>|$))/i;\nvar rawCloseExpression = /<\\/(script|pre|style)>/i;\nvar commentOpenExpression = /^<!--/;\nvar commentCloseExpression = /-->/;\nvar instructionOpenExpression = /^<\\?/;\nvar instructionCloseExpression = /\\?>/;\nvar directiveOpenExpression = /^<![A-Za-z]/;\nvar directiveCloseExpression = />/;\nvar cdataOpenExpression = /^<!\\[CDATA\\[/;\nvar cdataCloseExpression = /\\]\\]>/;\nvar elementCloseExpression = /^$/;\nvar otherElementOpenExpression = new RegExp(openCloseTag.source + \"\\\\s*$\");\nfunction blockHtml(eat, value, silent) {\n    var self = this;\n    var blocks = self.options.blocks.join(\"|\");\n    var elementOpenExpression = new RegExp(\"^</?(\" + blocks + \")(?=(\\\\s|/?>|$))\", \"i\");\n    var length = value.length;\n    var index = 0;\n    var next;\n    var line;\n    var offset;\n    var character;\n    var count;\n    var sequence;\n    var subvalue;\n    var sequences = [\n        [\n            rawOpenExpression,\n            rawCloseExpression,\n            true\n        ],\n        [\n            commentOpenExpression,\n            commentCloseExpression,\n            true\n        ],\n        [\n            instructionOpenExpression,\n            instructionCloseExpression,\n            true\n        ],\n        [\n            directiveOpenExpression,\n            directiveCloseExpression,\n            true\n        ],\n        [\n            cdataOpenExpression,\n            cdataCloseExpression,\n            true\n        ],\n        [\n            elementOpenExpression,\n            elementCloseExpression,\n            true\n        ],\n        [\n            otherElementOpenExpression,\n            elementCloseExpression,\n            false\n        ]\n    ];\n    // Eat initial spacing.\n    while(index < length){\n        character = value.charAt(index);\n        if (character !== tab && character !== space) {\n            break;\n        }\n        index++;\n    }\n    if (value.charAt(index) !== lessThan) {\n        return;\n    }\n    next = value.indexOf(lineFeed, index + 1);\n    next = next === -1 ? length : next;\n    line = value.slice(index, next);\n    offset = -1;\n    count = sequences.length;\n    while(++offset < count){\n        if (sequences[offset][0].test(line)) {\n            sequence = sequences[offset];\n            break;\n        }\n    }\n    if (!sequence) {\n        return;\n    }\n    if (silent) {\n        return sequence[2];\n    }\n    index = next;\n    if (!sequence[1].test(line)) {\n        while(index < length){\n            next = value.indexOf(lineFeed, index + 1);\n            next = next === -1 ? length : next;\n            line = value.slice(index + 1, next);\n            if (sequence[1].test(line)) {\n                if (line) {\n                    index = next;\n                }\n                break;\n            }\n            index = next;\n        }\n    }\n    subvalue = value.slice(0, index);\n    return eat(subvalue)({\n        type: \"html\",\n        value: subvalue\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWJsb2NrLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsZUFBZUMsNEdBQW9DO0FBRXZEQyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLE1BQU07QUFDVixJQUFJQyxRQUFRO0FBQ1osSUFBSUMsV0FBVztBQUNmLElBQUlDLFdBQVc7QUFFZixJQUFJQyxvQkFBb0I7QUFDeEIsSUFBSUMscUJBQXFCO0FBQ3pCLElBQUlDLHdCQUF3QjtBQUM1QixJQUFJQyx5QkFBeUI7QUFDN0IsSUFBSUMsNEJBQTRCO0FBQ2hDLElBQUlDLDZCQUE2QjtBQUNqQyxJQUFJQywwQkFBMEI7QUFDOUIsSUFBSUMsMkJBQTJCO0FBQy9CLElBQUlDLHNCQUFzQjtBQUMxQixJQUFJQyx1QkFBdUI7QUFDM0IsSUFBSUMseUJBQXlCO0FBQzdCLElBQUlDLDZCQUE2QixJQUFJQyxPQUFPckIsYUFBYXNCLE1BQU0sR0FBRztBQUVsRSxTQUFTbEIsVUFBVW1CLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQ25DLElBQUlDLE9BQU8sSUFBSTtJQUNmLElBQUlDLFNBQVNELEtBQUtFLE9BQU8sQ0FBQ0QsTUFBTSxDQUFDRSxJQUFJLENBQUM7SUFDdEMsSUFBSUMsd0JBQXdCLElBQUlULE9BQzlCLFVBQVVNLFNBQVMsb0JBQ25CO0lBRUYsSUFBSUksU0FBU1AsTUFBTU8sTUFBTTtJQUN6QixJQUFJQyxRQUFRO0lBQ1osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFFSixJQUFJQyxZQUFZO1FBQ2Q7WUFBQy9CO1lBQW1CQztZQUFvQjtTQUFLO1FBQzdDO1lBQUNDO1lBQXVCQztZQUF3QjtTQUFLO1FBQ3JEO1lBQUNDO1lBQTJCQztZQUE0QjtTQUFLO1FBQzdEO1lBQUNDO1lBQXlCQztZQUEwQjtTQUFLO1FBQ3pEO1lBQUNDO1lBQXFCQztZQUFzQjtTQUFLO1FBQ2pEO1lBQUNZO1lBQXVCWDtZQUF3QjtTQUFLO1FBQ3JEO1lBQUNDO1lBQTRCRDtZQUF3QjtTQUFNO0tBQzVEO0lBRUQsdUJBQXVCO0lBQ3ZCLE1BQU9hLFFBQVFELE9BQVE7UUFDckJLLFlBQVlaLE1BQU1pQixNQUFNLENBQUNUO1FBRXpCLElBQUlJLGNBQWMvQixPQUFPK0IsY0FBYzlCLE9BQU87WUFDNUM7UUFDRjtRQUVBMEI7SUFDRjtJQUVBLElBQUlSLE1BQU1pQixNQUFNLENBQUNULFdBQVd4QixVQUFVO1FBQ3BDO0lBQ0Y7SUFFQXlCLE9BQU9ULE1BQU1rQixPQUFPLENBQUNuQyxVQUFVeUIsUUFBUTtJQUN2Q0MsT0FBT0EsU0FBUyxDQUFDLElBQUlGLFNBQVNFO0lBQzlCQyxPQUFPVixNQUFNbUIsS0FBSyxDQUFDWCxPQUFPQztJQUMxQkUsU0FBUyxDQUFDO0lBQ1ZFLFFBQVFHLFVBQVVULE1BQU07SUFFeEIsTUFBTyxFQUFFSSxTQUFTRSxNQUFPO1FBQ3ZCLElBQUlHLFNBQVMsQ0FBQ0wsT0FBTyxDQUFDLEVBQUUsQ0FBQ1MsSUFBSSxDQUFDVixPQUFPO1lBQ25DSSxXQUFXRSxTQUFTLENBQUNMLE9BQU87WUFDNUI7UUFDRjtJQUNGO0lBRUEsSUFBSSxDQUFDRyxVQUFVO1FBQ2I7SUFDRjtJQUVBLElBQUliLFFBQVE7UUFDVixPQUFPYSxRQUFRLENBQUMsRUFBRTtJQUNwQjtJQUVBTixRQUFRQztJQUVSLElBQUksQ0FBQ0ssUUFBUSxDQUFDLEVBQUUsQ0FBQ00sSUFBSSxDQUFDVixPQUFPO1FBQzNCLE1BQU9GLFFBQVFELE9BQVE7WUFDckJFLE9BQU9ULE1BQU1rQixPQUFPLENBQUNuQyxVQUFVeUIsUUFBUTtZQUN2Q0MsT0FBT0EsU0FBUyxDQUFDLElBQUlGLFNBQVNFO1lBQzlCQyxPQUFPVixNQUFNbUIsS0FBSyxDQUFDWCxRQUFRLEdBQUdDO1lBRTlCLElBQUlLLFFBQVEsQ0FBQyxFQUFFLENBQUNNLElBQUksQ0FBQ1YsT0FBTztnQkFDMUIsSUFBSUEsTUFBTTtvQkFDUkYsUUFBUUM7Z0JBQ1Y7Z0JBRUE7WUFDRjtZQUVBRCxRQUFRQztRQUNWO0lBQ0Y7SUFFQU0sV0FBV2YsTUFBTW1CLEtBQUssQ0FBQyxHQUFHWDtJQUUxQixPQUFPVCxJQUFJZ0IsVUFBVTtRQUFDTSxNQUFNO1FBQVFyQixPQUFPZTtJQUFRO0FBQ3JEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWJsb2NrLmpzP2QzYjIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciBvcGVuQ2xvc2VUYWcgPSByZXF1aXJlKCcuLi91dGlsL2h0bWwnKS5vcGVuQ2xvc2VUYWdcblxubW9kdWxlLmV4cG9ydHMgPSBibG9ja0h0bWxcblxudmFyIHRhYiA9ICdcXHQnXG52YXIgc3BhY2UgPSAnICdcbnZhciBsaW5lRmVlZCA9ICdcXG4nXG52YXIgbGVzc1RoYW4gPSAnPCdcblxudmFyIHJhd09wZW5FeHByZXNzaW9uID0gL148KHNjcmlwdHxwcmV8c3R5bGUpKD89KFxcc3w+fCQpKS9pXG52YXIgcmF3Q2xvc2VFeHByZXNzaW9uID0gLzxcXC8oc2NyaXB0fHByZXxzdHlsZSk+L2lcbnZhciBjb21tZW50T3BlbkV4cHJlc3Npb24gPSAvXjwhLS0vXG52YXIgY29tbWVudENsb3NlRXhwcmVzc2lvbiA9IC8tLT4vXG52YXIgaW5zdHJ1Y3Rpb25PcGVuRXhwcmVzc2lvbiA9IC9ePFxcPy9cbnZhciBpbnN0cnVjdGlvbkNsb3NlRXhwcmVzc2lvbiA9IC9cXD8+L1xudmFyIGRpcmVjdGl2ZU9wZW5FeHByZXNzaW9uID0gL148IVtBLVphLXpdL1xudmFyIGRpcmVjdGl2ZUNsb3NlRXhwcmVzc2lvbiA9IC8+L1xudmFyIGNkYXRhT3BlbkV4cHJlc3Npb24gPSAvXjwhXFxbQ0RBVEFcXFsvXG52YXIgY2RhdGFDbG9zZUV4cHJlc3Npb24gPSAvXFxdXFxdPi9cbnZhciBlbGVtZW50Q2xvc2VFeHByZXNzaW9uID0gL14kL1xudmFyIG90aGVyRWxlbWVudE9wZW5FeHByZXNzaW9uID0gbmV3IFJlZ0V4cChvcGVuQ2xvc2VUYWcuc291cmNlICsgJ1xcXFxzKiQnKVxuXG5mdW5jdGlvbiBibG9ja0h0bWwoZWF0LCB2YWx1ZSwgc2lsZW50KSB7XG4gIHZhciBzZWxmID0gdGhpc1xuICB2YXIgYmxvY2tzID0gc2VsZi5vcHRpb25zLmJsb2Nrcy5qb2luKCd8JylcbiAgdmFyIGVsZW1lbnRPcGVuRXhwcmVzc2lvbiA9IG5ldyBSZWdFeHAoXG4gICAgJ148Lz8oJyArIGJsb2NrcyArICcpKD89KFxcXFxzfC8/PnwkKSknLFxuICAgICdpJ1xuICApXG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGhcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgbmV4dFxuICB2YXIgbGluZVxuICB2YXIgb2Zmc2V0XG4gIHZhciBjaGFyYWN0ZXJcbiAgdmFyIGNvdW50XG4gIHZhciBzZXF1ZW5jZVxuICB2YXIgc3VidmFsdWVcblxuICB2YXIgc2VxdWVuY2VzID0gW1xuICAgIFtyYXdPcGVuRXhwcmVzc2lvbiwgcmF3Q2xvc2VFeHByZXNzaW9uLCB0cnVlXSxcbiAgICBbY29tbWVudE9wZW5FeHByZXNzaW9uLCBjb21tZW50Q2xvc2VFeHByZXNzaW9uLCB0cnVlXSxcbiAgICBbaW5zdHJ1Y3Rpb25PcGVuRXhwcmVzc2lvbiwgaW5zdHJ1Y3Rpb25DbG9zZUV4cHJlc3Npb24sIHRydWVdLFxuICAgIFtkaXJlY3RpdmVPcGVuRXhwcmVzc2lvbiwgZGlyZWN0aXZlQ2xvc2VFeHByZXNzaW9uLCB0cnVlXSxcbiAgICBbY2RhdGFPcGVuRXhwcmVzc2lvbiwgY2RhdGFDbG9zZUV4cHJlc3Npb24sIHRydWVdLFxuICAgIFtlbGVtZW50T3BlbkV4cHJlc3Npb24sIGVsZW1lbnRDbG9zZUV4cHJlc3Npb24sIHRydWVdLFxuICAgIFtvdGhlckVsZW1lbnRPcGVuRXhwcmVzc2lvbiwgZWxlbWVudENsb3NlRXhwcmVzc2lvbiwgZmFsc2VdXG4gIF1cblxuICAvLyBFYXQgaW5pdGlhbCBzcGFjaW5nLlxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICBpZiAoY2hhcmFjdGVyICE9PSB0YWIgJiYgY2hhcmFjdGVyICE9PSBzcGFjZSkge1xuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpbmRleCsrXG4gIH1cblxuICBpZiAodmFsdWUuY2hhckF0KGluZGV4KSAhPT0gbGVzc1RoYW4pIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIG5leHQgPSB2YWx1ZS5pbmRleE9mKGxpbmVGZWVkLCBpbmRleCArIDEpXG4gIG5leHQgPSBuZXh0ID09PSAtMSA/IGxlbmd0aCA6IG5leHRcbiAgbGluZSA9IHZhbHVlLnNsaWNlKGluZGV4LCBuZXh0KVxuICBvZmZzZXQgPSAtMVxuICBjb3VudCA9IHNlcXVlbmNlcy5sZW5ndGhcblxuICB3aGlsZSAoKytvZmZzZXQgPCBjb3VudCkge1xuICAgIGlmIChzZXF1ZW5jZXNbb2Zmc2V0XVswXS50ZXN0KGxpbmUpKSB7XG4gICAgICBzZXF1ZW5jZSA9IHNlcXVlbmNlc1tvZmZzZXRdXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICghc2VxdWVuY2UpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gc2VxdWVuY2VbMl1cbiAgfVxuXG4gIGluZGV4ID0gbmV4dFxuXG4gIGlmICghc2VxdWVuY2VbMV0udGVzdChsaW5lKSkge1xuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgbmV4dCA9IHZhbHVlLmluZGV4T2YobGluZUZlZWQsIGluZGV4ICsgMSlcbiAgICAgIG5leHQgPSBuZXh0ID09PSAtMSA/IGxlbmd0aCA6IG5leHRcbiAgICAgIGxpbmUgPSB2YWx1ZS5zbGljZShpbmRleCArIDEsIG5leHQpXG5cbiAgICAgIGlmIChzZXF1ZW5jZVsxXS50ZXN0KGxpbmUpKSB7XG4gICAgICAgIGlmIChsaW5lKSB7XG4gICAgICAgICAgaW5kZXggPSBuZXh0XG4gICAgICAgIH1cblxuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBpbmRleCA9IG5leHRcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGluZGV4KVxuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHt0eXBlOiAnaHRtbCcsIHZhbHVlOiBzdWJ2YWx1ZX0pXG59XG4iXSwibmFtZXMiOlsib3BlbkNsb3NlVGFnIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJibG9ja0h0bWwiLCJ0YWIiLCJzcGFjZSIsImxpbmVGZWVkIiwibGVzc1RoYW4iLCJyYXdPcGVuRXhwcmVzc2lvbiIsInJhd0Nsb3NlRXhwcmVzc2lvbiIsImNvbW1lbnRPcGVuRXhwcmVzc2lvbiIsImNvbW1lbnRDbG9zZUV4cHJlc3Npb24iLCJpbnN0cnVjdGlvbk9wZW5FeHByZXNzaW9uIiwiaW5zdHJ1Y3Rpb25DbG9zZUV4cHJlc3Npb24iLCJkaXJlY3RpdmVPcGVuRXhwcmVzc2lvbiIsImRpcmVjdGl2ZUNsb3NlRXhwcmVzc2lvbiIsImNkYXRhT3BlbkV4cHJlc3Npb24iLCJjZGF0YUNsb3NlRXhwcmVzc2lvbiIsImVsZW1lbnRDbG9zZUV4cHJlc3Npb24iLCJvdGhlckVsZW1lbnRPcGVuRXhwcmVzc2lvbiIsIlJlZ0V4cCIsInNvdXJjZSIsImVhdCIsInZhbHVlIiwic2lsZW50Iiwic2VsZiIsImJsb2NrcyIsIm9wdGlvbnMiLCJqb2luIiwiZWxlbWVudE9wZW5FeHByZXNzaW9uIiwibGVuZ3RoIiwiaW5kZXgiLCJuZXh0IiwibGluZSIsIm9mZnNldCIsImNoYXJhY3RlciIsImNvdW50Iiwic2VxdWVuY2UiLCJzdWJ2YWx1ZSIsInNlcXVlbmNlcyIsImNoYXJBdCIsImluZGV4T2YiLCJzbGljZSIsInRlc3QiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/html-block.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/html-inline.js":
/*!***************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/html-inline.js ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar alphabetical = __webpack_require__(/*! is-alphabetical */ \"(rsc)/./node_modules/is-alphabetical/index.js\");\nvar locate = __webpack_require__(/*! ../locate/tag */ \"(rsc)/./node_modules/remark-parse/lib/locate/tag.js\");\nvar tag = (__webpack_require__(/*! ../util/html */ \"(rsc)/./node_modules/remark-parse/lib/util/html.js\").tag);\nmodule.exports = inlineHTML;\ninlineHTML.locator = locate;\nvar lessThan = \"<\";\nvar questionMark = \"?\";\nvar exclamationMark = \"!\";\nvar slash = \"/\";\nvar htmlLinkOpenExpression = /^<a /i;\nvar htmlLinkCloseExpression = /^<\\/a>/i;\nfunction inlineHTML(eat, value, silent) {\n    var self = this;\n    var length = value.length;\n    var character;\n    var subvalue;\n    if (value.charAt(0) !== lessThan || length < 3) {\n        return;\n    }\n    character = value.charAt(1);\n    if (!alphabetical(character) && character !== questionMark && character !== exclamationMark && character !== slash) {\n        return;\n    }\n    subvalue = value.match(tag);\n    if (!subvalue) {\n        return;\n    }\n    /* istanbul ignore if - not used yet. */ if (silent) {\n        return true;\n    }\n    subvalue = subvalue[0];\n    if (!self.inLink && htmlLinkOpenExpression.test(subvalue)) {\n        self.inLink = true;\n    } else if (self.inLink && htmlLinkCloseExpression.test(subvalue)) {\n        self.inLink = false;\n    }\n    return eat(subvalue)({\n        type: \"html\",\n        value: subvalue\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9odG1sLWlubGluZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLGVBQWVDLG1CQUFPQSxDQUFDO0FBQzNCLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlFLE1BQU1GLG1HQUEyQjtBQUVyQ0csT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsV0FBV0MsT0FBTyxHQUFHTDtBQUVyQixJQUFJTSxXQUFXO0FBQ2YsSUFBSUMsZUFBZTtBQUNuQixJQUFJQyxrQkFBa0I7QUFDdEIsSUFBSUMsUUFBUTtBQUVaLElBQUlDLHlCQUF5QjtBQUM3QixJQUFJQywwQkFBMEI7QUFFOUIsU0FBU1AsV0FBV1EsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDcEMsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSUMsU0FBU0gsTUFBTUcsTUFBTTtJQUN6QixJQUFJQztJQUNKLElBQUlDO0lBRUosSUFBSUwsTUFBTU0sTUFBTSxDQUFDLE9BQU9iLFlBQVlVLFNBQVMsR0FBRztRQUM5QztJQUNGO0lBRUFDLFlBQVlKLE1BQU1NLE1BQU0sQ0FBQztJQUV6QixJQUNFLENBQUNyQixhQUFhbUIsY0FDZEEsY0FBY1YsZ0JBQ2RVLGNBQWNULG1CQUNkUyxjQUFjUixPQUNkO1FBQ0E7SUFDRjtJQUVBUyxXQUFXTCxNQUFNTyxLQUFLLENBQUNuQjtJQUV2QixJQUFJLENBQUNpQixVQUFVO1FBQ2I7SUFDRjtJQUVBLHNDQUFzQyxHQUN0QyxJQUFJSixRQUFRO1FBQ1YsT0FBTztJQUNUO0lBRUFJLFdBQVdBLFFBQVEsQ0FBQyxFQUFFO0lBRXRCLElBQUksQ0FBQ0gsS0FBS00sTUFBTSxJQUFJWCx1QkFBdUJZLElBQUksQ0FBQ0osV0FBVztRQUN6REgsS0FBS00sTUFBTSxHQUFHO0lBQ2hCLE9BQU8sSUFBSU4sS0FBS00sTUFBTSxJQUFJVix3QkFBd0JXLElBQUksQ0FBQ0osV0FBVztRQUNoRUgsS0FBS00sTUFBTSxHQUFHO0lBQ2hCO0lBRUEsT0FBT1QsSUFBSU0sVUFBVTtRQUFDSyxNQUFNO1FBQVFWLE9BQU9LO0lBQVE7QUFDckQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL2h0bWwtaW5saW5lLmpzPzk0YzgiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciBhbHBoYWJldGljYWwgPSByZXF1aXJlKCdpcy1hbHBoYWJldGljYWwnKVxudmFyIGxvY2F0ZSA9IHJlcXVpcmUoJy4uL2xvY2F0ZS90YWcnKVxudmFyIHRhZyA9IHJlcXVpcmUoJy4uL3V0aWwvaHRtbCcpLnRhZ1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlubGluZUhUTUxcbmlubGluZUhUTUwubG9jYXRvciA9IGxvY2F0ZVxuXG52YXIgbGVzc1RoYW4gPSAnPCdcbnZhciBxdWVzdGlvbk1hcmsgPSAnPydcbnZhciBleGNsYW1hdGlvbk1hcmsgPSAnISdcbnZhciBzbGFzaCA9ICcvJ1xuXG52YXIgaHRtbExpbmtPcGVuRXhwcmVzc2lvbiA9IC9ePGEgL2lcbnZhciBodG1sTGlua0Nsb3NlRXhwcmVzc2lvbiA9IC9ePFxcL2E+L2lcblxuZnVuY3Rpb24gaW5saW5lSFRNTChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGhcbiAgdmFyIGNoYXJhY3RlclxuICB2YXIgc3VidmFsdWVcblxuICBpZiAodmFsdWUuY2hhckF0KDApICE9PSBsZXNzVGhhbiB8fCBsZW5ndGggPCAzKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoMSlcblxuICBpZiAoXG4gICAgIWFscGhhYmV0aWNhbChjaGFyYWN0ZXIpICYmXG4gICAgY2hhcmFjdGVyICE9PSBxdWVzdGlvbk1hcmsgJiZcbiAgICBjaGFyYWN0ZXIgIT09IGV4Y2xhbWF0aW9uTWFyayAmJlxuICAgIGNoYXJhY3RlciAhPT0gc2xhc2hcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLm1hdGNoKHRhZylcblxuICBpZiAoIXN1YnZhbHVlKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBub3QgdXNlZCB5ZXQuICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgc3VidmFsdWUgPSBzdWJ2YWx1ZVswXVxuXG4gIGlmICghc2VsZi5pbkxpbmsgJiYgaHRtbExpbmtPcGVuRXhwcmVzc2lvbi50ZXN0KHN1YnZhbHVlKSkge1xuICAgIHNlbGYuaW5MaW5rID0gdHJ1ZVxuICB9IGVsc2UgaWYgKHNlbGYuaW5MaW5rICYmIGh0bWxMaW5rQ2xvc2VFeHByZXNzaW9uLnRlc3Qoc3VidmFsdWUpKSB7XG4gICAgc2VsZi5pbkxpbmsgPSBmYWxzZVxuICB9XG5cbiAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe3R5cGU6ICdodG1sJywgdmFsdWU6IHN1YnZhbHVlfSlcbn1cbiJdLCJuYW1lcyI6WyJhbHBoYWJldGljYWwiLCJyZXF1aXJlIiwibG9jYXRlIiwidGFnIiwibW9kdWxlIiwiZXhwb3J0cyIsImlubGluZUhUTUwiLCJsb2NhdG9yIiwibGVzc1RoYW4iLCJxdWVzdGlvbk1hcmsiLCJleGNsYW1hdGlvbk1hcmsiLCJzbGFzaCIsImh0bWxMaW5rT3BlbkV4cHJlc3Npb24iLCJodG1sTGlua0Nsb3NlRXhwcmVzc2lvbiIsImVhdCIsInZhbHVlIiwic2lsZW50Iiwic2VsZiIsImxlbmd0aCIsImNoYXJhY3RlciIsInN1YnZhbHVlIiwiY2hhckF0IiwibWF0Y2giLCJpbkxpbmsiLCJ0ZXN0IiwidHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/html-inline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/link.js":
/*!********************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/link.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nvar locate = __webpack_require__(/*! ../locate/link */ \"(rsc)/./node_modules/remark-parse/lib/locate/link.js\");\nmodule.exports = link;\nlink.locator = locate;\nvar lineFeed = \"\\n\";\nvar exclamationMark = \"!\";\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar leftParenthesis = \"(\";\nvar rightParenthesis = \")\";\nvar lessThan = \"<\";\nvar greaterThan = \">\";\nvar leftSquareBracket = \"[\";\nvar backslash = \"\\\\\";\nvar rightSquareBracket = \"]\";\nvar graveAccent = \"`\";\nfunction link(eat, value, silent) {\n    var self = this;\n    var subvalue = \"\";\n    var index = 0;\n    var character = value.charAt(0);\n    var pedantic = self.options.pedantic;\n    var commonmark = self.options.commonmark;\n    var gfm = self.options.gfm;\n    var closed;\n    var count;\n    var opening;\n    var beforeURL;\n    var beforeTitle;\n    var subqueue;\n    var hasMarker;\n    var isImage;\n    var content;\n    var marker;\n    var length;\n    var title;\n    var depth;\n    var queue;\n    var url;\n    var now;\n    var exit;\n    var node;\n    // Detect whether this is an image.\n    if (character === exclamationMark) {\n        isImage = true;\n        subvalue = character;\n        character = value.charAt(++index);\n    }\n    // Eat the opening.\n    if (character !== leftSquareBracket) {\n        return;\n    }\n    // Exit when this is a link and we’re already inside a link.\n    if (!isImage && self.inLink) {\n        return;\n    }\n    subvalue += character;\n    queue = \"\";\n    index++;\n    // Eat the content.\n    length = value.length;\n    now = eat.now();\n    depth = 0;\n    now.column += index;\n    now.offset += index;\n    while(index < length){\n        character = value.charAt(index);\n        subqueue = character;\n        if (character === graveAccent) {\n            // Inline-code in link content.\n            count = 1;\n            while(value.charAt(index + 1) === graveAccent){\n                subqueue += character;\n                index++;\n                count++;\n            }\n            if (!opening) {\n                opening = count;\n            } else if (count >= opening) {\n                opening = 0;\n            }\n        } else if (character === backslash) {\n            // Allow brackets to be escaped.\n            index++;\n            subqueue += value.charAt(index);\n        } else if ((!opening || gfm) && character === leftSquareBracket) {\n            // In GFM mode, brackets in code still count.  In all other modes,\n            // they don’t.\n            depth++;\n        } else if ((!opening || gfm) && character === rightSquareBracket) {\n            if (depth) {\n                depth--;\n            } else {\n                // Allow white-space between content and url in GFM mode.\n                if (!pedantic) {\n                    while(index < length){\n                        character = value.charAt(index + 1);\n                        if (!whitespace(character)) {\n                            break;\n                        }\n                        subqueue += character;\n                        index++;\n                    }\n                }\n                if (value.charAt(index + 1) !== leftParenthesis) {\n                    return;\n                }\n                subqueue += leftParenthesis;\n                closed = true;\n                index++;\n                break;\n            }\n        }\n        queue += subqueue;\n        subqueue = \"\";\n        index++;\n    }\n    // Eat the content closing.\n    if (!closed) {\n        return;\n    }\n    content = queue;\n    subvalue += queue + subqueue;\n    index++;\n    // Eat white-space.\n    while(index < length){\n        character = value.charAt(index);\n        if (!whitespace(character)) {\n            break;\n        }\n        subvalue += character;\n        index++;\n    }\n    // Eat the URL.\n    character = value.charAt(index);\n    queue = \"\";\n    beforeURL = subvalue;\n    if (character === lessThan) {\n        index++;\n        beforeURL += lessThan;\n        while(index < length){\n            character = value.charAt(index);\n            if (character === greaterThan) {\n                break;\n            }\n            if (commonmark && character === lineFeed) {\n                return;\n            }\n            queue += character;\n            index++;\n        }\n        if (value.charAt(index) !== greaterThan) {\n            return;\n        }\n        subvalue += lessThan + queue + greaterThan;\n        url = queue;\n        index++;\n    } else {\n        character = null;\n        subqueue = \"\";\n        while(index < length){\n            character = value.charAt(index);\n            if (subqueue && (character === quotationMark || character === apostrophe || commonmark && character === leftParenthesis)) {\n                break;\n            }\n            if (whitespace(character)) {\n                if (!pedantic) {\n                    break;\n                }\n                subqueue += character;\n            } else {\n                if (character === leftParenthesis) {\n                    depth++;\n                } else if (character === rightParenthesis) {\n                    if (depth === 0) {\n                        break;\n                    }\n                    depth--;\n                }\n                queue += subqueue;\n                subqueue = \"\";\n                if (character === backslash) {\n                    queue += backslash;\n                    character = value.charAt(++index);\n                }\n                queue += character;\n            }\n            index++;\n        }\n        subvalue += queue;\n        url = queue;\n        index = subvalue.length;\n    }\n    // Eat white-space.\n    queue = \"\";\n    while(index < length){\n        character = value.charAt(index);\n        if (!whitespace(character)) {\n            break;\n        }\n        queue += character;\n        index++;\n    }\n    character = value.charAt(index);\n    subvalue += queue;\n    // Eat the title.\n    if (queue && (character === quotationMark || character === apostrophe || commonmark && character === leftParenthesis)) {\n        index++;\n        subvalue += character;\n        queue = \"\";\n        marker = character === leftParenthesis ? rightParenthesis : character;\n        beforeTitle = subvalue;\n        // In commonmark-mode, things are pretty easy: the marker cannot occur\n        // inside the title.  Non-commonmark does, however, support nested\n        // delimiters.\n        if (commonmark) {\n            while(index < length){\n                character = value.charAt(index);\n                if (character === marker) {\n                    break;\n                }\n                if (character === backslash) {\n                    queue += backslash;\n                    character = value.charAt(++index);\n                }\n                index++;\n                queue += character;\n            }\n            character = value.charAt(index);\n            if (character !== marker) {\n                return;\n            }\n            title = queue;\n            subvalue += queue + character;\n            index++;\n            while(index < length){\n                character = value.charAt(index);\n                if (!whitespace(character)) {\n                    break;\n                }\n                subvalue += character;\n                index++;\n            }\n        } else {\n            subqueue = \"\";\n            while(index < length){\n                character = value.charAt(index);\n                if (character === marker) {\n                    if (hasMarker) {\n                        queue += marker + subqueue;\n                        subqueue = \"\";\n                    }\n                    hasMarker = true;\n                } else if (!hasMarker) {\n                    queue += character;\n                } else if (character === rightParenthesis) {\n                    subvalue += queue + marker + subqueue;\n                    title = queue;\n                    break;\n                } else if (whitespace(character)) {\n                    subqueue += character;\n                } else {\n                    queue += marker + subqueue + character;\n                    subqueue = \"\";\n                    hasMarker = false;\n                }\n                index++;\n            }\n        }\n    }\n    if (value.charAt(index) !== rightParenthesis) {\n        return;\n    }\n    /* istanbul ignore if - never used (yet) */ if (silent) {\n        return true;\n    }\n    subvalue += rightParenthesis;\n    url = self.decode.raw(self.unescape(url), eat(beforeURL).test().end, {\n        nonTerminated: false\n    });\n    if (title) {\n        beforeTitle = eat(beforeTitle).test().end;\n        title = self.decode.raw(self.unescape(title), beforeTitle);\n    }\n    node = {\n        type: isImage ? \"image\" : \"link\",\n        title: title || null,\n        url: url\n    };\n    if (isImage) {\n        node.alt = self.decode.raw(self.unescape(content), now) || null;\n    } else {\n        exit = self.enterLink();\n        node.children = self.tokenizeInline(content, now);\n        exit();\n    }\n    return eat(subvalue)(node);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/link.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/list.js":
/*!********************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/list.js ***!
  \********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar trim = __webpack_require__(/*! trim */ \"(rsc)/./node_modules/trim/index.js\");\nvar repeat = __webpack_require__(/*! repeat-string */ \"(rsc)/./node_modules/repeat-string/index.js\");\nvar decimal = __webpack_require__(/*! is-decimal */ \"(rsc)/./node_modules/is-decimal/index.js\");\nvar getIndent = __webpack_require__(/*! ../util/get-indentation */ \"(rsc)/./node_modules/remark-parse/lib/util/get-indentation.js\");\nvar removeIndent = __webpack_require__(/*! ../util/remove-indentation */ \"(rsc)/./node_modules/remark-parse/lib/util/remove-indentation.js\");\nvar interrupt = __webpack_require__(/*! ../util/interrupt */ \"(rsc)/./node_modules/remark-parse/lib/util/interrupt.js\");\nmodule.exports = list;\nvar asterisk = \"*\";\nvar underscore = \"_\";\nvar plusSign = \"+\";\nvar dash = \"-\";\nvar dot = \".\";\nvar space = \" \";\nvar lineFeed = \"\\n\";\nvar tab = \"\t\";\nvar rightParenthesis = \")\";\nvar lowercaseX = \"x\";\nvar tabSize = 4;\nvar looseListItemExpression = /\\n\\n(?!\\s*$)/;\nvar taskItemExpression = /^\\[([ \\t]|x|X)][ \\t]/;\nvar bulletExpression = /^([ \\t]*)([*+-]|\\d+[.)])( {1,4}(?! )| |\\t|$|(?=\\n))([^\\n]*)/;\nvar pedanticBulletExpression = /^([ \\t]*)([*+-]|\\d+[.)])([ \\t]+)/;\nvar initialIndentExpression = /^( {1,4}|\\t)?/gm;\nfunction list(eat, value, silent) {\n    var self = this;\n    var commonmark = self.options.commonmark;\n    var pedantic = self.options.pedantic;\n    var tokenizers = self.blockTokenizers;\n    var interuptors = self.interruptList;\n    var index = 0;\n    var length = value.length;\n    var start = null;\n    var size = 0;\n    var queue;\n    var ordered;\n    var character;\n    var marker;\n    var nextIndex;\n    var startIndex;\n    var prefixed;\n    var currentMarker;\n    var content;\n    var line;\n    var prevEmpty;\n    var empty;\n    var items;\n    var allLines;\n    var emptyLines;\n    var item;\n    var enterTop;\n    var exitBlockquote;\n    var spread = false;\n    var node;\n    var now;\n    var end;\n    var indented;\n    while(index < length){\n        character = value.charAt(index);\n        if (character === tab) {\n            size += tabSize - size % tabSize;\n        } else if (character === space) {\n            size++;\n        } else {\n            break;\n        }\n        index++;\n    }\n    if (size >= tabSize) {\n        return;\n    }\n    character = value.charAt(index);\n    if (character === asterisk || character === plusSign || character === dash) {\n        marker = character;\n        ordered = false;\n    } else {\n        ordered = true;\n        queue = \"\";\n        while(index < length){\n            character = value.charAt(index);\n            if (!decimal(character)) {\n                break;\n            }\n            queue += character;\n            index++;\n        }\n        character = value.charAt(index);\n        if (!queue || !(character === dot || commonmark && character === rightParenthesis)) {\n            return;\n        }\n        start = parseInt(queue, 10);\n        marker = character;\n    }\n    character = value.charAt(++index);\n    if (character !== space && character !== tab && (pedantic || character !== lineFeed && character !== \"\")) {\n        return;\n    }\n    if (silent) {\n        return true;\n    }\n    index = 0;\n    items = [];\n    allLines = [];\n    emptyLines = [];\n    while(index < length){\n        nextIndex = value.indexOf(lineFeed, index);\n        startIndex = index;\n        prefixed = false;\n        indented = false;\n        if (nextIndex === -1) {\n            nextIndex = length;\n        }\n        end = index + tabSize;\n        size = 0;\n        while(index < length){\n            character = value.charAt(index);\n            if (character === tab) {\n                size += tabSize - size % tabSize;\n            } else if (character === space) {\n                size++;\n            } else {\n                break;\n            }\n            index++;\n        }\n        if (size >= tabSize) {\n            indented = true;\n        }\n        if (item && size >= item.indent) {\n            indented = true;\n        }\n        character = value.charAt(index);\n        currentMarker = null;\n        if (!indented) {\n            if (character === asterisk || character === plusSign || character === dash) {\n                currentMarker = character;\n                index++;\n                size++;\n            } else {\n                queue = \"\";\n                while(index < length){\n                    character = value.charAt(index);\n                    if (!decimal(character)) {\n                        break;\n                    }\n                    queue += character;\n                    index++;\n                }\n                character = value.charAt(index);\n                index++;\n                if (queue && (character === dot || commonmark && character === rightParenthesis)) {\n                    currentMarker = character;\n                    size += queue.length + 1;\n                }\n            }\n            if (currentMarker) {\n                character = value.charAt(index);\n                if (character === tab) {\n                    size += tabSize - size % tabSize;\n                    index++;\n                } else if (character === space) {\n                    end = index + tabSize;\n                    while(index < end){\n                        if (value.charAt(index) !== space) {\n                            break;\n                        }\n                        index++;\n                        size++;\n                    }\n                    if (index === end && value.charAt(index) === space) {\n                        index -= tabSize - 1;\n                        size -= tabSize - 1;\n                    }\n                } else if (character !== lineFeed && character !== \"\") {\n                    currentMarker = null;\n                }\n            }\n        }\n        if (currentMarker) {\n            if (!pedantic && marker !== currentMarker) {\n                break;\n            }\n            prefixed = true;\n        } else {\n            if (!commonmark && !indented && value.charAt(startIndex) === space) {\n                indented = true;\n            } else if (commonmark && item) {\n                indented = size >= item.indent || size > tabSize;\n            }\n            prefixed = false;\n            index = startIndex;\n        }\n        line = value.slice(startIndex, nextIndex);\n        content = startIndex === index ? line : value.slice(index, nextIndex);\n        if (currentMarker === asterisk || currentMarker === underscore || currentMarker === dash) {\n            if (tokenizers.thematicBreak.call(self, eat, line, true)) {\n                break;\n            }\n        }\n        prevEmpty = empty;\n        empty = !prefixed && !trim(content).length;\n        if (indented && item) {\n            item.value = item.value.concat(emptyLines, line);\n            allLines = allLines.concat(emptyLines, line);\n            emptyLines = [];\n        } else if (prefixed) {\n            if (emptyLines.length !== 0) {\n                spread = true;\n                item.value.push(\"\");\n                item.trail = emptyLines.concat();\n            }\n            item = {\n                value: [\n                    line\n                ],\n                indent: size,\n                trail: []\n            };\n            items.push(item);\n            allLines = allLines.concat(emptyLines, line);\n            emptyLines = [];\n        } else if (empty) {\n            if (prevEmpty && !commonmark) {\n                break;\n            }\n            emptyLines.push(line);\n        } else {\n            if (prevEmpty) {\n                break;\n            }\n            if (interrupt(interuptors, tokenizers, self, [\n                eat,\n                line,\n                true\n            ])) {\n                break;\n            }\n            item.value = item.value.concat(emptyLines, line);\n            allLines = allLines.concat(emptyLines, line);\n            emptyLines = [];\n        }\n        index = nextIndex + 1;\n    }\n    node = eat(allLines.join(lineFeed)).reset({\n        type: \"list\",\n        ordered: ordered,\n        start: start,\n        spread: spread,\n        children: []\n    });\n    enterTop = self.enterList();\n    exitBlockquote = self.enterBlock();\n    index = -1;\n    length = items.length;\n    while(++index < length){\n        item = items[index].value.join(lineFeed);\n        now = eat.now();\n        eat(item)(listItem(self, item, now), node);\n        item = items[index].trail.join(lineFeed);\n        if (index !== length - 1) {\n            item += lineFeed;\n        }\n        eat(item);\n    }\n    enterTop();\n    exitBlockquote();\n    return node;\n}\nfunction listItem(ctx, value, position) {\n    var offsets = ctx.offset;\n    var fn = ctx.options.pedantic ? pedanticListItem : normalListItem;\n    var checked = null;\n    var task;\n    var indent;\n    value = fn.apply(null, arguments);\n    if (ctx.options.gfm) {\n        task = value.match(taskItemExpression);\n        if (task) {\n            indent = task[0].length;\n            checked = task[1].toLowerCase() === lowercaseX;\n            offsets[position.line] += indent;\n            value = value.slice(indent);\n        }\n    }\n    return {\n        type: \"listItem\",\n        spread: looseListItemExpression.test(value),\n        checked: checked,\n        children: ctx.tokenizeBlock(value, position)\n    };\n}\n// Create a list-item using overly simple mechanics.\nfunction pedanticListItem(ctx, value, position) {\n    var offsets = ctx.offset;\n    var line = position.line;\n    // Remove the list-item’s bullet.\n    value = value.replace(pedanticBulletExpression, replacer);\n    // The initial line was also matched by the below, so we reset the `line`.\n    line = position.line;\n    return value.replace(initialIndentExpression, replacer);\n    // A simple replacer which removed all matches, and adds their length to\n    // `offset`.\n    function replacer($0) {\n        offsets[line] = (offsets[line] || 0) + $0.length;\n        line++;\n        return \"\";\n    }\n}\n// Create a list-item using sane mechanics.\nfunction normalListItem(ctx, value, position) {\n    var offsets = ctx.offset;\n    var line = position.line;\n    var max;\n    var bullet;\n    var rest;\n    var lines;\n    var trimmedLines;\n    var index;\n    var length;\n    // Remove the list-item’s bullet.\n    value = value.replace(bulletExpression, replacer);\n    lines = value.split(lineFeed);\n    trimmedLines = removeIndent(value, getIndent(max).indent).split(lineFeed);\n    // We replaced the initial bullet with something else above, which was used\n    // to trick `removeIndentation` into removing some more characters when\n    // possible.  However, that could result in the initial line to be stripped\n    // more than it should be.\n    trimmedLines[0] = rest;\n    offsets[line] = (offsets[line] || 0) + bullet.length;\n    line++;\n    index = 0;\n    length = lines.length;\n    while(++index < length){\n        offsets[line] = (offsets[line] || 0) + lines[index].length - trimmedLines[index].length;\n        line++;\n    }\n    return trimmedLines.join(lineFeed);\n    /* eslint-disable-next-line max-params */ function replacer($0, $1, $2, $3, $4) {\n        bullet = $1 + $2 + $3;\n        rest = $4;\n        // Make sure that the first nine numbered list items can indent with an\n        // extra space.  That is, when the bullet did not receive an extra final\n        // space.\n        if (Number($2) < 10 && bullet.length % 2 === 1) {\n            $2 = space + $2;\n        }\n        max = $1 + repeat(space, $2.length) + $3;\n        return max + rest;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9saXN0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsT0FBT0MsbUJBQU9BLENBQUM7QUFDbkIsSUFBSUMsU0FBU0QsbUJBQU9BLENBQUM7QUFDckIsSUFBSUUsVUFBVUYsbUJBQU9BLENBQUM7QUFDdEIsSUFBSUcsWUFBWUgsbUJBQU9BLENBQUM7QUFDeEIsSUFBSUksZUFBZUosbUJBQU9BLENBQUM7QUFDM0IsSUFBSUssWUFBWUwsbUJBQU9BLENBQUM7QUFFeEJNLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsV0FBVztBQUNmLElBQUlDLGFBQWE7QUFDakIsSUFBSUMsV0FBVztBQUNmLElBQUlDLE9BQU87QUFDWCxJQUFJQyxNQUFNO0FBQ1YsSUFBSUMsUUFBUTtBQUNaLElBQUlDLFdBQVc7QUFDZixJQUFJQyxNQUFNO0FBQ1YsSUFBSUMsbUJBQW1CO0FBQ3ZCLElBQUlDLGFBQWE7QUFFakIsSUFBSUMsVUFBVTtBQUNkLElBQUlDLDBCQUEwQjtBQUM5QixJQUFJQyxxQkFBcUI7QUFDekIsSUFBSUMsbUJBQW1CO0FBQ3ZCLElBQUlDLDJCQUEyQjtBQUMvQixJQUFJQywwQkFBMEI7QUFFOUIsU0FBU2hCLEtBQUtpQixHQUFHLEVBQUVDLEtBQUssRUFBRUMsTUFBTTtJQUM5QixJQUFJQyxPQUFPLElBQUk7SUFDZixJQUFJQyxhQUFhRCxLQUFLRSxPQUFPLENBQUNELFVBQVU7SUFDeEMsSUFBSUUsV0FBV0gsS0FBS0UsT0FBTyxDQUFDQyxRQUFRO0lBQ3BDLElBQUlDLGFBQWFKLEtBQUtLLGVBQWU7SUFDckMsSUFBSUMsY0FBY04sS0FBS08sYUFBYTtJQUNwQyxJQUFJQyxRQUFRO0lBQ1osSUFBSUMsU0FBU1gsTUFBTVcsTUFBTTtJQUN6QixJQUFJQyxRQUFRO0lBQ1osSUFBSUMsT0FBTztJQUNYLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDLFNBQVM7SUFDYixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUVKLE1BQU8xQixRQUFRQyxPQUFRO1FBQ3JCSyxZQUFZaEIsTUFBTXFDLE1BQU0sQ0FBQzNCO1FBRXpCLElBQUlNLGNBQWMxQixLQUFLO1lBQ3JCdUIsUUFBUXBCLFVBQVdvQixPQUFPcEI7UUFDNUIsT0FBTyxJQUFJdUIsY0FBYzVCLE9BQU87WUFDOUJ5QjtRQUNGLE9BQU87WUFDTDtRQUNGO1FBRUFIO0lBQ0Y7SUFFQSxJQUFJRyxRQUFRcEIsU0FBUztRQUNuQjtJQUNGO0lBRUF1QixZQUFZaEIsTUFBTXFDLE1BQU0sQ0FBQzNCO0lBRXpCLElBQUlNLGNBQWNqQyxZQUFZaUMsY0FBYy9CLFlBQVkrQixjQUFjOUIsTUFBTTtRQUMxRStCLFNBQVNEO1FBQ1RELFVBQVU7SUFDWixPQUFPO1FBQ0xBLFVBQVU7UUFDVkQsUUFBUTtRQUVSLE1BQU9KLFFBQVFDLE9BQVE7WUFDckJLLFlBQVloQixNQUFNcUMsTUFBTSxDQUFDM0I7WUFFekIsSUFBSSxDQUFDbEMsUUFBUXdDLFlBQVk7Z0JBQ3ZCO1lBQ0Y7WUFFQUYsU0FBU0U7WUFDVE47UUFDRjtRQUVBTSxZQUFZaEIsTUFBTXFDLE1BQU0sQ0FBQzNCO1FBRXpCLElBQ0UsQ0FBQ0ksU0FDRCxDQUFFRSxDQUFBQSxjQUFjN0IsT0FBUWdCLGNBQWNhLGNBQWN6QixnQkFBZ0IsR0FDcEU7WUFDQTtRQUNGO1FBRUFxQixRQUFRMEIsU0FBU3hCLE9BQU87UUFDeEJHLFNBQVNEO0lBQ1g7SUFFQUEsWUFBWWhCLE1BQU1xQyxNQUFNLENBQUMsRUFBRTNCO0lBRTNCLElBQ0VNLGNBQWM1QixTQUNkNEIsY0FBYzFCLE9BQ2JlLENBQUFBLFlBQWFXLGNBQWMzQixZQUFZMkIsY0FBYyxFQUFFLEdBQ3hEO1FBQ0E7SUFDRjtJQUVBLElBQUlmLFFBQVE7UUFDVixPQUFPO0lBQ1Q7SUFFQVMsUUFBUTtJQUNSZ0IsUUFBUSxFQUFFO0lBQ1ZDLFdBQVcsRUFBRTtJQUNiQyxhQUFhLEVBQUU7SUFFZixNQUFPbEIsUUFBUUMsT0FBUTtRQUNyQk8sWUFBWWxCLE1BQU11QyxPQUFPLENBQUNsRCxVQUFVcUI7UUFDcENTLGFBQWFUO1FBQ2JVLFdBQVc7UUFDWGdCLFdBQVc7UUFFWCxJQUFJbEIsY0FBYyxDQUFDLEdBQUc7WUFDcEJBLFlBQVlQO1FBQ2Q7UUFFQXdCLE1BQU16QixRQUFRakI7UUFDZG9CLE9BQU87UUFFUCxNQUFPSCxRQUFRQyxPQUFRO1lBQ3JCSyxZQUFZaEIsTUFBTXFDLE1BQU0sQ0FBQzNCO1lBRXpCLElBQUlNLGNBQWMxQixLQUFLO2dCQUNyQnVCLFFBQVFwQixVQUFXb0IsT0FBT3BCO1lBQzVCLE9BQU8sSUFBSXVCLGNBQWM1QixPQUFPO2dCQUM5QnlCO1lBQ0YsT0FBTztnQkFDTDtZQUNGO1lBRUFIO1FBQ0Y7UUFFQSxJQUFJRyxRQUFRcEIsU0FBUztZQUNuQjJDLFdBQVc7UUFDYjtRQUVBLElBQUlQLFFBQVFoQixRQUFRZ0IsS0FBS1csTUFBTSxFQUFFO1lBQy9CSixXQUFXO1FBQ2I7UUFFQXBCLFlBQVloQixNQUFNcUMsTUFBTSxDQUFDM0I7UUFDekJXLGdCQUFnQjtRQUVoQixJQUFJLENBQUNlLFVBQVU7WUFDYixJQUNFcEIsY0FBY2pDLFlBQ2RpQyxjQUFjL0IsWUFDZCtCLGNBQWM5QixNQUNkO2dCQUNBbUMsZ0JBQWdCTDtnQkFDaEJOO2dCQUNBRztZQUNGLE9BQU87Z0JBQ0xDLFFBQVE7Z0JBRVIsTUFBT0osUUFBUUMsT0FBUTtvQkFDckJLLFlBQVloQixNQUFNcUMsTUFBTSxDQUFDM0I7b0JBRXpCLElBQUksQ0FBQ2xDLFFBQVF3QyxZQUFZO3dCQUN2QjtvQkFDRjtvQkFFQUYsU0FBU0U7b0JBQ1ROO2dCQUNGO2dCQUVBTSxZQUFZaEIsTUFBTXFDLE1BQU0sQ0FBQzNCO2dCQUN6QkE7Z0JBRUEsSUFDRUksU0FDQ0UsQ0FBQUEsY0FBYzdCLE9BQVFnQixjQUFjYSxjQUFjekIsZ0JBQWdCLEdBQ25FO29CQUNBOEIsZ0JBQWdCTDtvQkFDaEJILFFBQVFDLE1BQU1ILE1BQU0sR0FBRztnQkFDekI7WUFDRjtZQUVBLElBQUlVLGVBQWU7Z0JBQ2pCTCxZQUFZaEIsTUFBTXFDLE1BQU0sQ0FBQzNCO2dCQUV6QixJQUFJTSxjQUFjMUIsS0FBSztvQkFDckJ1QixRQUFRcEIsVUFBV29CLE9BQU9wQjtvQkFDMUJpQjtnQkFDRixPQUFPLElBQUlNLGNBQWM1QixPQUFPO29CQUM5QitDLE1BQU16QixRQUFRakI7b0JBRWQsTUFBT2lCLFFBQVF5QixJQUFLO3dCQUNsQixJQUFJbkMsTUFBTXFDLE1BQU0sQ0FBQzNCLFdBQVd0QixPQUFPOzRCQUNqQzt3QkFDRjt3QkFFQXNCO3dCQUNBRztvQkFDRjtvQkFFQSxJQUFJSCxVQUFVeUIsT0FBT25DLE1BQU1xQyxNQUFNLENBQUMzQixXQUFXdEIsT0FBTzt3QkFDbERzQixTQUFTakIsVUFBVTt3QkFDbkJvQixRQUFRcEIsVUFBVTtvQkFDcEI7Z0JBQ0YsT0FBTyxJQUFJdUIsY0FBYzNCLFlBQVkyQixjQUFjLElBQUk7b0JBQ3JESyxnQkFBZ0I7Z0JBQ2xCO1lBQ0Y7UUFDRjtRQUVBLElBQUlBLGVBQWU7WUFDakIsSUFBSSxDQUFDaEIsWUFBWVksV0FBV0ksZUFBZTtnQkFDekM7WUFDRjtZQUVBRCxXQUFXO1FBQ2IsT0FBTztZQUNMLElBQUksQ0FBQ2pCLGNBQWMsQ0FBQ2lDLFlBQVlwQyxNQUFNcUMsTUFBTSxDQUFDbEIsZ0JBQWdCL0IsT0FBTztnQkFDbEVnRCxXQUFXO1lBQ2IsT0FBTyxJQUFJakMsY0FBYzBCLE1BQU07Z0JBQzdCTyxXQUFXdkIsUUFBUWdCLEtBQUtXLE1BQU0sSUFBSTNCLE9BQU9wQjtZQUMzQztZQUVBMkIsV0FBVztZQUNYVixRQUFRUztRQUNWO1FBRUFJLE9BQU92QixNQUFNeUMsS0FBSyxDQUFDdEIsWUFBWUQ7UUFDL0JJLFVBQVVILGVBQWVULFFBQVFhLE9BQU92QixNQUFNeUMsS0FBSyxDQUFDL0IsT0FBT1E7UUFFM0QsSUFDRUcsa0JBQWtCdEMsWUFDbEJzQyxrQkFBa0JyQyxjQUNsQnFDLGtCQUFrQm5DLE1BQ2xCO1lBQ0EsSUFBSW9CLFdBQVdvQyxhQUFhLENBQUNDLElBQUksQ0FBQ3pDLE1BQU1ILEtBQUt3QixNQUFNLE9BQU87Z0JBQ3hEO1lBQ0Y7UUFDRjtRQUVBQyxZQUFZQztRQUNaQSxRQUFRLENBQUNMLFlBQVksQ0FBQy9DLEtBQUtpRCxTQUFTWCxNQUFNO1FBRTFDLElBQUl5QixZQUFZUCxNQUFNO1lBQ3BCQSxLQUFLN0IsS0FBSyxHQUFHNkIsS0FBSzdCLEtBQUssQ0FBQzRDLE1BQU0sQ0FBQ2hCLFlBQVlMO1lBQzNDSSxXQUFXQSxTQUFTaUIsTUFBTSxDQUFDaEIsWUFBWUw7WUFDdkNLLGFBQWEsRUFBRTtRQUNqQixPQUFPLElBQUlSLFVBQVU7WUFDbkIsSUFBSVEsV0FBV2pCLE1BQU0sS0FBSyxHQUFHO2dCQUMzQnFCLFNBQVM7Z0JBQ1RILEtBQUs3QixLQUFLLENBQUM2QyxJQUFJLENBQUM7Z0JBQ2hCaEIsS0FBS2lCLEtBQUssR0FBR2xCLFdBQVdnQixNQUFNO1lBQ2hDO1lBRUFmLE9BQU87Z0JBQ0w3QixPQUFPO29CQUFDdUI7aUJBQUs7Z0JBQ2JpQixRQUFRM0I7Z0JBQ1JpQyxPQUFPLEVBQUU7WUFDWDtZQUVBcEIsTUFBTW1CLElBQUksQ0FBQ2hCO1lBQ1hGLFdBQVdBLFNBQVNpQixNQUFNLENBQUNoQixZQUFZTDtZQUN2Q0ssYUFBYSxFQUFFO1FBQ2pCLE9BQU8sSUFBSUgsT0FBTztZQUNoQixJQUFJRCxhQUFhLENBQUNyQixZQUFZO2dCQUM1QjtZQUNGO1lBRUF5QixXQUFXaUIsSUFBSSxDQUFDdEI7UUFDbEIsT0FBTztZQUNMLElBQUlDLFdBQVc7Z0JBQ2I7WUFDRjtZQUVBLElBQUk3QyxVQUFVNkIsYUFBYUYsWUFBWUosTUFBTTtnQkFBQ0g7Z0JBQUt3QjtnQkFBTTthQUFLLEdBQUc7Z0JBQy9EO1lBQ0Y7WUFFQU0sS0FBSzdCLEtBQUssR0FBRzZCLEtBQUs3QixLQUFLLENBQUM0QyxNQUFNLENBQUNoQixZQUFZTDtZQUMzQ0ksV0FBV0EsU0FBU2lCLE1BQU0sQ0FBQ2hCLFlBQVlMO1lBQ3ZDSyxhQUFhLEVBQUU7UUFDakI7UUFFQWxCLFFBQVFRLFlBQVk7SUFDdEI7SUFFQWUsT0FBT2xDLElBQUk0QixTQUFTb0IsSUFBSSxDQUFDMUQsV0FBVzJELEtBQUssQ0FBQztRQUN4Q0MsTUFBTTtRQUNObEMsU0FBU0E7UUFDVEgsT0FBT0E7UUFDUG9CLFFBQVFBO1FBQ1JrQixVQUFVLEVBQUU7SUFDZDtJQUVBcEIsV0FBVzVCLEtBQUtpRCxTQUFTO0lBQ3pCcEIsaUJBQWlCN0IsS0FBS2tELFVBQVU7SUFDaEMxQyxRQUFRLENBQUM7SUFDVEMsU0FBU2UsTUFBTWYsTUFBTTtJQUVyQixNQUFPLEVBQUVELFFBQVFDLE9BQVE7UUFDdkJrQixPQUFPSCxLQUFLLENBQUNoQixNQUFNLENBQUNWLEtBQUssQ0FBQytDLElBQUksQ0FBQzFEO1FBQy9CNkMsTUFBTW5DLElBQUltQyxHQUFHO1FBRWJuQyxJQUFJOEIsTUFBTXdCLFNBQVNuRCxNQUFNMkIsTUFBTUssTUFBTUQ7UUFFckNKLE9BQU9ILEtBQUssQ0FBQ2hCLE1BQU0sQ0FBQ29DLEtBQUssQ0FBQ0MsSUFBSSxDQUFDMUQ7UUFFL0IsSUFBSXFCLFVBQVVDLFNBQVMsR0FBRztZQUN4QmtCLFFBQVF4QztRQUNWO1FBRUFVLElBQUk4QjtJQUNOO0lBRUFDO0lBQ0FDO0lBRUEsT0FBT0U7QUFDVDtBQUVBLFNBQVNvQixTQUFTQyxHQUFHLEVBQUV0RCxLQUFLLEVBQUV1RCxRQUFRO0lBQ3BDLElBQUlDLFVBQVVGLElBQUlHLE1BQU07SUFDeEIsSUFBSUMsS0FBS0osSUFBSWxELE9BQU8sQ0FBQ0MsUUFBUSxHQUFHc0QsbUJBQW1CQztJQUNuRCxJQUFJQyxVQUFVO0lBQ2QsSUFBSUM7SUFDSixJQUFJdEI7SUFFSnhDLFFBQVEwRCxHQUFHSyxLQUFLLENBQUMsTUFBTUM7SUFFdkIsSUFBSVYsSUFBSWxELE9BQU8sQ0FBQzZELEdBQUcsRUFBRTtRQUNuQkgsT0FBTzlELE1BQU1rRSxLQUFLLENBQUN2RTtRQUVuQixJQUFJbUUsTUFBTTtZQUNSdEIsU0FBU3NCLElBQUksQ0FBQyxFQUFFLENBQUNuRCxNQUFNO1lBQ3ZCa0QsVUFBVUMsSUFBSSxDQUFDLEVBQUUsQ0FBQ0ssV0FBVyxPQUFPM0U7WUFDcENnRSxPQUFPLENBQUNELFNBQVNoQyxJQUFJLENBQUMsSUFBSWlCO1lBQzFCeEMsUUFBUUEsTUFBTXlDLEtBQUssQ0FBQ0Q7UUFDdEI7SUFDRjtJQUVBLE9BQU87UUFDTFMsTUFBTTtRQUNOakIsUUFBUXRDLHdCQUF3QjBFLElBQUksQ0FBQ3BFO1FBQ3JDNkQsU0FBU0E7UUFDVFgsVUFBVUksSUFBSWUsYUFBYSxDQUFDckUsT0FBT3VEO0lBQ3JDO0FBQ0Y7QUFFQSxvREFBb0Q7QUFDcEQsU0FBU0ksaUJBQWlCTCxHQUFHLEVBQUV0RCxLQUFLLEVBQUV1RCxRQUFRO0lBQzVDLElBQUlDLFVBQVVGLElBQUlHLE1BQU07SUFDeEIsSUFBSWxDLE9BQU9nQyxTQUFTaEMsSUFBSTtJQUV4QixpQ0FBaUM7SUFDakN2QixRQUFRQSxNQUFNc0UsT0FBTyxDQUFDekUsMEJBQTBCMEU7SUFFaEQsMEVBQTBFO0lBQzFFaEQsT0FBT2dDLFNBQVNoQyxJQUFJO0lBRXBCLE9BQU92QixNQUFNc0UsT0FBTyxDQUFDeEUseUJBQXlCeUU7SUFFOUMsd0VBQXdFO0lBQ3hFLFlBQVk7SUFDWixTQUFTQSxTQUFTQyxFQUFFO1FBQ2xCaEIsT0FBTyxDQUFDakMsS0FBSyxHQUFHLENBQUNpQyxPQUFPLENBQUNqQyxLQUFLLElBQUksS0FBS2lELEdBQUc3RCxNQUFNO1FBQ2hEWTtRQUVBLE9BQU87SUFDVDtBQUNGO0FBRUEsMkNBQTJDO0FBQzNDLFNBQVNxQyxlQUFlTixHQUFHLEVBQUV0RCxLQUFLLEVBQUV1RCxRQUFRO0lBQzFDLElBQUlDLFVBQVVGLElBQUlHLE1BQU07SUFDeEIsSUFBSWxDLE9BQU9nQyxTQUFTaEMsSUFBSTtJQUN4QixJQUFJa0Q7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUluRTtJQUNKLElBQUlDO0lBRUosaUNBQWlDO0lBQ2pDWCxRQUFRQSxNQUFNc0UsT0FBTyxDQUFDMUUsa0JBQWtCMkU7SUFFeENLLFFBQVE1RSxNQUFNOEUsS0FBSyxDQUFDekY7SUFFcEJ3RixlQUFlbkcsYUFBYXNCLE9BQU92QixVQUFVZ0csS0FBS2pDLE1BQU0sRUFBRXNDLEtBQUssQ0FBQ3pGO0lBRWhFLDJFQUEyRTtJQUMzRSx1RUFBdUU7SUFDdkUsMkVBQTJFO0lBQzNFLDBCQUEwQjtJQUMxQndGLFlBQVksQ0FBQyxFQUFFLEdBQUdGO0lBRWxCbkIsT0FBTyxDQUFDakMsS0FBSyxHQUFHLENBQUNpQyxPQUFPLENBQUNqQyxLQUFLLElBQUksS0FBS21ELE9BQU8vRCxNQUFNO0lBQ3BEWTtJQUVBYixRQUFRO0lBQ1JDLFNBQVNpRSxNQUFNakUsTUFBTTtJQUVyQixNQUFPLEVBQUVELFFBQVFDLE9BQVE7UUFDdkI2QyxPQUFPLENBQUNqQyxLQUFLLEdBQ1gsQ0FBQ2lDLE9BQU8sQ0FBQ2pDLEtBQUssSUFBSSxLQUFLcUQsS0FBSyxDQUFDbEUsTUFBTSxDQUFDQyxNQUFNLEdBQUdrRSxZQUFZLENBQUNuRSxNQUFNLENBQUNDLE1BQU07UUFDekVZO0lBQ0Y7SUFFQSxPQUFPc0QsYUFBYTlCLElBQUksQ0FBQzFEO0lBRXpCLHVDQUF1QyxHQUN2QyxTQUFTa0YsU0FBU0MsRUFBRSxFQUFFTyxFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFO1FBQ2xDUixTQUFTSyxLQUFLQyxLQUFLQztRQUNuQk4sT0FBT087UUFFUCx1RUFBdUU7UUFDdkUsd0VBQXdFO1FBQ3hFLFNBQVM7UUFDVCxJQUFJQyxPQUFPSCxNQUFNLE1BQU1OLE9BQU8vRCxNQUFNLEdBQUcsTUFBTSxHQUFHO1lBQzlDcUUsS0FBSzVGLFFBQVE0RjtRQUNmO1FBRUFQLE1BQU1NLEtBQUt4RyxPQUFPYSxPQUFPNEYsR0FBR3JFLE1BQU0sSUFBSXNFO1FBRXRDLE9BQU9SLE1BQU1FO0lBQ2Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvbGlzdC5qcz9jNDUyIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgdHJpbSA9IHJlcXVpcmUoJ3RyaW0nKVxudmFyIHJlcGVhdCA9IHJlcXVpcmUoJ3JlcGVhdC1zdHJpbmcnKVxudmFyIGRlY2ltYWwgPSByZXF1aXJlKCdpcy1kZWNpbWFsJylcbnZhciBnZXRJbmRlbnQgPSByZXF1aXJlKCcuLi91dGlsL2dldC1pbmRlbnRhdGlvbicpXG52YXIgcmVtb3ZlSW5kZW50ID0gcmVxdWlyZSgnLi4vdXRpbC9yZW1vdmUtaW5kZW50YXRpb24nKVxudmFyIGludGVycnVwdCA9IHJlcXVpcmUoJy4uL3V0aWwvaW50ZXJydXB0JylcblxubW9kdWxlLmV4cG9ydHMgPSBsaXN0XG5cbnZhciBhc3RlcmlzayA9ICcqJ1xudmFyIHVuZGVyc2NvcmUgPSAnXydcbnZhciBwbHVzU2lnbiA9ICcrJ1xudmFyIGRhc2ggPSAnLSdcbnZhciBkb3QgPSAnLidcbnZhciBzcGFjZSA9ICcgJ1xudmFyIGxpbmVGZWVkID0gJ1xcbidcbnZhciB0YWIgPSAnXFx0J1xudmFyIHJpZ2h0UGFyZW50aGVzaXMgPSAnKSdcbnZhciBsb3dlcmNhc2VYID0gJ3gnXG5cbnZhciB0YWJTaXplID0gNFxudmFyIGxvb3NlTGlzdEl0ZW1FeHByZXNzaW9uID0gL1xcblxcbig/IVxccyokKS9cbnZhciB0YXNrSXRlbUV4cHJlc3Npb24gPSAvXlxcWyhbIFxcdF18eHxYKV1bIFxcdF0vXG52YXIgYnVsbGV0RXhwcmVzc2lvbiA9IC9eKFsgXFx0XSopKFsqKy1dfFxcZCtbLildKSggezEsNH0oPyEgKXwgfFxcdHwkfCg/PVxcbikpKFteXFxuXSopL1xudmFyIHBlZGFudGljQnVsbGV0RXhwcmVzc2lvbiA9IC9eKFsgXFx0XSopKFsqKy1dfFxcZCtbLildKShbIFxcdF0rKS9cbnZhciBpbml0aWFsSW5kZW50RXhwcmVzc2lvbiA9IC9eKCB7MSw0fXxcXHQpPy9nbVxuXG5mdW5jdGlvbiBsaXN0KGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGNvbW1vbm1hcmsgPSBzZWxmLm9wdGlvbnMuY29tbW9ubWFya1xuICB2YXIgcGVkYW50aWMgPSBzZWxmLm9wdGlvbnMucGVkYW50aWNcbiAgdmFyIHRva2VuaXplcnMgPSBzZWxmLmJsb2NrVG9rZW5pemVyc1xuICB2YXIgaW50ZXJ1cHRvcnMgPSBzZWxmLmludGVycnVwdExpc3RcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoXG4gIHZhciBzdGFydCA9IG51bGxcbiAgdmFyIHNpemUgPSAwXG4gIHZhciBxdWV1ZVxuICB2YXIgb3JkZXJlZFxuICB2YXIgY2hhcmFjdGVyXG4gIHZhciBtYXJrZXJcbiAgdmFyIG5leHRJbmRleFxuICB2YXIgc3RhcnRJbmRleFxuICB2YXIgcHJlZml4ZWRcbiAgdmFyIGN1cnJlbnRNYXJrZXJcbiAgdmFyIGNvbnRlbnRcbiAgdmFyIGxpbmVcbiAgdmFyIHByZXZFbXB0eVxuICB2YXIgZW1wdHlcbiAgdmFyIGl0ZW1zXG4gIHZhciBhbGxMaW5lc1xuICB2YXIgZW1wdHlMaW5lc1xuICB2YXIgaXRlbVxuICB2YXIgZW50ZXJUb3BcbiAgdmFyIGV4aXRCbG9ja3F1b3RlXG4gIHZhciBzcHJlYWQgPSBmYWxzZVxuICB2YXIgbm9kZVxuICB2YXIgbm93XG4gIHZhciBlbmRcbiAgdmFyIGluZGVudGVkXG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgaWYgKGNoYXJhY3RlciA9PT0gdGFiKSB7XG4gICAgICBzaXplICs9IHRhYlNpemUgLSAoc2l6ZSAlIHRhYlNpemUpXG4gICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IHNwYWNlKSB7XG4gICAgICBzaXplKytcbiAgICB9IGVsc2Uge1xuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBpbmRleCsrXG4gIH1cblxuICBpZiAoc2l6ZSA+PSB0YWJTaXplKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgaWYgKGNoYXJhY3RlciA9PT0gYXN0ZXJpc2sgfHwgY2hhcmFjdGVyID09PSBwbHVzU2lnbiB8fCBjaGFyYWN0ZXIgPT09IGRhc2gpIHtcbiAgICBtYXJrZXIgPSBjaGFyYWN0ZXJcbiAgICBvcmRlcmVkID0gZmFsc2VcbiAgfSBlbHNlIHtcbiAgICBvcmRlcmVkID0gdHJ1ZVxuICAgIHF1ZXVlID0gJydcblxuICAgIHdoaWxlIChpbmRleCA8IGxlbmd0aCkge1xuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgICBpZiAoIWRlY2ltYWwoY2hhcmFjdGVyKSkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBxdWV1ZSArPSBjaGFyYWN0ZXJcbiAgICAgIGluZGV4KytcbiAgICB9XG5cbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICBpZiAoXG4gICAgICAhcXVldWUgfHxcbiAgICAgICEoY2hhcmFjdGVyID09PSBkb3QgfHwgKGNvbW1vbm1hcmsgJiYgY2hhcmFjdGVyID09PSByaWdodFBhcmVudGhlc2lzKSlcbiAgICApIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHN0YXJ0ID0gcGFyc2VJbnQocXVldWUsIDEwKVxuICAgIG1hcmtlciA9IGNoYXJhY3RlclxuICB9XG5cbiAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpXG5cbiAgaWYgKFxuICAgIGNoYXJhY3RlciAhPT0gc3BhY2UgJiZcbiAgICBjaGFyYWN0ZXIgIT09IHRhYiAmJlxuICAgIChwZWRhbnRpYyB8fCAoY2hhcmFjdGVyICE9PSBsaW5lRmVlZCAmJiBjaGFyYWN0ZXIgIT09ICcnKSlcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGluZGV4ID0gMFxuICBpdGVtcyA9IFtdXG4gIGFsbExpbmVzID0gW11cbiAgZW1wdHlMaW5lcyA9IFtdXG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgbmV4dEluZGV4ID0gdmFsdWUuaW5kZXhPZihsaW5lRmVlZCwgaW5kZXgpXG4gICAgc3RhcnRJbmRleCA9IGluZGV4XG4gICAgcHJlZml4ZWQgPSBmYWxzZVxuICAgIGluZGVudGVkID0gZmFsc2VcblxuICAgIGlmIChuZXh0SW5kZXggPT09IC0xKSB7XG4gICAgICBuZXh0SW5kZXggPSBsZW5ndGhcbiAgICB9XG5cbiAgICBlbmQgPSBpbmRleCArIHRhYlNpemVcbiAgICBzaXplID0gMFxuXG4gICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICAgIGlmIChjaGFyYWN0ZXIgPT09IHRhYikge1xuICAgICAgICBzaXplICs9IHRhYlNpemUgLSAoc2l6ZSAlIHRhYlNpemUpXG4gICAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gc3BhY2UpIHtcbiAgICAgICAgc2l6ZSsrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBpbmRleCsrXG4gICAgfVxuXG4gICAgaWYgKHNpemUgPj0gdGFiU2l6ZSkge1xuICAgICAgaW5kZW50ZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgaWYgKGl0ZW0gJiYgc2l6ZSA+PSBpdGVtLmluZGVudCkge1xuICAgICAgaW5kZW50ZWQgPSB0cnVlXG4gICAgfVxuXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuICAgIGN1cnJlbnRNYXJrZXIgPSBudWxsXG5cbiAgICBpZiAoIWluZGVudGVkKSB7XG4gICAgICBpZiAoXG4gICAgICAgIGNoYXJhY3RlciA9PT0gYXN0ZXJpc2sgfHxcbiAgICAgICAgY2hhcmFjdGVyID09PSBwbHVzU2lnbiB8fFxuICAgICAgICBjaGFyYWN0ZXIgPT09IGRhc2hcbiAgICAgICkge1xuICAgICAgICBjdXJyZW50TWFya2VyID0gY2hhcmFjdGVyXG4gICAgICAgIGluZGV4KytcbiAgICAgICAgc2l6ZSsrXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBxdWV1ZSA9ICcnXG5cbiAgICAgICAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgICAgICAgaWYgKCFkZWNpbWFsKGNoYXJhY3RlcikpIHtcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcXVldWUgKz0gY2hhcmFjdGVyXG4gICAgICAgICAgaW5kZXgrK1xuICAgICAgICB9XG5cbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuICAgICAgICBpbmRleCsrXG5cbiAgICAgICAgaWYgKFxuICAgICAgICAgIHF1ZXVlICYmXG4gICAgICAgICAgKGNoYXJhY3RlciA9PT0gZG90IHx8IChjb21tb25tYXJrICYmIGNoYXJhY3RlciA9PT0gcmlnaHRQYXJlbnRoZXNpcykpXG4gICAgICAgICkge1xuICAgICAgICAgIGN1cnJlbnRNYXJrZXIgPSBjaGFyYWN0ZXJcbiAgICAgICAgICBzaXplICs9IHF1ZXVlLmxlbmd0aCArIDFcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAoY3VycmVudE1hcmtlcikge1xuICAgICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICAgICAgaWYgKGNoYXJhY3RlciA9PT0gdGFiKSB7XG4gICAgICAgICAgc2l6ZSArPSB0YWJTaXplIC0gKHNpemUgJSB0YWJTaXplKVxuICAgICAgICAgIGluZGV4KytcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IHNwYWNlKSB7XG4gICAgICAgICAgZW5kID0gaW5kZXggKyB0YWJTaXplXG5cbiAgICAgICAgICB3aGlsZSAoaW5kZXggPCBlbmQpIHtcbiAgICAgICAgICAgIGlmICh2YWx1ZS5jaGFyQXQoaW5kZXgpICE9PSBzcGFjZSkge1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBpbmRleCsrXG4gICAgICAgICAgICBzaXplKytcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaW5kZXggPT09IGVuZCAmJiB2YWx1ZS5jaGFyQXQoaW5kZXgpID09PSBzcGFjZSkge1xuICAgICAgICAgICAgaW5kZXggLT0gdGFiU2l6ZSAtIDFcbiAgICAgICAgICAgIHNpemUgLT0gdGFiU2l6ZSAtIDFcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoY2hhcmFjdGVyICE9PSBsaW5lRmVlZCAmJiBjaGFyYWN0ZXIgIT09ICcnKSB7XG4gICAgICAgICAgY3VycmVudE1hcmtlciA9IG51bGxcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjdXJyZW50TWFya2VyKSB7XG4gICAgICBpZiAoIXBlZGFudGljICYmIG1hcmtlciAhPT0gY3VycmVudE1hcmtlcikge1xuICAgICAgICBicmVha1xuICAgICAgfVxuXG4gICAgICBwcmVmaXhlZCA9IHRydWVcbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKCFjb21tb25tYXJrICYmICFpbmRlbnRlZCAmJiB2YWx1ZS5jaGFyQXQoc3RhcnRJbmRleCkgPT09IHNwYWNlKSB7XG4gICAgICAgIGluZGVudGVkID0gdHJ1ZVxuICAgICAgfSBlbHNlIGlmIChjb21tb25tYXJrICYmIGl0ZW0pIHtcbiAgICAgICAgaW5kZW50ZWQgPSBzaXplID49IGl0ZW0uaW5kZW50IHx8IHNpemUgPiB0YWJTaXplXG4gICAgICB9XG5cbiAgICAgIHByZWZpeGVkID0gZmFsc2VcbiAgICAgIGluZGV4ID0gc3RhcnRJbmRleFxuICAgIH1cblxuICAgIGxpbmUgPSB2YWx1ZS5zbGljZShzdGFydEluZGV4LCBuZXh0SW5kZXgpXG4gICAgY29udGVudCA9IHN0YXJ0SW5kZXggPT09IGluZGV4ID8gbGluZSA6IHZhbHVlLnNsaWNlKGluZGV4LCBuZXh0SW5kZXgpXG5cbiAgICBpZiAoXG4gICAgICBjdXJyZW50TWFya2VyID09PSBhc3RlcmlzayB8fFxuICAgICAgY3VycmVudE1hcmtlciA9PT0gdW5kZXJzY29yZSB8fFxuICAgICAgY3VycmVudE1hcmtlciA9PT0gZGFzaFxuICAgICkge1xuICAgICAgaWYgKHRva2VuaXplcnMudGhlbWF0aWNCcmVhay5jYWxsKHNlbGYsIGVhdCwgbGluZSwgdHJ1ZSkpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwcmV2RW1wdHkgPSBlbXB0eVxuICAgIGVtcHR5ID0gIXByZWZpeGVkICYmICF0cmltKGNvbnRlbnQpLmxlbmd0aFxuXG4gICAgaWYgKGluZGVudGVkICYmIGl0ZW0pIHtcbiAgICAgIGl0ZW0udmFsdWUgPSBpdGVtLnZhbHVlLmNvbmNhdChlbXB0eUxpbmVzLCBsaW5lKVxuICAgICAgYWxsTGluZXMgPSBhbGxMaW5lcy5jb25jYXQoZW1wdHlMaW5lcywgbGluZSlcbiAgICAgIGVtcHR5TGluZXMgPSBbXVxuICAgIH0gZWxzZSBpZiAocHJlZml4ZWQpIHtcbiAgICAgIGlmIChlbXB0eUxpbmVzLmxlbmd0aCAhPT0gMCkge1xuICAgICAgICBzcHJlYWQgPSB0cnVlXG4gICAgICAgIGl0ZW0udmFsdWUucHVzaCgnJylcbiAgICAgICAgaXRlbS50cmFpbCA9IGVtcHR5TGluZXMuY29uY2F0KClcbiAgICAgIH1cblxuICAgICAgaXRlbSA9IHtcbiAgICAgICAgdmFsdWU6IFtsaW5lXSxcbiAgICAgICAgaW5kZW50OiBzaXplLFxuICAgICAgICB0cmFpbDogW11cbiAgICAgIH1cblxuICAgICAgaXRlbXMucHVzaChpdGVtKVxuICAgICAgYWxsTGluZXMgPSBhbGxMaW5lcy5jb25jYXQoZW1wdHlMaW5lcywgbGluZSlcbiAgICAgIGVtcHR5TGluZXMgPSBbXVxuICAgIH0gZWxzZSBpZiAoZW1wdHkpIHtcbiAgICAgIGlmIChwcmV2RW1wdHkgJiYgIWNvbW1vbm1hcmspIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgZW1wdHlMaW5lcy5wdXNoKGxpbmUpXG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChwcmV2RW1wdHkpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cblxuICAgICAgaWYgKGludGVycnVwdChpbnRlcnVwdG9ycywgdG9rZW5pemVycywgc2VsZiwgW2VhdCwgbGluZSwgdHJ1ZV0pKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG5cbiAgICAgIGl0ZW0udmFsdWUgPSBpdGVtLnZhbHVlLmNvbmNhdChlbXB0eUxpbmVzLCBsaW5lKVxuICAgICAgYWxsTGluZXMgPSBhbGxMaW5lcy5jb25jYXQoZW1wdHlMaW5lcywgbGluZSlcbiAgICAgIGVtcHR5TGluZXMgPSBbXVxuICAgIH1cblxuICAgIGluZGV4ID0gbmV4dEluZGV4ICsgMVxuICB9XG5cbiAgbm9kZSA9IGVhdChhbGxMaW5lcy5qb2luKGxpbmVGZWVkKSkucmVzZXQoe1xuICAgIHR5cGU6ICdsaXN0JyxcbiAgICBvcmRlcmVkOiBvcmRlcmVkLFxuICAgIHN0YXJ0OiBzdGFydCxcbiAgICBzcHJlYWQ6IHNwcmVhZCxcbiAgICBjaGlsZHJlbjogW11cbiAgfSlcblxuICBlbnRlclRvcCA9IHNlbGYuZW50ZXJMaXN0KClcbiAgZXhpdEJsb2NrcXVvdGUgPSBzZWxmLmVudGVyQmxvY2soKVxuICBpbmRleCA9IC0xXG4gIGxlbmd0aCA9IGl0ZW1zLmxlbmd0aFxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaXRlbSA9IGl0ZW1zW2luZGV4XS52YWx1ZS5qb2luKGxpbmVGZWVkKVxuICAgIG5vdyA9IGVhdC5ub3coKVxuXG4gICAgZWF0KGl0ZW0pKGxpc3RJdGVtKHNlbGYsIGl0ZW0sIG5vdyksIG5vZGUpXG5cbiAgICBpdGVtID0gaXRlbXNbaW5kZXhdLnRyYWlsLmpvaW4obGluZUZlZWQpXG5cbiAgICBpZiAoaW5kZXggIT09IGxlbmd0aCAtIDEpIHtcbiAgICAgIGl0ZW0gKz0gbGluZUZlZWRcbiAgICB9XG5cbiAgICBlYXQoaXRlbSlcbiAgfVxuXG4gIGVudGVyVG9wKClcbiAgZXhpdEJsb2NrcXVvdGUoKVxuXG4gIHJldHVybiBub2RlXG59XG5cbmZ1bmN0aW9uIGxpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldFxuICB2YXIgZm4gPSBjdHgub3B0aW9ucy5wZWRhbnRpYyA/IHBlZGFudGljTGlzdEl0ZW0gOiBub3JtYWxMaXN0SXRlbVxuICB2YXIgY2hlY2tlZCA9IG51bGxcbiAgdmFyIHRhc2tcbiAgdmFyIGluZGVudFxuXG4gIHZhbHVlID0gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKVxuXG4gIGlmIChjdHgub3B0aW9ucy5nZm0pIHtcbiAgICB0YXNrID0gdmFsdWUubWF0Y2godGFza0l0ZW1FeHByZXNzaW9uKVxuXG4gICAgaWYgKHRhc2spIHtcbiAgICAgIGluZGVudCA9IHRhc2tbMF0ubGVuZ3RoXG4gICAgICBjaGVja2VkID0gdGFza1sxXS50b0xvd2VyQ2FzZSgpID09PSBsb3dlcmNhc2VYXG4gICAgICBvZmZzZXRzW3Bvc2l0aW9uLmxpbmVdICs9IGluZGVudFxuICAgICAgdmFsdWUgPSB2YWx1ZS5zbGljZShpbmRlbnQpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICB0eXBlOiAnbGlzdEl0ZW0nLFxuICAgIHNwcmVhZDogbG9vc2VMaXN0SXRlbUV4cHJlc3Npb24udGVzdCh2YWx1ZSksXG4gICAgY2hlY2tlZDogY2hlY2tlZCxcbiAgICBjaGlsZHJlbjogY3R4LnRva2VuaXplQmxvY2sodmFsdWUsIHBvc2l0aW9uKVxuICB9XG59XG5cbi8vIENyZWF0ZSBhIGxpc3QtaXRlbSB1c2luZyBvdmVybHkgc2ltcGxlIG1lY2hhbmljcy5cbmZ1bmN0aW9uIHBlZGFudGljTGlzdEl0ZW0oY3R4LCB2YWx1ZSwgcG9zaXRpb24pIHtcbiAgdmFyIG9mZnNldHMgPSBjdHgub2Zmc2V0XG4gIHZhciBsaW5lID0gcG9zaXRpb24ubGluZVxuXG4gIC8vIFJlbW92ZSB0aGUgbGlzdC1pdGVt4oCZcyBidWxsZXQuXG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShwZWRhbnRpY0J1bGxldEV4cHJlc3Npb24sIHJlcGxhY2VyKVxuXG4gIC8vIFRoZSBpbml0aWFsIGxpbmUgd2FzIGFsc28gbWF0Y2hlZCBieSB0aGUgYmVsb3csIHNvIHdlIHJlc2V0IHRoZSBgbGluZWAuXG4gIGxpbmUgPSBwb3NpdGlvbi5saW5lXG5cbiAgcmV0dXJuIHZhbHVlLnJlcGxhY2UoaW5pdGlhbEluZGVudEV4cHJlc3Npb24sIHJlcGxhY2VyKVxuXG4gIC8vIEEgc2ltcGxlIHJlcGxhY2VyIHdoaWNoIHJlbW92ZWQgYWxsIG1hdGNoZXMsIGFuZCBhZGRzIHRoZWlyIGxlbmd0aCB0b1xuICAvLyBgb2Zmc2V0YC5cbiAgZnVuY3Rpb24gcmVwbGFjZXIoJDApIHtcbiAgICBvZmZzZXRzW2xpbmVdID0gKG9mZnNldHNbbGluZV0gfHwgMCkgKyAkMC5sZW5ndGhcbiAgICBsaW5lKytcblxuICAgIHJldHVybiAnJ1xuICB9XG59XG5cbi8vIENyZWF0ZSBhIGxpc3QtaXRlbSB1c2luZyBzYW5lIG1lY2hhbmljcy5cbmZ1bmN0aW9uIG5vcm1hbExpc3RJdGVtKGN0eCwgdmFsdWUsIHBvc2l0aW9uKSB7XG4gIHZhciBvZmZzZXRzID0gY3R4Lm9mZnNldFxuICB2YXIgbGluZSA9IHBvc2l0aW9uLmxpbmVcbiAgdmFyIG1heFxuICB2YXIgYnVsbGV0XG4gIHZhciByZXN0XG4gIHZhciBsaW5lc1xuICB2YXIgdHJpbW1lZExpbmVzXG4gIHZhciBpbmRleFxuICB2YXIgbGVuZ3RoXG5cbiAgLy8gUmVtb3ZlIHRoZSBsaXN0LWl0ZW3igJlzIGJ1bGxldC5cbiAgdmFsdWUgPSB2YWx1ZS5yZXBsYWNlKGJ1bGxldEV4cHJlc3Npb24sIHJlcGxhY2VyKVxuXG4gIGxpbmVzID0gdmFsdWUuc3BsaXQobGluZUZlZWQpXG5cbiAgdHJpbW1lZExpbmVzID0gcmVtb3ZlSW5kZW50KHZhbHVlLCBnZXRJbmRlbnQobWF4KS5pbmRlbnQpLnNwbGl0KGxpbmVGZWVkKVxuXG4gIC8vIFdlIHJlcGxhY2VkIHRoZSBpbml0aWFsIGJ1bGxldCB3aXRoIHNvbWV0aGluZyBlbHNlIGFib3ZlLCB3aGljaCB3YXMgdXNlZFxuICAvLyB0byB0cmljayBgcmVtb3ZlSW5kZW50YXRpb25gIGludG8gcmVtb3Zpbmcgc29tZSBtb3JlIGNoYXJhY3RlcnMgd2hlblxuICAvLyBwb3NzaWJsZS4gIEhvd2V2ZXIsIHRoYXQgY291bGQgcmVzdWx0IGluIHRoZSBpbml0aWFsIGxpbmUgdG8gYmUgc3RyaXBwZWRcbiAgLy8gbW9yZSB0aGFuIGl0IHNob3VsZCBiZS5cbiAgdHJpbW1lZExpbmVzWzBdID0gcmVzdFxuXG4gIG9mZnNldHNbbGluZV0gPSAob2Zmc2V0c1tsaW5lXSB8fCAwKSArIGJ1bGxldC5sZW5ndGhcbiAgbGluZSsrXG5cbiAgaW5kZXggPSAwXG4gIGxlbmd0aCA9IGxpbmVzLmxlbmd0aFxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2Zmc2V0c1tsaW5lXSA9XG4gICAgICAob2Zmc2V0c1tsaW5lXSB8fCAwKSArIGxpbmVzW2luZGV4XS5sZW5ndGggLSB0cmltbWVkTGluZXNbaW5kZXhdLmxlbmd0aFxuICAgIGxpbmUrK1xuICB9XG5cbiAgcmV0dXJuIHRyaW1tZWRMaW5lcy5qb2luKGxpbmVGZWVkKVxuXG4gIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBtYXgtcGFyYW1zICovXG4gIGZ1bmN0aW9uIHJlcGxhY2VyKCQwLCAkMSwgJDIsICQzLCAkNCkge1xuICAgIGJ1bGxldCA9ICQxICsgJDIgKyAkM1xuICAgIHJlc3QgPSAkNFxuXG4gICAgLy8gTWFrZSBzdXJlIHRoYXQgdGhlIGZpcnN0IG5pbmUgbnVtYmVyZWQgbGlzdCBpdGVtcyBjYW4gaW5kZW50IHdpdGggYW5cbiAgICAvLyBleHRyYSBzcGFjZS4gIFRoYXQgaXMsIHdoZW4gdGhlIGJ1bGxldCBkaWQgbm90IHJlY2VpdmUgYW4gZXh0cmEgZmluYWxcbiAgICAvLyBzcGFjZS5cbiAgICBpZiAoTnVtYmVyKCQyKSA8IDEwICYmIGJ1bGxldC5sZW5ndGggJSAyID09PSAxKSB7XG4gICAgICAkMiA9IHNwYWNlICsgJDJcbiAgICB9XG5cbiAgICBtYXggPSAkMSArIHJlcGVhdChzcGFjZSwgJDIubGVuZ3RoKSArICQzXG5cbiAgICByZXR1cm4gbWF4ICsgcmVzdFxuICB9XG59XG4iXSwibmFtZXMiOlsidHJpbSIsInJlcXVpcmUiLCJyZXBlYXQiLCJkZWNpbWFsIiwiZ2V0SW5kZW50IiwicmVtb3ZlSW5kZW50IiwiaW50ZXJydXB0IiwibW9kdWxlIiwiZXhwb3J0cyIsImxpc3QiLCJhc3RlcmlzayIsInVuZGVyc2NvcmUiLCJwbHVzU2lnbiIsImRhc2giLCJkb3QiLCJzcGFjZSIsImxpbmVGZWVkIiwidGFiIiwicmlnaHRQYXJlbnRoZXNpcyIsImxvd2VyY2FzZVgiLCJ0YWJTaXplIiwibG9vc2VMaXN0SXRlbUV4cHJlc3Npb24iLCJ0YXNrSXRlbUV4cHJlc3Npb24iLCJidWxsZXRFeHByZXNzaW9uIiwicGVkYW50aWNCdWxsZXRFeHByZXNzaW9uIiwiaW5pdGlhbEluZGVudEV4cHJlc3Npb24iLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsInNlbGYiLCJjb21tb25tYXJrIiwib3B0aW9ucyIsInBlZGFudGljIiwidG9rZW5pemVycyIsImJsb2NrVG9rZW5pemVycyIsImludGVydXB0b3JzIiwiaW50ZXJydXB0TGlzdCIsImluZGV4IiwibGVuZ3RoIiwic3RhcnQiLCJzaXplIiwicXVldWUiLCJvcmRlcmVkIiwiY2hhcmFjdGVyIiwibWFya2VyIiwibmV4dEluZGV4Iiwic3RhcnRJbmRleCIsInByZWZpeGVkIiwiY3VycmVudE1hcmtlciIsImNvbnRlbnQiLCJsaW5lIiwicHJldkVtcHR5IiwiZW1wdHkiLCJpdGVtcyIsImFsbExpbmVzIiwiZW1wdHlMaW5lcyIsIml0ZW0iLCJlbnRlclRvcCIsImV4aXRCbG9ja3F1b3RlIiwic3ByZWFkIiwibm9kZSIsIm5vdyIsImVuZCIsImluZGVudGVkIiwiY2hhckF0IiwicGFyc2VJbnQiLCJpbmRleE9mIiwiaW5kZW50Iiwic2xpY2UiLCJ0aGVtYXRpY0JyZWFrIiwiY2FsbCIsImNvbmNhdCIsInB1c2giLCJ0cmFpbCIsImpvaW4iLCJyZXNldCIsInR5cGUiLCJjaGlsZHJlbiIsImVudGVyTGlzdCIsImVudGVyQmxvY2siLCJsaXN0SXRlbSIsImN0eCIsInBvc2l0aW9uIiwib2Zmc2V0cyIsIm9mZnNldCIsImZuIiwicGVkYW50aWNMaXN0SXRlbSIsIm5vcm1hbExpc3RJdGVtIiwiY2hlY2tlZCIsInRhc2siLCJhcHBseSIsImFyZ3VtZW50cyIsImdmbSIsIm1hdGNoIiwidG9Mb3dlckNhc2UiLCJ0ZXN0IiwidG9rZW5pemVCbG9jayIsInJlcGxhY2UiLCJyZXBsYWNlciIsIiQwIiwibWF4IiwiYnVsbGV0IiwicmVzdCIsImxpbmVzIiwidHJpbW1lZExpbmVzIiwic3BsaXQiLCIkMSIsIiQyIiwiJDMiLCIkNCIsIk51bWJlciJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/list.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/newline.js":
/*!***********************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/newline.js ***!
  \***********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nmodule.exports = newline;\nvar lineFeed = \"\\n\";\nfunction newline(eat, value, silent) {\n    var character = value.charAt(0);\n    var length;\n    var subvalue;\n    var queue;\n    var index;\n    if (character !== lineFeed) {\n        return;\n    }\n    /* istanbul ignore if - never used (yet) */ if (silent) {\n        return true;\n    }\n    index = 1;\n    length = value.length;\n    subvalue = character;\n    queue = \"\";\n    while(index < length){\n        character = value.charAt(index);\n        if (!whitespace(character)) {\n            break;\n        }\n        queue += character;\n        if (character === lineFeed) {\n            subvalue += queue;\n            queue = \"\";\n        }\n        index++;\n    }\n    eat(subvalue);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9uZXdsaW5lLmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUEsSUFBSUEsYUFBYUMsbUJBQU9BLENBQUM7QUFFekJDLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsSUFBSUMsV0FBVztBQUVmLFNBQVNELFFBQVFFLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQ2pDLElBQUlDLFlBQVlGLE1BQU1HLE1BQU0sQ0FBQztJQUM3QixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUVKLElBQUlMLGNBQWNKLFVBQVU7UUFDMUI7SUFDRjtJQUVBLHlDQUF5QyxHQUN6QyxJQUFJRyxRQUFRO1FBQ1YsT0FBTztJQUNUO0lBRUFNLFFBQVE7SUFDUkgsU0FBU0osTUFBTUksTUFBTTtJQUNyQkMsV0FBV0g7SUFDWEksUUFBUTtJQUVSLE1BQU9DLFFBQVFILE9BQVE7UUFDckJGLFlBQVlGLE1BQU1HLE1BQU0sQ0FBQ0k7UUFFekIsSUFBSSxDQUFDZCxXQUFXUyxZQUFZO1lBQzFCO1FBQ0Y7UUFFQUksU0FBU0o7UUFFVCxJQUFJQSxjQUFjSixVQUFVO1lBQzFCTyxZQUFZQztZQUNaQSxRQUFRO1FBQ1Y7UUFFQUM7SUFDRjtJQUVBUixJQUFJTTtBQUNOIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9uZXdsaW5lLmpzPzM4ZjYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciB3aGl0ZXNwYWNlID0gcmVxdWlyZSgnaXMtd2hpdGVzcGFjZS1jaGFyYWN0ZXInKVxuXG5tb2R1bGUuZXhwb3J0cyA9IG5ld2xpbmVcblxudmFyIGxpbmVGZWVkID0gJ1xcbidcblxuZnVuY3Rpb24gbmV3bGluZShlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgwKVxuICB2YXIgbGVuZ3RoXG4gIHZhciBzdWJ2YWx1ZVxuICB2YXIgcXVldWVcbiAgdmFyIGluZGV4XG5cbiAgaWYgKGNoYXJhY3RlciAhPT0gbGluZUZlZWQpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBpbmRleCA9IDFcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoXG4gIHN1YnZhbHVlID0gY2hhcmFjdGVyXG4gIHF1ZXVlID0gJydcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG5cbiAgICBpZiAoIXdoaXRlc3BhY2UoY2hhcmFjdGVyKSkge1xuICAgICAgYnJlYWtcbiAgICB9XG5cbiAgICBxdWV1ZSArPSBjaGFyYWN0ZXJcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IGxpbmVGZWVkKSB7XG4gICAgICBzdWJ2YWx1ZSArPSBxdWV1ZVxuICAgICAgcXVldWUgPSAnJ1xuICAgIH1cblxuICAgIGluZGV4KytcbiAgfVxuXG4gIGVhdChzdWJ2YWx1ZSlcbn1cbiJdLCJuYW1lcyI6WyJ3aGl0ZXNwYWNlIiwicmVxdWlyZSIsIm1vZHVsZSIsImV4cG9ydHMiLCJuZXdsaW5lIiwibGluZUZlZWQiLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsImNoYXJhY3RlciIsImNoYXJBdCIsImxlbmd0aCIsInN1YnZhbHVlIiwicXVldWUiLCJpbmRleCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/newline.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/paragraph.js":
/*!*************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/paragraph.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar trim = __webpack_require__(/*! trim */ \"(rsc)/./node_modules/trim/index.js\");\nvar decimal = __webpack_require__(/*! is-decimal */ \"(rsc)/./node_modules/is-decimal/index.js\");\nvar trimTrailingLines = __webpack_require__(/*! trim-trailing-lines */ \"(rsc)/./node_modules/trim-trailing-lines/index.js\");\nvar interrupt = __webpack_require__(/*! ../util/interrupt */ \"(rsc)/./node_modules/remark-parse/lib/util/interrupt.js\");\nmodule.exports = paragraph;\nvar tab = \"\t\";\nvar lineFeed = \"\\n\";\nvar space = \" \";\nvar tabSize = 4;\n// Tokenise paragraph.\nfunction paragraph(eat, value, silent) {\n    var self = this;\n    var settings = self.options;\n    var commonmark = settings.commonmark;\n    var gfm = settings.gfm;\n    var tokenizers = self.blockTokenizers;\n    var interruptors = self.interruptParagraph;\n    var index = value.indexOf(lineFeed);\n    var length = value.length;\n    var position;\n    var subvalue;\n    var character;\n    var size;\n    var now;\n    while(index < length){\n        // Eat everything if there’s no following newline.\n        if (index === -1) {\n            index = length;\n            break;\n        }\n        // Stop if the next character is NEWLINE.\n        if (value.charAt(index + 1) === lineFeed) {\n            break;\n        }\n        // In commonmark-mode, following indented lines are part of the paragraph.\n        if (commonmark) {\n            size = 0;\n            position = index + 1;\n            while(position < length){\n                character = value.charAt(position);\n                if (character === tab) {\n                    size = tabSize;\n                    break;\n                } else if (character === space) {\n                    size++;\n                } else {\n                    break;\n                }\n                position++;\n            }\n            if (size >= tabSize && character !== lineFeed) {\n                index = value.indexOf(lineFeed, index + 1);\n                continue;\n            }\n        }\n        subvalue = value.slice(index + 1);\n        // Check if the following code contains a possible block.\n        if (interrupt(interruptors, tokenizers, self, [\n            eat,\n            subvalue,\n            true\n        ])) {\n            break;\n        }\n        // Break if the following line starts a list, when already in a list, or\n        // when in commonmark, or when in gfm mode and the bullet is *not* numeric.\n        if (tokenizers.list.call(self, eat, subvalue, true) && (self.inList || commonmark || gfm && !decimal(trim.left(subvalue).charAt(0)))) {\n            break;\n        }\n        position = index;\n        index = value.indexOf(lineFeed, index + 1);\n        if (index !== -1 && trim(value.slice(position, index)) === \"\") {\n            index = position;\n            break;\n        }\n    }\n    subvalue = value.slice(0, index);\n    if (trim(subvalue) === \"\") {\n        eat(subvalue);\n        return null;\n    }\n    /* istanbul ignore if - never used (yet) */ if (silent) {\n        return true;\n    }\n    now = eat.now();\n    subvalue = trimTrailingLines(subvalue);\n    return eat(subvalue)({\n        type: \"paragraph\",\n        children: self.tokenizeInline(subvalue, now)\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9wYXJhZ3JhcGguanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxVQUFVRCxtQkFBT0EsQ0FBQztBQUN0QixJQUFJRSxvQkFBb0JGLG1CQUFPQSxDQUFDO0FBQ2hDLElBQUlHLFlBQVlILG1CQUFPQSxDQUFDO0FBRXhCSSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLE1BQU07QUFDVixJQUFJQyxXQUFXO0FBQ2YsSUFBSUMsUUFBUTtBQUVaLElBQUlDLFVBQVU7QUFFZCxzQkFBc0I7QUFDdEIsU0FBU0osVUFBVUssR0FBRyxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDbkMsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSUMsV0FBV0QsS0FBS0UsT0FBTztJQUMzQixJQUFJQyxhQUFhRixTQUFTRSxVQUFVO0lBQ3BDLElBQUlDLE1BQU1ILFNBQVNHLEdBQUc7SUFDdEIsSUFBSUMsYUFBYUwsS0FBS00sZUFBZTtJQUNyQyxJQUFJQyxlQUFlUCxLQUFLUSxrQkFBa0I7SUFDMUMsSUFBSUMsUUFBUVgsTUFBTVksT0FBTyxDQUFDaEI7SUFDMUIsSUFBSWlCLFNBQVNiLE1BQU1hLE1BQU07SUFDekIsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUVKLE1BQU9QLFFBQVFFLE9BQVE7UUFDckIsa0RBQWtEO1FBQ2xELElBQUlGLFVBQVUsQ0FBQyxHQUFHO1lBQ2hCQSxRQUFRRTtZQUNSO1FBQ0Y7UUFFQSx5Q0FBeUM7UUFDekMsSUFBSWIsTUFBTW1CLE1BQU0sQ0FBQ1IsUUFBUSxPQUFPZixVQUFVO1lBQ3hDO1FBQ0Y7UUFFQSwwRUFBMEU7UUFDMUUsSUFBSVMsWUFBWTtZQUNkWSxPQUFPO1lBQ1BILFdBQVdILFFBQVE7WUFFbkIsTUFBT0csV0FBV0QsT0FBUTtnQkFDeEJHLFlBQVloQixNQUFNbUIsTUFBTSxDQUFDTDtnQkFFekIsSUFBSUUsY0FBY3JCLEtBQUs7b0JBQ3JCc0IsT0FBT25CO29CQUNQO2dCQUNGLE9BQU8sSUFBSWtCLGNBQWNuQixPQUFPO29CQUM5Qm9CO2dCQUNGLE9BQU87b0JBQ0w7Z0JBQ0Y7Z0JBRUFIO1lBQ0Y7WUFFQSxJQUFJRyxRQUFRbkIsV0FBV2tCLGNBQWNwQixVQUFVO2dCQUM3Q2UsUUFBUVgsTUFBTVksT0FBTyxDQUFDaEIsVUFBVWUsUUFBUTtnQkFDeEM7WUFDRjtRQUNGO1FBRUFJLFdBQVdmLE1BQU1vQixLQUFLLENBQUNULFFBQVE7UUFFL0IseURBQXlEO1FBQ3pELElBQUlwQixVQUFVa0IsY0FBY0YsWUFBWUwsTUFBTTtZQUFDSDtZQUFLZ0I7WUFBVTtTQUFLLEdBQUc7WUFDcEU7UUFDRjtRQUVBLHdFQUF3RTtRQUN4RSwyRUFBMkU7UUFDM0UsSUFDRVIsV0FBV2MsSUFBSSxDQUFDQyxJQUFJLENBQUNwQixNQUFNSCxLQUFLZ0IsVUFBVSxTQUN6Q2IsQ0FBQUEsS0FBS3FCLE1BQU0sSUFDVmxCLGNBQ0NDLE9BQU8sQ0FBQ2pCLFFBQVFGLEtBQUtxQyxJQUFJLENBQUNULFVBQVVJLE1BQU0sQ0FBQyxHQUFHLEdBQ2pEO1lBQ0E7UUFDRjtRQUVBTCxXQUFXSDtRQUNYQSxRQUFRWCxNQUFNWSxPQUFPLENBQUNoQixVQUFVZSxRQUFRO1FBRXhDLElBQUlBLFVBQVUsQ0FBQyxLQUFLeEIsS0FBS2EsTUFBTW9CLEtBQUssQ0FBQ04sVUFBVUgsWUFBWSxJQUFJO1lBQzdEQSxRQUFRRztZQUNSO1FBQ0Y7SUFDRjtJQUVBQyxXQUFXZixNQUFNb0IsS0FBSyxDQUFDLEdBQUdUO0lBRTFCLElBQUl4QixLQUFLNEIsY0FBYyxJQUFJO1FBQ3pCaEIsSUFBSWdCO1FBRUosT0FBTztJQUNUO0lBRUEseUNBQXlDLEdBQ3pDLElBQUlkLFFBQVE7UUFDVixPQUFPO0lBQ1Q7SUFFQWlCLE1BQU1uQixJQUFJbUIsR0FBRztJQUNiSCxXQUFXekIsa0JBQWtCeUI7SUFFN0IsT0FBT2hCLElBQUlnQixVQUFVO1FBQ25CVSxNQUFNO1FBQ05DLFVBQVV4QixLQUFLeUIsY0FBYyxDQUFDWixVQUFVRztJQUMxQztBQUNGIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9wYXJhZ3JhcGguanM/M2FkMSJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIHRyaW0gPSByZXF1aXJlKCd0cmltJylcbnZhciBkZWNpbWFsID0gcmVxdWlyZSgnaXMtZGVjaW1hbCcpXG52YXIgdHJpbVRyYWlsaW5nTGluZXMgPSByZXF1aXJlKCd0cmltLXRyYWlsaW5nLWxpbmVzJylcbnZhciBpbnRlcnJ1cHQgPSByZXF1aXJlKCcuLi91dGlsL2ludGVycnVwdCcpXG5cbm1vZHVsZS5leHBvcnRzID0gcGFyYWdyYXBoXG5cbnZhciB0YWIgPSAnXFx0J1xudmFyIGxpbmVGZWVkID0gJ1xcbidcbnZhciBzcGFjZSA9ICcgJ1xuXG52YXIgdGFiU2l6ZSA9IDRcblxuLy8gVG9rZW5pc2UgcGFyYWdyYXBoLlxuZnVuY3Rpb24gcGFyYWdyYXBoKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHNldHRpbmdzID0gc2VsZi5vcHRpb25zXG4gIHZhciBjb21tb25tYXJrID0gc2V0dGluZ3MuY29tbW9ubWFya1xuICB2YXIgZ2ZtID0gc2V0dGluZ3MuZ2ZtXG4gIHZhciB0b2tlbml6ZXJzID0gc2VsZi5ibG9ja1Rva2VuaXplcnNcbiAgdmFyIGludGVycnVwdG9ycyA9IHNlbGYuaW50ZXJydXB0UGFyYWdyYXBoXG4gIHZhciBpbmRleCA9IHZhbHVlLmluZGV4T2YobGluZUZlZWQpXG4gIHZhciBsZW5ndGggPSB2YWx1ZS5sZW5ndGhcbiAgdmFyIHBvc2l0aW9uXG4gIHZhciBzdWJ2YWx1ZVxuICB2YXIgY2hhcmFjdGVyXG4gIHZhciBzaXplXG4gIHZhciBub3dcblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICAvLyBFYXQgZXZlcnl0aGluZyBpZiB0aGVyZeKAmXMgbm8gZm9sbG93aW5nIG5ld2xpbmUuXG4gICAgaWYgKGluZGV4ID09PSAtMSkge1xuICAgICAgaW5kZXggPSBsZW5ndGhcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgLy8gU3RvcCBpZiB0aGUgbmV4dCBjaGFyYWN0ZXIgaXMgTkVXTElORS5cbiAgICBpZiAodmFsdWUuY2hhckF0KGluZGV4ICsgMSkgPT09IGxpbmVGZWVkKSB7XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIC8vIEluIGNvbW1vbm1hcmstbW9kZSwgZm9sbG93aW5nIGluZGVudGVkIGxpbmVzIGFyZSBwYXJ0IG9mIHRoZSBwYXJhZ3JhcGguXG4gICAgaWYgKGNvbW1vbm1hcmspIHtcbiAgICAgIHNpemUgPSAwXG4gICAgICBwb3NpdGlvbiA9IGluZGV4ICsgMVxuXG4gICAgICB3aGlsZSAocG9zaXRpb24gPCBsZW5ndGgpIHtcbiAgICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KHBvc2l0aW9uKVxuXG4gICAgICAgIGlmIChjaGFyYWN0ZXIgPT09IHRhYikge1xuICAgICAgICAgIHNpemUgPSB0YWJTaXplXG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfSBlbHNlIGlmIChjaGFyYWN0ZXIgPT09IHNwYWNlKSB7XG4gICAgICAgICAgc2l6ZSsrXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuXG4gICAgICAgIHBvc2l0aW9uKytcbiAgICAgIH1cblxuICAgICAgaWYgKHNpemUgPj0gdGFiU2l6ZSAmJiBjaGFyYWN0ZXIgIT09IGxpbmVGZWVkKSB7XG4gICAgICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZihsaW5lRmVlZCwgaW5kZXggKyAxKVxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgIH1cblxuICAgIHN1YnZhbHVlID0gdmFsdWUuc2xpY2UoaW5kZXggKyAxKVxuXG4gICAgLy8gQ2hlY2sgaWYgdGhlIGZvbGxvd2luZyBjb2RlIGNvbnRhaW5zIGEgcG9zc2libGUgYmxvY2suXG4gICAgaWYgKGludGVycnVwdChpbnRlcnJ1cHRvcnMsIHRva2VuaXplcnMsIHNlbGYsIFtlYXQsIHN1YnZhbHVlLCB0cnVlXSkpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgLy8gQnJlYWsgaWYgdGhlIGZvbGxvd2luZyBsaW5lIHN0YXJ0cyBhIGxpc3QsIHdoZW4gYWxyZWFkeSBpbiBhIGxpc3QsIG9yXG4gICAgLy8gd2hlbiBpbiBjb21tb25tYXJrLCBvciB3aGVuIGluIGdmbSBtb2RlIGFuZCB0aGUgYnVsbGV0IGlzICpub3QqIG51bWVyaWMuXG4gICAgaWYgKFxuICAgICAgdG9rZW5pemVycy5saXN0LmNhbGwoc2VsZiwgZWF0LCBzdWJ2YWx1ZSwgdHJ1ZSkgJiZcbiAgICAgIChzZWxmLmluTGlzdCB8fFxuICAgICAgICBjb21tb25tYXJrIHx8XG4gICAgICAgIChnZm0gJiYgIWRlY2ltYWwodHJpbS5sZWZ0KHN1YnZhbHVlKS5jaGFyQXQoMCkpKSlcbiAgICApIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgcG9zaXRpb24gPSBpbmRleFxuICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZihsaW5lRmVlZCwgaW5kZXggKyAxKVxuXG4gICAgaWYgKGluZGV4ICE9PSAtMSAmJiB0cmltKHZhbHVlLnNsaWNlKHBvc2l0aW9uLCBpbmRleCkpID09PSAnJykge1xuICAgICAgaW5kZXggPSBwb3NpdGlvblxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBzdWJ2YWx1ZSA9IHZhbHVlLnNsaWNlKDAsIGluZGV4KVxuXG4gIGlmICh0cmltKHN1YnZhbHVlKSA9PT0gJycpIHtcbiAgICBlYXQoc3VidmFsdWUpXG5cbiAgICByZXR1cm4gbnVsbFxuICB9XG5cbiAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICBpZiAoc2lsZW50KSB7XG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIG5vdyA9IGVhdC5ub3coKVxuICBzdWJ2YWx1ZSA9IHRyaW1UcmFpbGluZ0xpbmVzKHN1YnZhbHVlKVxuXG4gIHJldHVybiBlYXQoc3VidmFsdWUpKHtcbiAgICB0eXBlOiAncGFyYWdyYXBoJyxcbiAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShzdWJ2YWx1ZSwgbm93KVxuICB9KVxufVxuIl0sIm5hbWVzIjpbInRyaW0iLCJyZXF1aXJlIiwiZGVjaW1hbCIsInRyaW1UcmFpbGluZ0xpbmVzIiwiaW50ZXJydXB0IiwibW9kdWxlIiwiZXhwb3J0cyIsInBhcmFncmFwaCIsInRhYiIsImxpbmVGZWVkIiwic3BhY2UiLCJ0YWJTaXplIiwiZWF0IiwidmFsdWUiLCJzaWxlbnQiLCJzZWxmIiwic2V0dGluZ3MiLCJvcHRpb25zIiwiY29tbW9ubWFyayIsImdmbSIsInRva2VuaXplcnMiLCJibG9ja1Rva2VuaXplcnMiLCJpbnRlcnJ1cHRvcnMiLCJpbnRlcnJ1cHRQYXJhZ3JhcGgiLCJpbmRleCIsImluZGV4T2YiLCJsZW5ndGgiLCJwb3NpdGlvbiIsInN1YnZhbHVlIiwiY2hhcmFjdGVyIiwic2l6ZSIsIm5vdyIsImNoYXJBdCIsInNsaWNlIiwibGlzdCIsImNhbGwiLCJpbkxpc3QiLCJsZWZ0IiwidHlwZSIsImNoaWxkcmVuIiwidG9rZW5pemVJbmxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/paragraph.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/reference.js":
/*!*************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/reference.js ***!
  \*************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nvar locate = __webpack_require__(/*! ../locate/link */ \"(rsc)/./node_modules/remark-parse/lib/locate/link.js\");\nvar normalize = __webpack_require__(/*! ../util/normalize */ \"(rsc)/./node_modules/remark-parse/lib/util/normalize.js\");\nmodule.exports = reference;\nreference.locator = locate;\nvar link = \"link\";\nvar image = \"image\";\nvar footnote = \"footnote\";\nvar shortcut = \"shortcut\";\nvar collapsed = \"collapsed\";\nvar full = \"full\";\nvar space = \" \";\nvar exclamationMark = \"!\";\nvar leftSquareBracket = \"[\";\nvar backslash = \"\\\\\";\nvar rightSquareBracket = \"]\";\nvar caret = \"^\";\nfunction reference(eat, value, silent) {\n    var self = this;\n    var commonmark = self.options.commonmark;\n    var footnotes = self.options.footnotes;\n    var character = value.charAt(0);\n    var index = 0;\n    var length = value.length;\n    var subvalue = \"\";\n    var intro = \"\";\n    var type = link;\n    var referenceType = shortcut;\n    var content;\n    var identifier;\n    var now;\n    var node;\n    var exit;\n    var queue;\n    var bracketed;\n    var depth;\n    // Check whether we’re eating an image.\n    if (character === exclamationMark) {\n        type = image;\n        intro = character;\n        character = value.charAt(++index);\n    }\n    if (character !== leftSquareBracket) {\n        return;\n    }\n    index++;\n    intro += character;\n    queue = \"\";\n    // Check whether we’re eating a footnote.\n    if (footnotes && value.charAt(index) === caret) {\n        // Exit if `![^` is found, so the `!` will be seen as text after this,\n        // and we’ll enter this function again when `[^` is found.\n        if (type === image) {\n            return;\n        }\n        intro += caret;\n        index++;\n        type = footnote;\n    }\n    // Eat the text.\n    depth = 0;\n    while(index < length){\n        character = value.charAt(index);\n        if (character === leftSquareBracket) {\n            bracketed = true;\n            depth++;\n        } else if (character === rightSquareBracket) {\n            if (!depth) {\n                break;\n            }\n            depth--;\n        }\n        if (character === backslash) {\n            queue += backslash;\n            character = value.charAt(++index);\n        }\n        queue += character;\n        index++;\n    }\n    subvalue = queue;\n    content = queue;\n    character = value.charAt(index);\n    if (character !== rightSquareBracket) {\n        return;\n    }\n    index++;\n    subvalue += character;\n    queue = \"\";\n    if (!commonmark) {\n        // The original markdown syntax definition explicitly allows for whitespace\n        // between the link text and link label; commonmark departs from this, in\n        // part to improve support for shortcut reference links\n        while(index < length){\n            character = value.charAt(index);\n            if (!whitespace(character)) {\n                break;\n            }\n            queue += character;\n            index++;\n        }\n    }\n    character = value.charAt(index);\n    // Inline footnotes cannot have a label.\n    // If footnotes are enabled, link labels cannot start with a caret.\n    if (type !== footnote && character === leftSquareBracket && (!footnotes || value.charAt(index + 1) !== caret)) {\n        identifier = \"\";\n        queue += character;\n        index++;\n        while(index < length){\n            character = value.charAt(index);\n            if (character === leftSquareBracket || character === rightSquareBracket) {\n                break;\n            }\n            if (character === backslash) {\n                identifier += backslash;\n                character = value.charAt(++index);\n            }\n            identifier += character;\n            index++;\n        }\n        character = value.charAt(index);\n        if (character === rightSquareBracket) {\n            referenceType = identifier ? full : collapsed;\n            queue += identifier + character;\n            index++;\n        } else {\n            identifier = \"\";\n        }\n        subvalue += queue;\n        queue = \"\";\n    } else {\n        if (!content) {\n            return;\n        }\n        identifier = content;\n    }\n    // Brackets cannot be inside the identifier.\n    if (referenceType !== full && bracketed) {\n        return;\n    }\n    subvalue = intro + subvalue;\n    if (type === link && self.inLink) {\n        return null;\n    }\n    /* istanbul ignore if - never used (yet) */ if (silent) {\n        return true;\n    }\n    if (type === footnote && content.indexOf(space) !== -1) {\n        return eat(subvalue)({\n            type: footnote,\n            children: this.tokenizeInline(content, eat.now())\n        });\n    }\n    now = eat.now();\n    now.column += intro.length;\n    now.offset += intro.length;\n    identifier = referenceType === full ? identifier : content;\n    node = {\n        type: type + \"Reference\",\n        identifier: normalize(identifier),\n        label: identifier\n    };\n    if (type === link || type === image) {\n        node.referenceType = referenceType;\n    }\n    if (type === link) {\n        exit = self.enterLink();\n        node.children = self.tokenizeInline(content, now);\n        exit();\n    } else if (type === image) {\n        node.alt = self.decode.raw(self.unescape(content), now) || null;\n    }\n    return eat(subvalue)(node);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/reference.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/strong.js":
/*!**********************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/strong.js ***!
  \**********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar trim = __webpack_require__(/*! trim */ \"(rsc)/./node_modules/trim/index.js\");\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nvar locate = __webpack_require__(/*! ../locate/strong */ \"(rsc)/./node_modules/remark-parse/lib/locate/strong.js\");\nmodule.exports = strong;\nstrong.locator = locate;\nvar backslash = \"\\\\\";\nvar asterisk = \"*\";\nvar underscore = \"_\";\nfunction strong(eat, value, silent) {\n    var self = this;\n    var index = 0;\n    var character = value.charAt(index);\n    var now;\n    var pedantic;\n    var marker;\n    var queue;\n    var subvalue;\n    var length;\n    var prev;\n    if (character !== asterisk && character !== underscore || value.charAt(++index) !== character) {\n        return;\n    }\n    pedantic = self.options.pedantic;\n    marker = character;\n    subvalue = marker + marker;\n    length = value.length;\n    index++;\n    queue = \"\";\n    character = \"\";\n    if (pedantic && whitespace(value.charAt(index))) {\n        return;\n    }\n    while(index < length){\n        prev = character;\n        character = value.charAt(index);\n        if (character === marker && value.charAt(index + 1) === marker && (!pedantic || !whitespace(prev))) {\n            character = value.charAt(index + 2);\n            if (character !== marker) {\n                if (!trim(queue)) {\n                    return;\n                }\n                /* istanbul ignore if - never used (yet) */ if (silent) {\n                    return true;\n                }\n                now = eat.now();\n                now.column += 2;\n                now.offset += 2;\n                return eat(subvalue + queue + subvalue)({\n                    type: \"strong\",\n                    children: self.tokenizeInline(queue, now)\n                });\n            }\n        }\n        if (!pedantic && character === backslash) {\n            queue += character;\n            character = value.charAt(++index);\n        }\n        queue += character;\n        index++;\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS9zdHJvbmcuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxPQUFPQyxtQkFBT0EsQ0FBQztBQUNuQixJQUFJQyxhQUFhRCxtQkFBT0EsQ0FBQztBQUN6QixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUVyQkcsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsT0FBT0MsT0FBTyxHQUFHSjtBQUVqQixJQUFJSyxZQUFZO0FBQ2hCLElBQUlDLFdBQVc7QUFDZixJQUFJQyxhQUFhO0FBRWpCLFNBQVNKLE9BQU9LLEdBQUcsRUFBRUMsS0FBSyxFQUFFQyxNQUFNO0lBQ2hDLElBQUlDLE9BQU8sSUFBSTtJQUNmLElBQUlDLFFBQVE7SUFDWixJQUFJQyxZQUFZSixNQUFNSyxNQUFNLENBQUNGO0lBQzdCLElBQUlHO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBRUosSUFDRSxjQUFlZixZQUFZTyxjQUFjTixjQUN6Q0UsTUFBTUssTUFBTSxDQUFDLEVBQUVGLFdBQVdDLFdBQzFCO1FBQ0E7SUFDRjtJQUVBRyxXQUFXTCxLQUFLVyxPQUFPLENBQUNOLFFBQVE7SUFDaENDLFNBQVNKO0lBQ1RNLFdBQVdGLFNBQVNBO0lBQ3BCRyxTQUFTWCxNQUFNVyxNQUFNO0lBQ3JCUjtJQUNBTSxRQUFRO0lBQ1JMLFlBQVk7SUFFWixJQUFJRyxZQUFZakIsV0FBV1UsTUFBTUssTUFBTSxDQUFDRixTQUFTO1FBQy9DO0lBQ0Y7SUFFQSxNQUFPQSxRQUFRUSxPQUFRO1FBQ3JCQyxPQUFPUjtRQUNQQSxZQUFZSixNQUFNSyxNQUFNLENBQUNGO1FBRXpCLElBQ0VDLGNBQWNJLFVBQ2RSLE1BQU1LLE1BQU0sQ0FBQ0YsUUFBUSxPQUFPSyxVQUMzQixFQUFDRCxZQUFZLENBQUNqQixXQUFXc0IsS0FBSSxHQUM5QjtZQUNBUixZQUFZSixNQUFNSyxNQUFNLENBQUNGLFFBQVE7WUFFakMsSUFBSUMsY0FBY0ksUUFBUTtnQkFDeEIsSUFBSSxDQUFDcEIsS0FBS3FCLFFBQVE7b0JBQ2hCO2dCQUNGO2dCQUVBLHlDQUF5QyxHQUN6QyxJQUFJUixRQUFRO29CQUNWLE9BQU87Z0JBQ1Q7Z0JBRUFLLE1BQU1QLElBQUlPLEdBQUc7Z0JBQ2JBLElBQUlRLE1BQU0sSUFBSTtnQkFDZFIsSUFBSVMsTUFBTSxJQUFJO2dCQUVkLE9BQU9oQixJQUFJVyxXQUFXRCxRQUFRQyxVQUFVO29CQUN0Q00sTUFBTTtvQkFDTkMsVUFBVWYsS0FBS2dCLGNBQWMsQ0FBQ1QsT0FBT0g7Z0JBQ3ZDO1lBQ0Y7UUFDRjtRQUVBLElBQUksQ0FBQ0MsWUFBWUgsY0FBY1IsV0FBVztZQUN4Q2EsU0FBU0w7WUFDVEEsWUFBWUosTUFBTUssTUFBTSxDQUFDLEVBQUVGO1FBQzdCO1FBRUFNLFNBQVNMO1FBQ1REO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvc3Ryb25nLmpzP2ZmYjAiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpXG52YXIgd2hpdGVzcGFjZSA9IHJlcXVpcmUoJ2lzLXdoaXRlc3BhY2UtY2hhcmFjdGVyJylcbnZhciBsb2NhdGUgPSByZXF1aXJlKCcuLi9sb2NhdGUvc3Ryb25nJylcblxubW9kdWxlLmV4cG9ydHMgPSBzdHJvbmdcbnN0cm9uZy5sb2NhdG9yID0gbG9jYXRlXG5cbnZhciBiYWNrc2xhc2ggPSAnXFxcXCdcbnZhciBhc3RlcmlzayA9ICcqJ1xudmFyIHVuZGVyc2NvcmUgPSAnXydcblxuZnVuY3Rpb24gc3Ryb25nKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuICB2YXIgbm93XG4gIHZhciBwZWRhbnRpY1xuICB2YXIgbWFya2VyXG4gIHZhciBxdWV1ZVxuICB2YXIgc3VidmFsdWVcbiAgdmFyIGxlbmd0aFxuICB2YXIgcHJldlxuXG4gIGlmIChcbiAgICAoY2hhcmFjdGVyICE9PSBhc3RlcmlzayAmJiBjaGFyYWN0ZXIgIT09IHVuZGVyc2NvcmUpIHx8XG4gICAgdmFsdWUuY2hhckF0KCsraW5kZXgpICE9PSBjaGFyYWN0ZXJcbiAgKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBwZWRhbnRpYyA9IHNlbGYub3B0aW9ucy5wZWRhbnRpY1xuICBtYXJrZXIgPSBjaGFyYWN0ZXJcbiAgc3VidmFsdWUgPSBtYXJrZXIgKyBtYXJrZXJcbiAgbGVuZ3RoID0gdmFsdWUubGVuZ3RoXG4gIGluZGV4KytcbiAgcXVldWUgPSAnJ1xuICBjaGFyYWN0ZXIgPSAnJ1xuXG4gIGlmIChwZWRhbnRpYyAmJiB3aGl0ZXNwYWNlKHZhbHVlLmNoYXJBdChpbmRleCkpKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICB3aGlsZSAoaW5kZXggPCBsZW5ndGgpIHtcbiAgICBwcmV2ID0gY2hhcmFjdGVyXG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgaWYgKFxuICAgICAgY2hhcmFjdGVyID09PSBtYXJrZXIgJiZcbiAgICAgIHZhbHVlLmNoYXJBdChpbmRleCArIDEpID09PSBtYXJrZXIgJiZcbiAgICAgICghcGVkYW50aWMgfHwgIXdoaXRlc3BhY2UocHJldikpXG4gICAgKSB7XG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAyKVxuXG4gICAgICBpZiAoY2hhcmFjdGVyICE9PSBtYXJrZXIpIHtcbiAgICAgICAgaWYgKCF0cmltKHF1ZXVlKSkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG5cbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmIC0gbmV2ZXIgdXNlZCAoeWV0KSAqL1xuICAgICAgICBpZiAoc2lsZW50KSB7XG4gICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgfVxuXG4gICAgICAgIG5vdyA9IGVhdC5ub3coKVxuICAgICAgICBub3cuY29sdW1uICs9IDJcbiAgICAgICAgbm93Lm9mZnNldCArPSAyXG5cbiAgICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSArIHF1ZXVlICsgc3VidmFsdWUpKHtcbiAgICAgICAgICB0eXBlOiAnc3Ryb25nJyxcbiAgICAgICAgICBjaGlsZHJlbjogc2VsZi50b2tlbml6ZUlubGluZShxdWV1ZSwgbm93KVxuICAgICAgICB9KVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmICghcGVkYW50aWMgJiYgY2hhcmFjdGVyID09PSBiYWNrc2xhc2gpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlclxuICAgICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KCsraW5kZXgpXG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyXG4gICAgaW5kZXgrK1xuICB9XG59XG4iXSwibmFtZXMiOlsidHJpbSIsInJlcXVpcmUiLCJ3aGl0ZXNwYWNlIiwibG9jYXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsInN0cm9uZyIsImxvY2F0b3IiLCJiYWNrc2xhc2giLCJhc3RlcmlzayIsInVuZGVyc2NvcmUiLCJlYXQiLCJ2YWx1ZSIsInNpbGVudCIsInNlbGYiLCJpbmRleCIsImNoYXJhY3RlciIsImNoYXJBdCIsIm5vdyIsInBlZGFudGljIiwibWFya2VyIiwicXVldWUiLCJzdWJ2YWx1ZSIsImxlbmd0aCIsInByZXYiLCJvcHRpb25zIiwiY29sdW1uIiwib2Zmc2V0IiwidHlwZSIsImNoaWxkcmVuIiwidG9rZW5pemVJbmxpbmUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/strong.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/table.js":
/*!*********************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/table.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nmodule.exports = table;\nvar tab = \"\t\";\nvar lineFeed = \"\\n\";\nvar space = \" \";\nvar dash = \"-\";\nvar colon = \":\";\nvar backslash = \"\\\\\";\nvar verticalBar = \"|\";\nvar minColumns = 1;\nvar minRows = 2;\nvar left = \"left\";\nvar center = \"center\";\nvar right = \"right\";\nfunction table(eat, value, silent) {\n    var self = this;\n    var index;\n    var alignments;\n    var alignment;\n    var subvalue;\n    var row;\n    var length;\n    var lines;\n    var queue;\n    var character;\n    var hasDash;\n    var align;\n    var cell;\n    var preamble;\n    var now;\n    var position;\n    var lineCount;\n    var line;\n    var rows;\n    var table;\n    var lineIndex;\n    var pipeIndex;\n    var first;\n    // Exit when not in gfm-mode.\n    if (!self.options.gfm) {\n        return;\n    }\n    // Get the rows.\n    // Detecting tables soon is hard, so there are some checks for performance\n    // here, such as the minimum number of rows, and allowed characters in the\n    // alignment row.\n    index = 0;\n    lineCount = 0;\n    length = value.length + 1;\n    lines = [];\n    while(index < length){\n        lineIndex = value.indexOf(lineFeed, index);\n        pipeIndex = value.indexOf(verticalBar, index + 1);\n        if (lineIndex === -1) {\n            lineIndex = value.length;\n        }\n        if (pipeIndex === -1 || pipeIndex > lineIndex) {\n            if (lineCount < minRows) {\n                return;\n            }\n            break;\n        }\n        lines.push(value.slice(index, lineIndex));\n        lineCount++;\n        index = lineIndex + 1;\n    }\n    // Parse the alignment row.\n    subvalue = lines.join(lineFeed);\n    alignments = lines.splice(1, 1)[0] || [];\n    index = 0;\n    length = alignments.length;\n    lineCount--;\n    alignment = false;\n    align = [];\n    while(index < length){\n        character = alignments.charAt(index);\n        if (character === verticalBar) {\n            hasDash = null;\n            if (alignment === false) {\n                if (first === false) {\n                    return;\n                }\n            } else {\n                align.push(alignment);\n                alignment = false;\n            }\n            first = false;\n        } else if (character === dash) {\n            hasDash = true;\n            alignment = alignment || null;\n        } else if (character === colon) {\n            if (alignment === left) {\n                alignment = center;\n            } else if (hasDash && alignment === null) {\n                alignment = right;\n            } else {\n                alignment = left;\n            }\n        } else if (!whitespace(character)) {\n            return;\n        }\n        index++;\n    }\n    if (alignment !== false) {\n        align.push(alignment);\n    }\n    // Exit when without enough columns.\n    if (align.length < minColumns) {\n        return;\n    }\n    /* istanbul ignore if - never used (yet) */ if (silent) {\n        return true;\n    }\n    // Parse the rows.\n    position = -1;\n    rows = [];\n    table = eat(subvalue).reset({\n        type: \"table\",\n        align: align,\n        children: rows\n    });\n    while(++position < lineCount){\n        line = lines[position];\n        row = {\n            type: \"tableRow\",\n            children: []\n        };\n        // Eat a newline character when this is not the first row.\n        if (position) {\n            eat(lineFeed);\n        }\n        // Eat the row.\n        eat(line).reset(row, table);\n        length = line.length + 1;\n        index = 0;\n        queue = \"\";\n        cell = \"\";\n        preamble = true;\n        while(index < length){\n            character = line.charAt(index);\n            if (character === tab || character === space) {\n                if (cell) {\n                    queue += character;\n                } else {\n                    eat(character);\n                }\n                index++;\n                continue;\n            }\n            if (character === \"\" || character === verticalBar) {\n                if (preamble) {\n                    eat(character);\n                } else {\n                    if ((cell || character) && !preamble) {\n                        subvalue = cell;\n                        if (queue.length > 1) {\n                            if (character) {\n                                subvalue += queue.slice(0, queue.length - 1);\n                                queue = queue.charAt(queue.length - 1);\n                            } else {\n                                subvalue += queue;\n                                queue = \"\";\n                            }\n                        }\n                        now = eat.now();\n                        eat(subvalue)({\n                            type: \"tableCell\",\n                            children: self.tokenizeInline(cell, now)\n                        }, row);\n                    }\n                    eat(queue + character);\n                    queue = \"\";\n                    cell = \"\";\n                }\n            } else {\n                if (queue) {\n                    cell += queue;\n                    queue = \"\";\n                }\n                cell += character;\n                if (character === backslash && index !== length - 2) {\n                    cell += line.charAt(index + 1);\n                    index++;\n                }\n            }\n            preamble = false;\n            index++;\n        }\n        // Eat the alignment row.\n        if (!position) {\n            eat(lineFeed + alignments);\n        }\n    }\n    return table;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/table.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/text.js":
/*!********************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/text.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = text;\nfunction text(eat, value, silent) {\n    var self = this;\n    var methods;\n    var tokenizers;\n    var index;\n    var length;\n    var subvalue;\n    var position;\n    var tokenizer;\n    var name;\n    var min;\n    var now;\n    /* istanbul ignore if - never used (yet) */ if (silent) {\n        return true;\n    }\n    methods = self.inlineMethods;\n    length = methods.length;\n    tokenizers = self.inlineTokenizers;\n    index = -1;\n    min = value.length;\n    while(++index < length){\n        name = methods[index];\n        if (name === \"text\" || !tokenizers[name]) {\n            continue;\n        }\n        tokenizer = tokenizers[name].locator;\n        if (!tokenizer) {\n            eat.file.fail(\"Missing locator: `\" + name + \"`\");\n        }\n        position = tokenizer.call(self, value, 1);\n        if (position !== -1 && position < min) {\n            min = position;\n        }\n    }\n    subvalue = value.slice(0, min);\n    now = eat.now();\n    self.decode(subvalue, now, handler);\n    function handler(content, position, source) {\n        eat(source || content)({\n            type: \"text\",\n            value: content\n        });\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS90ZXh0LmpzIiwibWFwcGluZ3MiOiJBQUFBO0FBRUFBLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsU0FBU0EsS0FBS0MsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDOUIsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFFSix5Q0FBeUMsR0FDekMsSUFBSVgsUUFBUTtRQUNWLE9BQU87SUFDVDtJQUVBRSxVQUFVRCxLQUFLVyxhQUFhO0lBQzVCUCxTQUFTSCxRQUFRRyxNQUFNO0lBQ3ZCRixhQUFhRixLQUFLWSxnQkFBZ0I7SUFDbENULFFBQVEsQ0FBQztJQUNUTSxNQUFNWCxNQUFNTSxNQUFNO0lBRWxCLE1BQU8sRUFBRUQsUUFBUUMsT0FBUTtRQUN2QkksT0FBT1AsT0FBTyxDQUFDRSxNQUFNO1FBRXJCLElBQUlLLFNBQVMsVUFBVSxDQUFDTixVQUFVLENBQUNNLEtBQUssRUFBRTtZQUN4QztRQUNGO1FBRUFELFlBQVlMLFVBQVUsQ0FBQ00sS0FBSyxDQUFDSyxPQUFPO1FBRXBDLElBQUksQ0FBQ04sV0FBVztZQUNkVixJQUFJaUIsSUFBSSxDQUFDQyxJQUFJLENBQUMsdUJBQXVCUCxPQUFPO1FBQzlDO1FBRUFGLFdBQVdDLFVBQVVTLElBQUksQ0FBQ2hCLE1BQU1GLE9BQU87UUFFdkMsSUFBSVEsYUFBYSxDQUFDLEtBQUtBLFdBQVdHLEtBQUs7WUFDckNBLE1BQU1IO1FBQ1I7SUFDRjtJQUVBRCxXQUFXUCxNQUFNbUIsS0FBSyxDQUFDLEdBQUdSO0lBQzFCQyxNQUFNYixJQUFJYSxHQUFHO0lBRWJWLEtBQUtrQixNQUFNLENBQUNiLFVBQVVLLEtBQUtTO0lBRTNCLFNBQVNBLFFBQVFDLE9BQU8sRUFBRWQsUUFBUSxFQUFFZSxNQUFNO1FBQ3hDeEIsSUFBSXdCLFVBQVVELFNBQVM7WUFBQ0UsTUFBTTtZQUFReEIsT0FBT3NCO1FBQU87SUFDdEQ7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGV4dC5qcz83NmJiIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IHRleHRcblxuZnVuY3Rpb24gdGV4dChlYXQsIHZhbHVlLCBzaWxlbnQpIHtcbiAgdmFyIHNlbGYgPSB0aGlzXG4gIHZhciBtZXRob2RzXG4gIHZhciB0b2tlbml6ZXJzXG4gIHZhciBpbmRleFxuICB2YXIgbGVuZ3RoXG4gIHZhciBzdWJ2YWx1ZVxuICB2YXIgcG9zaXRpb25cbiAgdmFyIHRva2VuaXplclxuICB2YXIgbmFtZVxuICB2YXIgbWluXG4gIHZhciBub3dcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLSBuZXZlciB1c2VkICh5ZXQpICovXG4gIGlmIChzaWxlbnQpIHtcbiAgICByZXR1cm4gdHJ1ZVxuICB9XG5cbiAgbWV0aG9kcyA9IHNlbGYuaW5saW5lTWV0aG9kc1xuICBsZW5ndGggPSBtZXRob2RzLmxlbmd0aFxuICB0b2tlbml6ZXJzID0gc2VsZi5pbmxpbmVUb2tlbml6ZXJzXG4gIGluZGV4ID0gLTFcbiAgbWluID0gdmFsdWUubGVuZ3RoXG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBuYW1lID0gbWV0aG9kc1tpbmRleF1cblxuICAgIGlmIChuYW1lID09PSAndGV4dCcgfHwgIXRva2VuaXplcnNbbmFtZV0pIHtcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdG9rZW5pemVyID0gdG9rZW5pemVyc1tuYW1lXS5sb2NhdG9yXG5cbiAgICBpZiAoIXRva2VuaXplcikge1xuICAgICAgZWF0LmZpbGUuZmFpbCgnTWlzc2luZyBsb2NhdG9yOiBgJyArIG5hbWUgKyAnYCcpXG4gICAgfVxuXG4gICAgcG9zaXRpb24gPSB0b2tlbml6ZXIuY2FsbChzZWxmLCB2YWx1ZSwgMSlcblxuICAgIGlmIChwb3NpdGlvbiAhPT0gLTEgJiYgcG9zaXRpb24gPCBtaW4pIHtcbiAgICAgIG1pbiA9IHBvc2l0aW9uXG4gICAgfVxuICB9XG5cbiAgc3VidmFsdWUgPSB2YWx1ZS5zbGljZSgwLCBtaW4pXG4gIG5vdyA9IGVhdC5ub3coKVxuXG4gIHNlbGYuZGVjb2RlKHN1YnZhbHVlLCBub3csIGhhbmRsZXIpXG5cbiAgZnVuY3Rpb24gaGFuZGxlcihjb250ZW50LCBwb3NpdGlvbiwgc291cmNlKSB7XG4gICAgZWF0KHNvdXJjZSB8fCBjb250ZW50KSh7dHlwZTogJ3RleHQnLCB2YWx1ZTogY29udGVudH0pXG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwidGV4dCIsImVhdCIsInZhbHVlIiwic2lsZW50Iiwic2VsZiIsIm1ldGhvZHMiLCJ0b2tlbml6ZXJzIiwiaW5kZXgiLCJsZW5ndGgiLCJzdWJ2YWx1ZSIsInBvc2l0aW9uIiwidG9rZW5pemVyIiwibmFtZSIsIm1pbiIsIm5vdyIsImlubGluZU1ldGhvZHMiLCJpbmxpbmVUb2tlbml6ZXJzIiwibG9jYXRvciIsImZpbGUiLCJmYWlsIiwiY2FsbCIsInNsaWNlIiwiZGVjb2RlIiwiaGFuZGxlciIsImNvbnRlbnQiLCJzb3VyY2UiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/text.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/thematic-break.js":
/*!******************************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/thematic-break.js ***!
  \******************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = thematicBreak;\nvar tab = \"\t\";\nvar lineFeed = \"\\n\";\nvar space = \" \";\nvar asterisk = \"*\";\nvar dash = \"-\";\nvar underscore = \"_\";\nvar maxCount = 3;\nfunction thematicBreak(eat, value, silent) {\n    var index = -1;\n    var length = value.length + 1;\n    var subvalue = \"\";\n    var character;\n    var marker;\n    var markerCount;\n    var queue;\n    while(++index < length){\n        character = value.charAt(index);\n        if (character !== tab && character !== space) {\n            break;\n        }\n        subvalue += character;\n    }\n    if (character !== asterisk && character !== dash && character !== underscore) {\n        return;\n    }\n    marker = character;\n    subvalue += character;\n    markerCount = 1;\n    queue = \"\";\n    while(++index < length){\n        character = value.charAt(index);\n        if (character === marker) {\n            markerCount++;\n            subvalue += queue + marker;\n            queue = \"\";\n        } else if (character === space) {\n            queue += character;\n        } else if (markerCount >= maxCount && (!character || character === lineFeed)) {\n            subvalue += queue;\n            if (silent) {\n                return true;\n            }\n            return eat(subvalue)({\n                type: \"thematicBreak\"\n            });\n        } else {\n            return;\n        }\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS90aGVtYXRpYy1icmVhay5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLE1BQU07QUFDVixJQUFJQyxXQUFXO0FBQ2YsSUFBSUMsUUFBUTtBQUNaLElBQUlDLFdBQVc7QUFDZixJQUFJQyxPQUFPO0FBQ1gsSUFBSUMsYUFBYTtBQUVqQixJQUFJQyxXQUFXO0FBRWYsU0FBU1AsY0FBY1EsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDdkMsSUFBSUMsUUFBUSxDQUFDO0lBQ2IsSUFBSUMsU0FBU0gsTUFBTUcsTUFBTSxHQUFHO0lBQzVCLElBQUlDLFdBQVc7SUFDZixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUVKLE1BQU8sRUFBRU4sUUFBUUMsT0FBUTtRQUN2QkUsWUFBWUwsTUFBTVMsTUFBTSxDQUFDUDtRQUV6QixJQUFJRyxjQUFjYixPQUFPYSxjQUFjWCxPQUFPO1lBQzVDO1FBQ0Y7UUFFQVUsWUFBWUM7SUFDZDtJQUVBLElBQ0VBLGNBQWNWLFlBQ2RVLGNBQWNULFFBQ2RTLGNBQWNSLFlBQ2Q7UUFDQTtJQUNGO0lBRUFTLFNBQVNEO0lBQ1RELFlBQVlDO0lBQ1pFLGNBQWM7SUFDZEMsUUFBUTtJQUVSLE1BQU8sRUFBRU4sUUFBUUMsT0FBUTtRQUN2QkUsWUFBWUwsTUFBTVMsTUFBTSxDQUFDUDtRQUV6QixJQUFJRyxjQUFjQyxRQUFRO1lBQ3hCQztZQUNBSCxZQUFZSSxRQUFRRjtZQUNwQkUsUUFBUTtRQUNWLE9BQU8sSUFBSUgsY0FBY1gsT0FBTztZQUM5QmMsU0FBU0g7UUFDWCxPQUFPLElBQ0xFLGVBQWVULFlBQ2QsRUFBQ08sYUFBYUEsY0FBY1osUUFBTyxHQUNwQztZQUNBVyxZQUFZSTtZQUVaLElBQUlQLFFBQVE7Z0JBQ1YsT0FBTztZQUNUO1lBRUEsT0FBT0YsSUFBSUssVUFBVTtnQkFBQ00sTUFBTTtZQUFlO1FBQzdDLE9BQU87WUFDTDtRQUNGO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdG9rZW5pemUvdGhlbWF0aWMtYnJlYWsuanM/MmFhMiJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubW9kdWxlLmV4cG9ydHMgPSB0aGVtYXRpY0JyZWFrXG5cbnZhciB0YWIgPSAnXFx0J1xudmFyIGxpbmVGZWVkID0gJ1xcbidcbnZhciBzcGFjZSA9ICcgJ1xudmFyIGFzdGVyaXNrID0gJyonXG52YXIgZGFzaCA9ICctJ1xudmFyIHVuZGVyc2NvcmUgPSAnXydcblxudmFyIG1heENvdW50ID0gM1xuXG5mdW5jdGlvbiB0aGVtYXRpY0JyZWFrKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgbGVuZ3RoID0gdmFsdWUubGVuZ3RoICsgMVxuICB2YXIgc3VidmFsdWUgPSAnJ1xuICB2YXIgY2hhcmFjdGVyXG4gIHZhciBtYXJrZXJcbiAgdmFyIG1hcmtlckNvdW50XG4gIHZhciBxdWV1ZVxuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgaWYgKGNoYXJhY3RlciAhPT0gdGFiICYmIGNoYXJhY3RlciAhPT0gc3BhY2UpIHtcbiAgICAgIGJyZWFrXG4gICAgfVxuXG4gICAgc3VidmFsdWUgKz0gY2hhcmFjdGVyXG4gIH1cblxuICBpZiAoXG4gICAgY2hhcmFjdGVyICE9PSBhc3RlcmlzayAmJlxuICAgIGNoYXJhY3RlciAhPT0gZGFzaCAmJlxuICAgIGNoYXJhY3RlciAhPT0gdW5kZXJzY29yZVxuICApIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIG1hcmtlciA9IGNoYXJhY3RlclxuICBzdWJ2YWx1ZSArPSBjaGFyYWN0ZXJcbiAgbWFya2VyQ291bnQgPSAxXG4gIHF1ZXVlID0gJydcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdChpbmRleClcblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IG1hcmtlcikge1xuICAgICAgbWFya2VyQ291bnQrK1xuICAgICAgc3VidmFsdWUgKz0gcXVldWUgKyBtYXJrZXJcbiAgICAgIHF1ZXVlID0gJydcbiAgICB9IGVsc2UgaWYgKGNoYXJhY3RlciA9PT0gc3BhY2UpIHtcbiAgICAgIHF1ZXVlICs9IGNoYXJhY3RlclxuICAgIH0gZWxzZSBpZiAoXG4gICAgICBtYXJrZXJDb3VudCA+PSBtYXhDb3VudCAmJlxuICAgICAgKCFjaGFyYWN0ZXIgfHwgY2hhcmFjdGVyID09PSBsaW5lRmVlZClcbiAgICApIHtcbiAgICAgIHN1YnZhbHVlICs9IHF1ZXVlXG5cbiAgICAgIGlmIChzaWxlbnQpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGVhdChzdWJ2YWx1ZSkoe3R5cGU6ICd0aGVtYXRpY0JyZWFrJ30pXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ0aGVtYXRpY0JyZWFrIiwidGFiIiwibGluZUZlZWQiLCJzcGFjZSIsImFzdGVyaXNrIiwiZGFzaCIsInVuZGVyc2NvcmUiLCJtYXhDb3VudCIsImVhdCIsInZhbHVlIiwic2lsZW50IiwiaW5kZXgiLCJsZW5ndGgiLCJzdWJ2YWx1ZSIsImNoYXJhY3RlciIsIm1hcmtlciIsIm1hcmtlckNvdW50IiwicXVldWUiLCJjaGFyQXQiLCJ0eXBlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/thematic-break.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenize/url.js":
/*!*******************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenize/url.js ***!
  \*******************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar decode = __webpack_require__(/*! parse-entities */ \"(rsc)/./node_modules/parse-entities/index.js\");\nvar whitespace = __webpack_require__(/*! is-whitespace-character */ \"(rsc)/./node_modules/is-whitespace-character/index.js\");\nvar locate = __webpack_require__(/*! ../locate/url */ \"(rsc)/./node_modules/remark-parse/lib/locate/url.js\");\nmodule.exports = url;\nurl.locator = locate;\nurl.notInLink = true;\nvar quotationMark = '\"';\nvar apostrophe = \"'\";\nvar leftParenthesis = \"(\";\nvar rightParenthesis = \")\";\nvar comma = \",\";\nvar dot = \".\";\nvar colon = \":\";\nvar semicolon = \";\";\nvar lessThan = \"<\";\nvar atSign = \"@\";\nvar leftSquareBracket = \"[\";\nvar rightSquareBracket = \"]\";\nvar http = \"http://\";\nvar https = \"https://\";\nvar mailto = \"mailto:\";\nvar protocols = [\n    http,\n    https,\n    mailto\n];\nvar protocolsLength = protocols.length;\nfunction url(eat, value, silent) {\n    var self = this;\n    var subvalue;\n    var content;\n    var character;\n    var index;\n    var position;\n    var protocol;\n    var match;\n    var length;\n    var queue;\n    var parenCount;\n    var nextCharacter;\n    var tokenizers;\n    var exit;\n    if (!self.options.gfm) {\n        return;\n    }\n    subvalue = \"\";\n    index = -1;\n    while(++index < protocolsLength){\n        protocol = protocols[index];\n        match = value.slice(0, protocol.length);\n        if (match.toLowerCase() === protocol) {\n            subvalue = match;\n            break;\n        }\n    }\n    if (!subvalue) {\n        return;\n    }\n    index = subvalue.length;\n    length = value.length;\n    queue = \"\";\n    parenCount = 0;\n    while(index < length){\n        character = value.charAt(index);\n        if (whitespace(character) || character === lessThan) {\n            break;\n        }\n        if (character === dot || character === comma || character === colon || character === semicolon || character === quotationMark || character === apostrophe || character === rightParenthesis || character === rightSquareBracket) {\n            nextCharacter = value.charAt(index + 1);\n            if (!nextCharacter || whitespace(nextCharacter)) {\n                break;\n            }\n        }\n        if (character === leftParenthesis || character === leftSquareBracket) {\n            parenCount++;\n        }\n        if (character === rightParenthesis || character === rightSquareBracket) {\n            parenCount--;\n            if (parenCount < 0) {\n                break;\n            }\n        }\n        queue += character;\n        index++;\n    }\n    if (!queue) {\n        return;\n    }\n    subvalue += queue;\n    content = subvalue;\n    if (protocol === mailto) {\n        position = queue.indexOf(atSign);\n        if (position === -1 || position === length - 1) {\n            return;\n        }\n        content = content.slice(mailto.length);\n    }\n    /* istanbul ignore if - never used (yet) */ if (silent) {\n        return true;\n    }\n    exit = self.enterLink();\n    // Temporarily remove all tokenizers except text in url.\n    tokenizers = self.inlineTokenizers;\n    self.inlineTokenizers = {\n        text: tokenizers.text\n    };\n    content = self.tokenizeInline(content, eat.now());\n    self.inlineTokenizers = tokenizers;\n    exit();\n    return eat(subvalue)({\n        type: \"link\",\n        title: null,\n        url: decode(subvalue, {\n            nonTerminated: false\n        }),\n        children: content\n    });\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi90b2tlbml6ZS91cmwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxTQUFTQyxtQkFBT0EsQ0FBQztBQUNyQixJQUFJQyxhQUFhRCxtQkFBT0EsQ0FBQztBQUN6QixJQUFJRSxTQUFTRixtQkFBT0EsQ0FBQztBQUVyQkcsT0FBT0MsT0FBTyxHQUFHQztBQUNqQkEsSUFBSUMsT0FBTyxHQUFHSjtBQUNkRyxJQUFJRSxTQUFTLEdBQUc7QUFFaEIsSUFBSUMsZ0JBQWdCO0FBQ3BCLElBQUlDLGFBQWE7QUFDakIsSUFBSUMsa0JBQWtCO0FBQ3RCLElBQUlDLG1CQUFtQjtBQUN2QixJQUFJQyxRQUFRO0FBQ1osSUFBSUMsTUFBTTtBQUNWLElBQUlDLFFBQVE7QUFDWixJQUFJQyxZQUFZO0FBQ2hCLElBQUlDLFdBQVc7QUFDZixJQUFJQyxTQUFTO0FBQ2IsSUFBSUMsb0JBQW9CO0FBQ3hCLElBQUlDLHFCQUFxQjtBQUV6QixJQUFJQyxPQUFPO0FBQ1gsSUFBSUMsUUFBUTtBQUNaLElBQUlDLFNBQVM7QUFFYixJQUFJQyxZQUFZO0lBQUNIO0lBQU1DO0lBQU9DO0NBQU87QUFFckMsSUFBSUUsa0JBQWtCRCxVQUFVRSxNQUFNO0FBRXRDLFNBQVNwQixJQUFJcUIsR0FBRyxFQUFFQyxLQUFLLEVBQUVDLE1BQU07SUFDN0IsSUFBSUMsT0FBTyxJQUFJO0lBQ2YsSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFDSixJQUFJWDtJQUNKLElBQUlZO0lBQ0osSUFBSUM7SUFDSixJQUFJQztJQUNKLElBQUlDO0lBQ0osSUFBSUM7SUFFSixJQUFJLENBQUNaLEtBQUthLE9BQU8sQ0FBQ0MsR0FBRyxFQUFFO1FBQ3JCO0lBQ0Y7SUFFQWIsV0FBVztJQUNYRyxRQUFRLENBQUM7SUFFVCxNQUFPLEVBQUVBLFFBQVFULGdCQUFpQjtRQUNoQ1csV0FBV1osU0FBUyxDQUFDVSxNQUFNO1FBQzNCRyxRQUFRVCxNQUFNaUIsS0FBSyxDQUFDLEdBQUdULFNBQVNWLE1BQU07UUFFdEMsSUFBSVcsTUFBTVMsV0FBVyxPQUFPVixVQUFVO1lBQ3BDTCxXQUFXTTtZQUNYO1FBQ0Y7SUFDRjtJQUVBLElBQUksQ0FBQ04sVUFBVTtRQUNiO0lBQ0Y7SUFFQUcsUUFBUUgsU0FBU0wsTUFBTTtJQUN2QkEsU0FBU0UsTUFBTUYsTUFBTTtJQUNyQlksUUFBUTtJQUNSQyxhQUFhO0lBRWIsTUFBT0wsUUFBUVIsT0FBUTtRQUNyQk8sWUFBWUwsTUFBTW1CLE1BQU0sQ0FBQ2I7UUFFekIsSUFBSWhDLFdBQVcrQixjQUFjQSxjQUFjaEIsVUFBVTtZQUNuRDtRQUNGO1FBRUEsSUFDRWdCLGNBQWNuQixPQUNkbUIsY0FBY3BCLFNBQ2RvQixjQUFjbEIsU0FDZGtCLGNBQWNqQixhQUNkaUIsY0FBY3hCLGlCQUNkd0IsY0FBY3ZCLGNBQ2R1QixjQUFjckIsb0JBQ2RxQixjQUFjYixvQkFDZDtZQUNBb0IsZ0JBQWdCWixNQUFNbUIsTUFBTSxDQUFDYixRQUFRO1lBRXJDLElBQUksQ0FBQ00saUJBQWlCdEMsV0FBV3NDLGdCQUFnQjtnQkFDL0M7WUFDRjtRQUNGO1FBRUEsSUFBSVAsY0FBY3RCLG1CQUFtQnNCLGNBQWNkLG1CQUFtQjtZQUNwRW9CO1FBQ0Y7UUFFQSxJQUFJTixjQUFjckIsb0JBQW9CcUIsY0FBY2Isb0JBQW9CO1lBQ3RFbUI7WUFFQSxJQUFJQSxhQUFhLEdBQUc7Z0JBQ2xCO1lBQ0Y7UUFDRjtRQUVBRCxTQUFTTDtRQUNUQztJQUNGO0lBRUEsSUFBSSxDQUFDSSxPQUFPO1FBQ1Y7SUFDRjtJQUVBUCxZQUFZTztJQUNaTixVQUFVRDtJQUVWLElBQUlLLGFBQWFiLFFBQVE7UUFDdkJZLFdBQVdHLE1BQU1VLE9BQU8sQ0FBQzlCO1FBRXpCLElBQUlpQixhQUFhLENBQUMsS0FBS0EsYUFBYVQsU0FBUyxHQUFHO1lBQzlDO1FBQ0Y7UUFFQU0sVUFBVUEsUUFBUWEsS0FBSyxDQUFDdEIsT0FBT0csTUFBTTtJQUN2QztJQUVBLHlDQUF5QyxHQUN6QyxJQUFJRyxRQUFRO1FBQ1YsT0FBTztJQUNUO0lBRUFhLE9BQU9aLEtBQUttQixTQUFTO0lBRXJCLHdEQUF3RDtJQUN4RFIsYUFBYVgsS0FBS29CLGdCQUFnQjtJQUNsQ3BCLEtBQUtvQixnQkFBZ0IsR0FBRztRQUFDQyxNQUFNVixXQUFXVSxJQUFJO0lBQUE7SUFFOUNuQixVQUFVRixLQUFLc0IsY0FBYyxDQUFDcEIsU0FBU0wsSUFBSTBCLEdBQUc7SUFFOUN2QixLQUFLb0IsZ0JBQWdCLEdBQUdUO0lBQ3hCQztJQUVBLE9BQU9mLElBQUlJLFVBQVU7UUFDbkJ1QixNQUFNO1FBQ05DLE9BQU87UUFDUGpELEtBQUtOLE9BQU8rQixVQUFVO1lBQUN5QixlQUFlO1FBQUs7UUFDM0NDLFVBQVV6QjtJQUNaO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3Rva2VuaXplL3VybC5qcz9jNDI2Il0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgZGVjb2RlID0gcmVxdWlyZSgncGFyc2UtZW50aXRpZXMnKVxudmFyIHdoaXRlc3BhY2UgPSByZXF1aXJlKCdpcy13aGl0ZXNwYWNlLWNoYXJhY3RlcicpXG52YXIgbG9jYXRlID0gcmVxdWlyZSgnLi4vbG9jYXRlL3VybCcpXG5cbm1vZHVsZS5leHBvcnRzID0gdXJsXG51cmwubG9jYXRvciA9IGxvY2F0ZVxudXJsLm5vdEluTGluayA9IHRydWVcblxudmFyIHF1b3RhdGlvbk1hcmsgPSAnXCInXG52YXIgYXBvc3Ryb3BoZSA9IFwiJ1wiXG52YXIgbGVmdFBhcmVudGhlc2lzID0gJygnXG52YXIgcmlnaHRQYXJlbnRoZXNpcyA9ICcpJ1xudmFyIGNvbW1hID0gJywnXG52YXIgZG90ID0gJy4nXG52YXIgY29sb24gPSAnOidcbnZhciBzZW1pY29sb24gPSAnOydcbnZhciBsZXNzVGhhbiA9ICc8J1xudmFyIGF0U2lnbiA9ICdAJ1xudmFyIGxlZnRTcXVhcmVCcmFja2V0ID0gJ1snXG52YXIgcmlnaHRTcXVhcmVCcmFja2V0ID0gJ10nXG5cbnZhciBodHRwID0gJ2h0dHA6Ly8nXG52YXIgaHR0cHMgPSAnaHR0cHM6Ly8nXG52YXIgbWFpbHRvID0gJ21haWx0bzonXG5cbnZhciBwcm90b2NvbHMgPSBbaHR0cCwgaHR0cHMsIG1haWx0b11cblxudmFyIHByb3RvY29sc0xlbmd0aCA9IHByb3RvY29scy5sZW5ndGhcblxuZnVuY3Rpb24gdXJsKGVhdCwgdmFsdWUsIHNpbGVudCkge1xuICB2YXIgc2VsZiA9IHRoaXNcbiAgdmFyIHN1YnZhbHVlXG4gIHZhciBjb250ZW50XG4gIHZhciBjaGFyYWN0ZXJcbiAgdmFyIGluZGV4XG4gIHZhciBwb3NpdGlvblxuICB2YXIgcHJvdG9jb2xcbiAgdmFyIG1hdGNoXG4gIHZhciBsZW5ndGhcbiAgdmFyIHF1ZXVlXG4gIHZhciBwYXJlbkNvdW50XG4gIHZhciBuZXh0Q2hhcmFjdGVyXG4gIHZhciB0b2tlbml6ZXJzXG4gIHZhciBleGl0XG5cbiAgaWYgKCFzZWxmLm9wdGlvbnMuZ2ZtKSB7XG4gICAgcmV0dXJuXG4gIH1cblxuICBzdWJ2YWx1ZSA9ICcnXG4gIGluZGV4ID0gLTFcblxuICB3aGlsZSAoKytpbmRleCA8IHByb3RvY29sc0xlbmd0aCkge1xuICAgIHByb3RvY29sID0gcHJvdG9jb2xzW2luZGV4XVxuICAgIG1hdGNoID0gdmFsdWUuc2xpY2UoMCwgcHJvdG9jb2wubGVuZ3RoKVxuXG4gICAgaWYgKG1hdGNoLnRvTG93ZXJDYXNlKCkgPT09IHByb3RvY29sKSB7XG4gICAgICBzdWJ2YWx1ZSA9IG1hdGNoXG4gICAgICBicmVha1xuICAgIH1cbiAgfVxuXG4gIGlmICghc3VidmFsdWUpIHtcbiAgICByZXR1cm5cbiAgfVxuXG4gIGluZGV4ID0gc3VidmFsdWUubGVuZ3RoXG4gIGxlbmd0aCA9IHZhbHVlLmxlbmd0aFxuICBxdWV1ZSA9ICcnXG4gIHBhcmVuQ291bnQgPSAwXG5cbiAgd2hpbGUgKGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgY2hhcmFjdGVyID0gdmFsdWUuY2hhckF0KGluZGV4KVxuXG4gICAgaWYgKHdoaXRlc3BhY2UoY2hhcmFjdGVyKSB8fCBjaGFyYWN0ZXIgPT09IGxlc3NUaGFuKSB7XG4gICAgICBicmVha1xuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNoYXJhY3RlciA9PT0gZG90IHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IGNvbW1hIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IGNvbG9uIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IHNlbWljb2xvbiB8fFxuICAgICAgY2hhcmFjdGVyID09PSBxdW90YXRpb25NYXJrIHx8XG4gICAgICBjaGFyYWN0ZXIgPT09IGFwb3N0cm9waGUgfHxcbiAgICAgIGNoYXJhY3RlciA9PT0gcmlnaHRQYXJlbnRoZXNpcyB8fFxuICAgICAgY2hhcmFjdGVyID09PSByaWdodFNxdWFyZUJyYWNrZXRcbiAgICApIHtcbiAgICAgIG5leHRDaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXggKyAxKVxuXG4gICAgICBpZiAoIW5leHRDaGFyYWN0ZXIgfHwgd2hpdGVzcGFjZShuZXh0Q2hhcmFjdGVyKSkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChjaGFyYWN0ZXIgPT09IGxlZnRQYXJlbnRoZXNpcyB8fCBjaGFyYWN0ZXIgPT09IGxlZnRTcXVhcmVCcmFja2V0KSB7XG4gICAgICBwYXJlbkNvdW50KytcbiAgICB9XG5cbiAgICBpZiAoY2hhcmFjdGVyID09PSByaWdodFBhcmVudGhlc2lzIHx8IGNoYXJhY3RlciA9PT0gcmlnaHRTcXVhcmVCcmFja2V0KSB7XG4gICAgICBwYXJlbkNvdW50LS1cblxuICAgICAgaWYgKHBhcmVuQ291bnQgPCAwKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuXG4gICAgcXVldWUgKz0gY2hhcmFjdGVyXG4gICAgaW5kZXgrK1xuICB9XG5cbiAgaWYgKCFxdWV1ZSkge1xuICAgIHJldHVyblxuICB9XG5cbiAgc3VidmFsdWUgKz0gcXVldWVcbiAgY29udGVudCA9IHN1YnZhbHVlXG5cbiAgaWYgKHByb3RvY29sID09PSBtYWlsdG8pIHtcbiAgICBwb3NpdGlvbiA9IHF1ZXVlLmluZGV4T2YoYXRTaWduKVxuXG4gICAgaWYgKHBvc2l0aW9uID09PSAtMSB8fCBwb3NpdGlvbiA9PT0gbGVuZ3RoIC0gMSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgY29udGVudCA9IGNvbnRlbnQuc2xpY2UobWFpbHRvLmxlbmd0aClcbiAgfVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAtIG5ldmVyIHVzZWQgKHlldCkgKi9cbiAgaWYgKHNpbGVudCkge1xuICAgIHJldHVybiB0cnVlXG4gIH1cblxuICBleGl0ID0gc2VsZi5lbnRlckxpbmsoKVxuXG4gIC8vIFRlbXBvcmFyaWx5IHJlbW92ZSBhbGwgdG9rZW5pemVycyBleGNlcHQgdGV4dCBpbiB1cmwuXG4gIHRva2VuaXplcnMgPSBzZWxmLmlubGluZVRva2VuaXplcnNcbiAgc2VsZi5pbmxpbmVUb2tlbml6ZXJzID0ge3RleHQ6IHRva2VuaXplcnMudGV4dH1cblxuICBjb250ZW50ID0gc2VsZi50b2tlbml6ZUlubGluZShjb250ZW50LCBlYXQubm93KCkpXG5cbiAgc2VsZi5pbmxpbmVUb2tlbml6ZXJzID0gdG9rZW5pemVyc1xuICBleGl0KClcblxuICByZXR1cm4gZWF0KHN1YnZhbHVlKSh7XG4gICAgdHlwZTogJ2xpbmsnLFxuICAgIHRpdGxlOiBudWxsLFxuICAgIHVybDogZGVjb2RlKHN1YnZhbHVlLCB7bm9uVGVybWluYXRlZDogZmFsc2V9KSxcbiAgICBjaGlsZHJlbjogY29udGVudFxuICB9KVxufVxuIl0sIm5hbWVzIjpbImRlY29kZSIsInJlcXVpcmUiLCJ3aGl0ZXNwYWNlIiwibG9jYXRlIiwibW9kdWxlIiwiZXhwb3J0cyIsInVybCIsImxvY2F0b3IiLCJub3RJbkxpbmsiLCJxdW90YXRpb25NYXJrIiwiYXBvc3Ryb3BoZSIsImxlZnRQYXJlbnRoZXNpcyIsInJpZ2h0UGFyZW50aGVzaXMiLCJjb21tYSIsImRvdCIsImNvbG9uIiwic2VtaWNvbG9uIiwibGVzc1RoYW4iLCJhdFNpZ24iLCJsZWZ0U3F1YXJlQnJhY2tldCIsInJpZ2h0U3F1YXJlQnJhY2tldCIsImh0dHAiLCJodHRwcyIsIm1haWx0byIsInByb3RvY29scyIsInByb3RvY29sc0xlbmd0aCIsImxlbmd0aCIsImVhdCIsInZhbHVlIiwic2lsZW50Iiwic2VsZiIsInN1YnZhbHVlIiwiY29udGVudCIsImNoYXJhY3RlciIsImluZGV4IiwicG9zaXRpb24iLCJwcm90b2NvbCIsIm1hdGNoIiwicXVldWUiLCJwYXJlbkNvdW50IiwibmV4dENoYXJhY3RlciIsInRva2VuaXplcnMiLCJleGl0Iiwib3B0aW9ucyIsImdmbSIsInNsaWNlIiwidG9Mb3dlckNhc2UiLCJjaGFyQXQiLCJpbmRleE9mIiwiZW50ZXJMaW5rIiwiaW5saW5lVG9rZW5pemVycyIsInRleHQiLCJ0b2tlbml6ZUlubGluZSIsIm5vdyIsInR5cGUiLCJ0aXRsZSIsIm5vblRlcm1pbmF0ZWQiLCJjaGlsZHJlbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenize/url.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/tokenizer.js":
/*!****************************************************!*\
  !*** ./node_modules/remark-parse/lib/tokenizer.js ***!
  \****************************************************/
/***/ ((module) => {

eval("\nmodule.exports = factory;\n// Construct a tokenizer.  This creates both `tokenizeInline` and `tokenizeBlock`.\nfunction factory(type) {\n    return tokenize;\n    // Tokenizer for a bound `type`.\n    function tokenize(value, location) {\n        var self = this;\n        var offset = self.offset;\n        var tokens = [];\n        var methods = self[type + \"Methods\"];\n        var tokenizers = self[type + \"Tokenizers\"];\n        var line = location.line;\n        var column = location.column;\n        var index;\n        var length;\n        var method;\n        var name;\n        var matched;\n        var valueLength;\n        // Trim white space only lines.\n        if (!value) {\n            return tokens;\n        }\n        // Expose on `eat`.\n        eat.now = now;\n        eat.file = self.file;\n        // Sync initial offset.\n        updatePosition(\"\");\n        // Iterate over `value`, and iterate over all tokenizers.  When one eats\n        // something, re-iterate with the remaining value.  If no tokenizer eats,\n        // something failed (should not happen) and an exception is thrown.\n        while(value){\n            index = -1;\n            length = methods.length;\n            matched = false;\n            while(++index < length){\n                name = methods[index];\n                method = tokenizers[name];\n                if (method && /* istanbul ignore next */ (!method.onlyAtStart || self.atStart) && (!method.notInList || !self.inList) && (!method.notInBlock || !self.inBlock) && (!method.notInLink || !self.inLink)) {\n                    valueLength = value.length;\n                    method.apply(self, [\n                        eat,\n                        value\n                    ]);\n                    matched = valueLength !== value.length;\n                    if (matched) {\n                        break;\n                    }\n                }\n            }\n            /* istanbul ignore if */ if (!matched) {\n                self.file.fail(new Error(\"Infinite loop\"), eat.now());\n            }\n        }\n        self.eof = now();\n        return tokens;\n        // Update line, column, and offset based on `value`.\n        function updatePosition(subvalue) {\n            var lastIndex = -1;\n            var index = subvalue.indexOf(\"\\n\");\n            while(index !== -1){\n                line++;\n                lastIndex = index;\n                index = subvalue.indexOf(\"\\n\", index + 1);\n            }\n            if (lastIndex === -1) {\n                column += subvalue.length;\n            } else {\n                column = subvalue.length - lastIndex;\n            }\n            if (line in offset) {\n                if (lastIndex !== -1) {\n                    column += offset[line];\n                } else if (column <= offset[line]) {\n                    column = offset[line] + 1;\n                }\n            }\n        }\n        // Get offset.  Called before the first character is eaten to retrieve the\n        // range’s offsets.\n        function getOffset() {\n            var indentation = [];\n            var pos = line + 1;\n            // Done.  Called when the last character is eaten to retrieve the range’s\n            // offsets.\n            return function() {\n                var last = line + 1;\n                while(pos < last){\n                    indentation.push((offset[pos] || 0) + 1);\n                    pos++;\n                }\n                return indentation;\n            };\n        }\n        // Get the current position.\n        function now() {\n            var pos = {\n                line: line,\n                column: column\n            };\n            pos.offset = self.toOffset(pos);\n            return pos;\n        }\n        // Store position information for a node.\n        function Position(start) {\n            this.start = start;\n            this.end = now();\n        }\n        // Throw when a value is incorrectly eaten.  This shouldn’t happen but will\n        // throw on new, incorrect rules.\n        function validateEat(subvalue) {\n            /* istanbul ignore if */ if (value.slice(0, subvalue.length) !== subvalue) {\n                // Capture stack-trace.\n                self.file.fail(new Error(\"Incorrectly eaten value: please report this warning on https://git.io/vg5Ft\"), now());\n            }\n        }\n        // Mark position and patch `node.position`.\n        function position() {\n            var before = now();\n            return update;\n            // Add the position to a node.\n            function update(node, indent) {\n                var prev = node.position;\n                var start = prev ? prev.start : before;\n                var combined = [];\n                var n = prev && prev.end.line;\n                var l = before.line;\n                node.position = new Position(start);\n                // If there was already a `position`, this node was merged.  Fixing\n                // `start` wasn’t hard, but the indent is different.  Especially\n                // because some information, the indent between `n` and `l` wasn’t\n                // tracked.  Luckily, that space is (should be?) empty, so we can\n                // safely check for it now.\n                if (prev && indent && prev.indent) {\n                    combined = prev.indent;\n                    if (n < l) {\n                        while(++n < l){\n                            combined.push((offset[n] || 0) + 1);\n                        }\n                        combined.push(before.column);\n                    }\n                    indent = combined.concat(indent);\n                }\n                node.position.indent = indent || [];\n                return node;\n            }\n        }\n        // Add `node` to `parent`s children or to `tokens`.  Performs merges where\n        // possible.\n        function add(node, parent) {\n            var children = parent ? parent.children : tokens;\n            var prev = children[children.length - 1];\n            var fn;\n            if (prev && node.type === prev.type && (node.type === \"text\" || node.type === \"blockquote\") && mergeable(prev) && mergeable(node)) {\n                fn = node.type === \"text\" ? mergeText : mergeBlockquote;\n                node = fn.call(self, prev, node);\n            }\n            if (node !== prev) {\n                children.push(node);\n            }\n            if (self.atStart && tokens.length !== 0) {\n                self.exitStart();\n            }\n            return node;\n        }\n        // Remove `subvalue` from `value`.  `subvalue` must be at the start of\n        // `value`.\n        function eat(subvalue) {\n            var indent = getOffset();\n            var pos = position();\n            var current = now();\n            validateEat(subvalue);\n            apply.reset = reset;\n            reset.test = test;\n            apply.test = test;\n            value = value.slice(subvalue.length);\n            updatePosition(subvalue);\n            indent = indent();\n            return apply;\n            // Add the given arguments, add `position` to the returned node, and\n            // return the node.\n            function apply(node, parent) {\n                return pos(add(pos(node), parent), indent);\n            }\n            // Functions just like apply, but resets the content: the line and\n            // column are reversed, and the eaten value is re-added.   This is\n            // useful for nodes with a single type of content, such as lists and\n            // tables.  See `apply` above for what parameters are expected.\n            function reset() {\n                var node = apply.apply(null, arguments);\n                line = current.line;\n                column = current.column;\n                value = subvalue + value;\n                return node;\n            }\n            // Test the position, after eating, and reverse to a not-eaten state.\n            function test() {\n                var result = pos({});\n                line = current.line;\n                column = current.column;\n                value = subvalue + value;\n                return result.position;\n            }\n        }\n    }\n}\n// Check whether a node is mergeable with adjacent nodes.\nfunction mergeable(node) {\n    var start;\n    var end;\n    if (node.type !== \"text\" || !node.position) {\n        return true;\n    }\n    start = node.position.start;\n    end = node.position.end;\n    // Only merge nodes which occupy the same size as their `value`.\n    return start.line !== end.line || end.column - start.column === node.value.length;\n}\n// Merge two text nodes: `node` into `prev`.\nfunction mergeText(prev, node) {\n    prev.value += node.value;\n    return prev;\n}\n// Merge two blockquotes: `node` into `prev`, unless in CommonMark or gfm modes.\nfunction mergeBlockquote(prev, node) {\n    if (this.options.commonmark || this.options.gfm) {\n        return node;\n    }\n    prev.children = prev.children.concat(node.children);\n    return prev;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/tokenizer.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/unescape.js":
/*!***************************************************!*\
  !*** ./node_modules/remark-parse/lib/unescape.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\nmodule.exports = factory;\nvar backslash = \"\\\\\";\n// Factory to de-escape a value, based on a list at `key` in `ctx`.\nfunction factory(ctx, key) {\n    return unescape;\n    // De-escape a string using the expression at `key` in `ctx`.\n    function unescape(value) {\n        var prev = 0;\n        var index = value.indexOf(backslash);\n        var escape = ctx[key];\n        var queue = [];\n        var character;\n        while(index !== -1){\n            queue.push(value.slice(prev, index));\n            prev = index + 1;\n            character = value.charAt(prev);\n            // If the following character is not a valid escape, add the slash.\n            if (!character || escape.indexOf(character) === -1) {\n                queue.push(backslash);\n            }\n            index = value.indexOf(backslash, prev + 1);\n        }\n        queue.push(value.slice(prev));\n        return queue.join(\"\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91bmVzY2FwZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLFlBQVk7QUFFaEIsbUVBQW1FO0FBQ25FLFNBQVNELFFBQVFFLEdBQUcsRUFBRUMsR0FBRztJQUN2QixPQUFPQztJQUVQLDZEQUE2RDtJQUM3RCxTQUFTQSxTQUFTQyxLQUFLO1FBQ3JCLElBQUlDLE9BQU87UUFDWCxJQUFJQyxRQUFRRixNQUFNRyxPQUFPLENBQUNQO1FBQzFCLElBQUlRLFNBQVNQLEdBQUcsQ0FBQ0MsSUFBSTtRQUNyQixJQUFJTyxRQUFRLEVBQUU7UUFDZCxJQUFJQztRQUVKLE1BQU9KLFVBQVUsQ0FBQyxFQUFHO1lBQ25CRyxNQUFNRSxJQUFJLENBQUNQLE1BQU1RLEtBQUssQ0FBQ1AsTUFBTUM7WUFDN0JELE9BQU9DLFFBQVE7WUFDZkksWUFBWU4sTUFBTVMsTUFBTSxDQUFDUjtZQUV6QixtRUFBbUU7WUFDbkUsSUFBSSxDQUFDSyxhQUFhRixPQUFPRCxPQUFPLENBQUNHLGVBQWUsQ0FBQyxHQUFHO2dCQUNsREQsTUFBTUUsSUFBSSxDQUFDWDtZQUNiO1lBRUFNLFFBQVFGLE1BQU1HLE9BQU8sQ0FBQ1AsV0FBV0ssT0FBTztRQUMxQztRQUVBSSxNQUFNRSxJQUFJLENBQUNQLE1BQU1RLEtBQUssQ0FBQ1A7UUFFdkIsT0FBT0ksTUFBTUssSUFBSSxDQUFDO0lBQ3BCO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3VuZXNjYXBlLmpzPzYxZGIiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gZmFjdG9yeVxuXG52YXIgYmFja3NsYXNoID0gJ1xcXFwnXG5cbi8vIEZhY3RvcnkgdG8gZGUtZXNjYXBlIGEgdmFsdWUsIGJhc2VkIG9uIGEgbGlzdCBhdCBga2V5YCBpbiBgY3R4YC5cbmZ1bmN0aW9uIGZhY3RvcnkoY3R4LCBrZXkpIHtcbiAgcmV0dXJuIHVuZXNjYXBlXG5cbiAgLy8gRGUtZXNjYXBlIGEgc3RyaW5nIHVzaW5nIHRoZSBleHByZXNzaW9uIGF0IGBrZXlgIGluIGBjdHhgLlxuICBmdW5jdGlvbiB1bmVzY2FwZSh2YWx1ZSkge1xuICAgIHZhciBwcmV2ID0gMFxuICAgIHZhciBpbmRleCA9IHZhbHVlLmluZGV4T2YoYmFja3NsYXNoKVxuICAgIHZhciBlc2NhcGUgPSBjdHhba2V5XVxuICAgIHZhciBxdWV1ZSA9IFtdXG4gICAgdmFyIGNoYXJhY3RlclxuXG4gICAgd2hpbGUgKGluZGV4ICE9PSAtMSkge1xuICAgICAgcXVldWUucHVzaCh2YWx1ZS5zbGljZShwcmV2LCBpbmRleCkpXG4gICAgICBwcmV2ID0gaW5kZXggKyAxXG4gICAgICBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQocHJldilcblxuICAgICAgLy8gSWYgdGhlIGZvbGxvd2luZyBjaGFyYWN0ZXIgaXMgbm90IGEgdmFsaWQgZXNjYXBlLCBhZGQgdGhlIHNsYXNoLlxuICAgICAgaWYgKCFjaGFyYWN0ZXIgfHwgZXNjYXBlLmluZGV4T2YoY2hhcmFjdGVyKSA9PT0gLTEpIHtcbiAgICAgICAgcXVldWUucHVzaChiYWNrc2xhc2gpXG4gICAgICB9XG5cbiAgICAgIGluZGV4ID0gdmFsdWUuaW5kZXhPZihiYWNrc2xhc2gsIHByZXYgKyAxKVxuICAgIH1cblxuICAgIHF1ZXVlLnB1c2godmFsdWUuc2xpY2UocHJldikpXG5cbiAgICByZXR1cm4gcXVldWUuam9pbignJylcbiAgfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJmYWN0b3J5IiwiYmFja3NsYXNoIiwiY3R4Iiwia2V5IiwidW5lc2NhcGUiLCJ2YWx1ZSIsInByZXYiLCJpbmRleCIsImluZGV4T2YiLCJlc2NhcGUiLCJxdWV1ZSIsImNoYXJhY3RlciIsInB1c2giLCJzbGljZSIsImNoYXJBdCIsImpvaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/unescape.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/util/get-indentation.js":
/*!***************************************************************!*\
  !*** ./node_modules/remark-parse/lib/util/get-indentation.js ***!
  \***************************************************************/
/***/ ((module) => {

eval("\nmodule.exports = indentation;\nvar tab = \"\t\";\nvar space = \" \";\nvar spaceSize = 1;\nvar tabSize = 4;\n// Gets indentation information for a line.\nfunction indentation(value) {\n    var index = 0;\n    var indent = 0;\n    var character = value.charAt(index);\n    var stops = {};\n    var size;\n    while(character === tab || character === space){\n        size = character === tab ? tabSize : spaceSize;\n        indent += size;\n        if (size > 1) {\n            indent = Math.floor(indent / size) * size;\n        }\n        stops[indent] = index;\n        character = value.charAt(++index);\n    }\n    return {\n        indent: indent,\n        stops: stops\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL2dldC1pbmRlbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLE1BQU07QUFDVixJQUFJQyxRQUFRO0FBRVosSUFBSUMsWUFBWTtBQUNoQixJQUFJQyxVQUFVO0FBRWQsMkNBQTJDO0FBQzNDLFNBQVNKLFlBQVlLLEtBQUs7SUFDeEIsSUFBSUMsUUFBUTtJQUNaLElBQUlDLFNBQVM7SUFDYixJQUFJQyxZQUFZSCxNQUFNSSxNQUFNLENBQUNIO0lBQzdCLElBQUlJLFFBQVEsQ0FBQztJQUNiLElBQUlDO0lBRUosTUFBT0gsY0FBY1AsT0FBT08sY0FBY04sTUFBTztRQUMvQ1MsT0FBT0gsY0FBY1AsTUFBTUcsVUFBVUQ7UUFFckNJLFVBQVVJO1FBRVYsSUFBSUEsT0FBTyxHQUFHO1lBQ1pKLFNBQVNLLEtBQUtDLEtBQUssQ0FBQ04sU0FBU0ksUUFBUUE7UUFDdkM7UUFFQUQsS0FBSyxDQUFDSCxPQUFPLEdBQUdEO1FBQ2hCRSxZQUFZSCxNQUFNSSxNQUFNLENBQUMsRUFBRUg7SUFDN0I7SUFFQSxPQUFPO1FBQUNDLFFBQVFBO1FBQVFHLE9BQU9BO0lBQUs7QUFDdEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvZ2V0LWluZGVudGF0aW9uLmpzPzZmNmYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbm1vZHVsZS5leHBvcnRzID0gaW5kZW50YXRpb25cblxudmFyIHRhYiA9ICdcXHQnXG52YXIgc3BhY2UgPSAnICdcblxudmFyIHNwYWNlU2l6ZSA9IDFcbnZhciB0YWJTaXplID0gNFxuXG4vLyBHZXRzIGluZGVudGF0aW9uIGluZm9ybWF0aW9uIGZvciBhIGxpbmUuXG5mdW5jdGlvbiBpbmRlbnRhdGlvbih2YWx1ZSkge1xuICB2YXIgaW5kZXggPSAwXG4gIHZhciBpbmRlbnQgPSAwXG4gIHZhciBjaGFyYWN0ZXIgPSB2YWx1ZS5jaGFyQXQoaW5kZXgpXG4gIHZhciBzdG9wcyA9IHt9XG4gIHZhciBzaXplXG5cbiAgd2hpbGUgKGNoYXJhY3RlciA9PT0gdGFiIHx8IGNoYXJhY3RlciA9PT0gc3BhY2UpIHtcbiAgICBzaXplID0gY2hhcmFjdGVyID09PSB0YWIgPyB0YWJTaXplIDogc3BhY2VTaXplXG5cbiAgICBpbmRlbnQgKz0gc2l6ZVxuXG4gICAgaWYgKHNpemUgPiAxKSB7XG4gICAgICBpbmRlbnQgPSBNYXRoLmZsb29yKGluZGVudCAvIHNpemUpICogc2l6ZVxuICAgIH1cblxuICAgIHN0b3BzW2luZGVudF0gPSBpbmRleFxuICAgIGNoYXJhY3RlciA9IHZhbHVlLmNoYXJBdCgrK2luZGV4KVxuICB9XG5cbiAgcmV0dXJuIHtpbmRlbnQ6IGluZGVudCwgc3RvcHM6IHN0b3BzfVxufVxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpbmRlbnRhdGlvbiIsInRhYiIsInNwYWNlIiwic3BhY2VTaXplIiwidGFiU2l6ZSIsInZhbHVlIiwiaW5kZXgiLCJpbmRlbnQiLCJjaGFyYWN0ZXIiLCJjaGFyQXQiLCJzdG9wcyIsInNpemUiLCJNYXRoIiwiZmxvb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/util/get-indentation.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/util/html.js":
/*!****************************************************!*\
  !*** ./node_modules/remark-parse/lib/util/html.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nvar attributeName = \"[a-zA-Z_:][a-zA-Z0-9:._-]*\";\nvar unquoted = \"[^\\\"'=<>`\\\\u0000-\\\\u0020]+\";\nvar singleQuoted = \"'[^']*'\";\nvar doubleQuoted = '\"[^\"]*\"';\nvar attributeValue = \"(?:\" + unquoted + \"|\" + singleQuoted + \"|\" + doubleQuoted + \")\";\nvar attribute = \"(?:\\\\s+\" + attributeName + \"(?:\\\\s*=\\\\s*\" + attributeValue + \")?)\";\nvar openTag = \"<[A-Za-z][A-Za-z0-9\\\\-]*\" + attribute + \"*\\\\s*\\\\/?>\";\nvar closeTag = \"<\\\\/[A-Za-z][A-Za-z0-9\\\\-]*\\\\s*>\";\nvar comment = \"<!---->|<!--(?:-?[^>-])(?:-?[^-])*-->\";\nvar processing = \"<[?].*?[?]>\";\nvar declaration = \"<![A-Za-z]+\\\\s+[^>]*>\";\nvar cdata = \"<!\\\\[CDATA\\\\[[\\\\s\\\\S]*?\\\\]\\\\]>\";\nexports.openCloseTag = new RegExp(\"^(?:\" + openTag + \"|\" + closeTag + \")\");\nexports.tag = new RegExp(\"^(?:\" + openTag + \"|\" + closeTag + \"|\" + comment + \"|\" + processing + \"|\" + declaration + \"|\" + cdata + \")\");\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL2h0bWwuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFFQSxJQUFJQSxnQkFBZ0I7QUFDcEIsSUFBSUMsV0FBVztBQUNmLElBQUlDLGVBQWU7QUFDbkIsSUFBSUMsZUFBZTtBQUNuQixJQUFJQyxpQkFDRixRQUFRSCxXQUFXLE1BQU1DLGVBQWUsTUFBTUMsZUFBZTtBQUMvRCxJQUFJRSxZQUNGLFlBQVlMLGdCQUFnQixpQkFBaUJJLGlCQUFpQjtBQUNoRSxJQUFJRSxVQUFVLDZCQUE2QkQsWUFBWTtBQUN2RCxJQUFJRSxXQUFXO0FBQ2YsSUFBSUMsVUFBVTtBQUNkLElBQUlDLGFBQWE7QUFDakIsSUFBSUMsY0FBYztBQUNsQixJQUFJQyxRQUFRO0FBRVpDLG9CQUFvQixHQUFHLElBQUlFLE9BQU8sU0FBU1IsVUFBVSxNQUFNQyxXQUFXO0FBRXRFSyxXQUFXLEdBQUcsSUFBSUUsT0FDaEIsU0FDRVIsVUFDQSxNQUNBQyxXQUNBLE1BQ0FDLFVBQ0EsTUFDQUMsYUFDQSxNQUNBQyxjQUNBLE1BQ0FDLFFBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvaHRtbC5qcz84NjFkIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG52YXIgYXR0cmlidXRlTmFtZSA9ICdbYS16QS1aXzpdW2EtekEtWjAtOTouXy1dKidcbnZhciB1bnF1b3RlZCA9ICdbXlwiXFwnPTw+YFxcXFx1MDAwMC1cXFxcdTAwMjBdKydcbnZhciBzaW5nbGVRdW90ZWQgPSBcIidbXiddKidcIlxudmFyIGRvdWJsZVF1b3RlZCA9ICdcIlteXCJdKlwiJ1xudmFyIGF0dHJpYnV0ZVZhbHVlID1cbiAgJyg/OicgKyB1bnF1b3RlZCArICd8JyArIHNpbmdsZVF1b3RlZCArICd8JyArIGRvdWJsZVF1b3RlZCArICcpJ1xudmFyIGF0dHJpYnV0ZSA9XG4gICcoPzpcXFxccysnICsgYXR0cmlidXRlTmFtZSArICcoPzpcXFxccyo9XFxcXHMqJyArIGF0dHJpYnV0ZVZhbHVlICsgJyk/KSdcbnZhciBvcGVuVGFnID0gJzxbQS1aYS16XVtBLVphLXowLTlcXFxcLV0qJyArIGF0dHJpYnV0ZSArICcqXFxcXHMqXFxcXC8/PidcbnZhciBjbG9zZVRhZyA9ICc8XFxcXC9bQS1aYS16XVtBLVphLXowLTlcXFxcLV0qXFxcXHMqPidcbnZhciBjb21tZW50ID0gJzwhLS0tLT58PCEtLSg/Oi0/W14+LV0pKD86LT9bXi1dKSotLT4nXG52YXIgcHJvY2Vzc2luZyA9ICc8Wz9dLio/Wz9dPidcbnZhciBkZWNsYXJhdGlvbiA9ICc8IVtBLVphLXpdK1xcXFxzK1tePl0qPidcbnZhciBjZGF0YSA9ICc8IVxcXFxbQ0RBVEFcXFxcW1tcXFxcc1xcXFxTXSo/XFxcXF1cXFxcXT4nXG5cbmV4cG9ydHMub3BlbkNsb3NlVGFnID0gbmV3IFJlZ0V4cCgnXig/OicgKyBvcGVuVGFnICsgJ3wnICsgY2xvc2VUYWcgKyAnKScpXG5cbmV4cG9ydHMudGFnID0gbmV3IFJlZ0V4cChcbiAgJ14oPzonICtcbiAgICBvcGVuVGFnICtcbiAgICAnfCcgK1xuICAgIGNsb3NlVGFnICtcbiAgICAnfCcgK1xuICAgIGNvbW1lbnQgK1xuICAgICd8JyArXG4gICAgcHJvY2Vzc2luZyArXG4gICAgJ3wnICtcbiAgICBkZWNsYXJhdGlvbiArXG4gICAgJ3wnICtcbiAgICBjZGF0YSArXG4gICAgJyknXG4pXG4iXSwibmFtZXMiOlsiYXR0cmlidXRlTmFtZSIsInVucXVvdGVkIiwic2luZ2xlUXVvdGVkIiwiZG91YmxlUXVvdGVkIiwiYXR0cmlidXRlVmFsdWUiLCJhdHRyaWJ1dGUiLCJvcGVuVGFnIiwiY2xvc2VUYWciLCJjb21tZW50IiwicHJvY2Vzc2luZyIsImRlY2xhcmF0aW9uIiwiY2RhdGEiLCJleHBvcnRzIiwib3BlbkNsb3NlVGFnIiwiUmVnRXhwIiwidGFnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/util/html.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/util/interrupt.js":
/*!*********************************************************!*\
  !*** ./node_modules/remark-parse/lib/util/interrupt.js ***!
  \*********************************************************/
/***/ ((module) => {

eval("\nmodule.exports = interrupt;\nfunction interrupt(interruptors, tokenizers, ctx, params) {\n    var length = interruptors.length;\n    var index = -1;\n    var interruptor;\n    var config;\n    while(++index < length){\n        interruptor = interruptors[index];\n        config = interruptor[1] || {};\n        if (config.pedantic !== undefined && config.pedantic !== ctx.options.pedantic) {\n            continue;\n        }\n        if (config.commonmark !== undefined && config.commonmark !== ctx.options.commonmark) {\n            continue;\n        }\n        if (tokenizers[interruptor[0]].apply(ctx, params)) {\n            return true;\n        }\n    }\n    return false;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL2ludGVycnVwdC5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBQSxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLFNBQVNBLFVBQVVDLFlBQVksRUFBRUMsVUFBVSxFQUFFQyxHQUFHLEVBQUVDLE1BQU07SUFDdEQsSUFBSUMsU0FBU0osYUFBYUksTUFBTTtJQUNoQyxJQUFJQyxRQUFRLENBQUM7SUFDYixJQUFJQztJQUNKLElBQUlDO0lBRUosTUFBTyxFQUFFRixRQUFRRCxPQUFRO1FBQ3ZCRSxjQUFjTixZQUFZLENBQUNLLE1BQU07UUFDakNFLFNBQVNELFdBQVcsQ0FBQyxFQUFFLElBQUksQ0FBQztRQUU1QixJQUNFQyxPQUFPQyxRQUFRLEtBQUtDLGFBQ3BCRixPQUFPQyxRQUFRLEtBQUtOLElBQUlRLE9BQU8sQ0FBQ0YsUUFBUSxFQUN4QztZQUNBO1FBQ0Y7UUFFQSxJQUNFRCxPQUFPSSxVQUFVLEtBQUtGLGFBQ3RCRixPQUFPSSxVQUFVLEtBQUtULElBQUlRLE9BQU8sQ0FBQ0MsVUFBVSxFQUM1QztZQUNBO1FBQ0Y7UUFFQSxJQUFJVixVQUFVLENBQUNLLFdBQVcsQ0FBQyxFQUFFLENBQUMsQ0FBQ00sS0FBSyxDQUFDVixLQUFLQyxTQUFTO1lBQ2pELE9BQU87UUFDVDtJQUNGO0lBRUEsT0FBTztBQUNUIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYmxvZy1zdGFydGVyLXR5cGVzY3JpcHQvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL2ludGVycnVwdC5qcz9jMjNhIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5tb2R1bGUuZXhwb3J0cyA9IGludGVycnVwdFxuXG5mdW5jdGlvbiBpbnRlcnJ1cHQoaW50ZXJydXB0b3JzLCB0b2tlbml6ZXJzLCBjdHgsIHBhcmFtcykge1xuICB2YXIgbGVuZ3RoID0gaW50ZXJydXB0b3JzLmxlbmd0aFxuICB2YXIgaW5kZXggPSAtMVxuICB2YXIgaW50ZXJydXB0b3JcbiAgdmFyIGNvbmZpZ1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaW50ZXJydXB0b3IgPSBpbnRlcnJ1cHRvcnNbaW5kZXhdXG4gICAgY29uZmlnID0gaW50ZXJydXB0b3JbMV0gfHwge31cblxuICAgIGlmIChcbiAgICAgIGNvbmZpZy5wZWRhbnRpYyAhPT0gdW5kZWZpbmVkICYmXG4gICAgICBjb25maWcucGVkYW50aWMgIT09IGN0eC5vcHRpb25zLnBlZGFudGljXG4gICAgKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmIChcbiAgICAgIGNvbmZpZy5jb21tb25tYXJrICE9PSB1bmRlZmluZWQgJiZcbiAgICAgIGNvbmZpZy5jb21tb25tYXJrICE9PSBjdHgub3B0aW9ucy5jb21tb25tYXJrXG4gICAgKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmICh0b2tlbml6ZXJzW2ludGVycnVwdG9yWzBdXS5hcHBseShjdHgsIHBhcmFtcykpIHtcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGZhbHNlXG59XG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsImludGVycnVwdCIsImludGVycnVwdG9ycyIsInRva2VuaXplcnMiLCJjdHgiLCJwYXJhbXMiLCJsZW5ndGgiLCJpbmRleCIsImludGVycnVwdG9yIiwiY29uZmlnIiwicGVkYW50aWMiLCJ1bmRlZmluZWQiLCJvcHRpb25zIiwiY29tbW9ubWFyayIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/util/interrupt.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/util/normalize.js":
/*!*********************************************************!*\
  !*** ./node_modules/remark-parse/lib/util/normalize.js ***!
  \*********************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar collapseWhiteSpace = __webpack_require__(/*! collapse-white-space */ \"(rsc)/./node_modules/collapse-white-space/index.js\");\nmodule.exports = normalize;\n// Normalize an identifier.  Collapses multiple white space characters into a\n// single space, and removes casing.\nfunction normalize(value) {\n    return collapseWhiteSpace(value).toLowerCase();\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL25vcm1hbGl6ZS5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLHFCQUFxQkMsbUJBQU9BLENBQUM7QUFFakNDLE9BQU9DLE9BQU8sR0FBR0M7QUFFakIsNkVBQTZFO0FBQzdFLG9DQUFvQztBQUNwQyxTQUFTQSxVQUFVQyxLQUFLO0lBQ3RCLE9BQU9MLG1CQUFtQkssT0FBT0MsV0FBVztBQUM5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2Jsb2ctc3RhcnRlci10eXBlc2NyaXB0Ly4vbm9kZV9tb2R1bGVzL3JlbWFyay1wYXJzZS9saWIvdXRpbC9ub3JtYWxpemUuanM/ODNhOCJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxudmFyIGNvbGxhcHNlV2hpdGVTcGFjZSA9IHJlcXVpcmUoJ2NvbGxhcHNlLXdoaXRlLXNwYWNlJylcblxubW9kdWxlLmV4cG9ydHMgPSBub3JtYWxpemVcblxuLy8gTm9ybWFsaXplIGFuIGlkZW50aWZpZXIuICBDb2xsYXBzZXMgbXVsdGlwbGUgd2hpdGUgc3BhY2UgY2hhcmFjdGVycyBpbnRvIGFcbi8vIHNpbmdsZSBzcGFjZSwgYW5kIHJlbW92ZXMgY2FzaW5nLlxuZnVuY3Rpb24gbm9ybWFsaXplKHZhbHVlKSB7XG4gIHJldHVybiBjb2xsYXBzZVdoaXRlU3BhY2UodmFsdWUpLnRvTG93ZXJDYXNlKClcbn1cbiJdLCJuYW1lcyI6WyJjb2xsYXBzZVdoaXRlU3BhY2UiLCJyZXF1aXJlIiwibW9kdWxlIiwiZXhwb3J0cyIsIm5vcm1hbGl6ZSIsInZhbHVlIiwidG9Mb3dlckNhc2UiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/util/normalize.js\n");

/***/ }),

/***/ "(rsc)/./node_modules/remark-parse/lib/util/remove-indentation.js":
/*!******************************************************************!*\
  !*** ./node_modules/remark-parse/lib/util/remove-indentation.js ***!
  \******************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar trim = __webpack_require__(/*! trim */ \"(rsc)/./node_modules/trim/index.js\");\nvar repeat = __webpack_require__(/*! repeat-string */ \"(rsc)/./node_modules/repeat-string/index.js\");\nvar getIndent = __webpack_require__(/*! ./get-indentation */ \"(rsc)/./node_modules/remark-parse/lib/util/get-indentation.js\");\nmodule.exports = indentation;\nvar tab = \"\t\";\nvar lineFeed = \"\\n\";\nvar space = \" \";\nvar exclamationMark = \"!\";\n// Remove the minimum indent from every line in `value`.  Supports both tab,\n// spaced, and mixed indentation (as well as possible).\nfunction indentation(value, maximum) {\n    var values = value.split(lineFeed);\n    var position = values.length + 1;\n    var minIndent = Infinity;\n    var matrix = [];\n    var index;\n    var indentation;\n    var stops;\n    var padding;\n    values.unshift(repeat(space, maximum) + exclamationMark);\n    while(position--){\n        indentation = getIndent(values[position]);\n        matrix[position] = indentation.stops;\n        if (trim(values[position]).length === 0) {\n            continue;\n        }\n        if (indentation.indent) {\n            if (indentation.indent > 0 && indentation.indent < minIndent) {\n                minIndent = indentation.indent;\n            }\n        } else {\n            minIndent = Infinity;\n            break;\n        }\n    }\n    if (minIndent !== Infinity) {\n        position = values.length;\n        while(position--){\n            stops = matrix[position];\n            index = minIndent;\n            while(index && !(index in stops)){\n                index--;\n            }\n            if (trim(values[position]).length !== 0 && minIndent && index !== minIndent) {\n                padding = tab;\n            } else {\n                padding = \"\";\n            }\n            values[position] = padding + values[position].slice(index in stops ? stops[index] + 1 : 0);\n        }\n    }\n    values.shift();\n    return values.join(lineFeed);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi9ub2RlX21vZHVsZXMvcmVtYXJrLXBhcnNlL2xpYi91dGlsL3JlbW92ZS1pbmRlbnRhdGlvbi5qcyIsIm1hcHBpbmdzIjoiQUFBQTtBQUVBLElBQUlBLE9BQU9DLG1CQUFPQSxDQUFDO0FBQ25CLElBQUlDLFNBQVNELG1CQUFPQSxDQUFDO0FBQ3JCLElBQUlFLFlBQVlGLG1CQUFPQSxDQUFDO0FBRXhCRyxPQUFPQyxPQUFPLEdBQUdDO0FBRWpCLElBQUlDLE1BQU07QUFDVixJQUFJQyxXQUFXO0FBQ2YsSUFBSUMsUUFBUTtBQUNaLElBQUlDLGtCQUFrQjtBQUV0Qiw0RUFBNEU7QUFDNUUsdURBQXVEO0FBQ3ZELFNBQVNKLFlBQVlLLEtBQUssRUFBRUMsT0FBTztJQUNqQyxJQUFJQyxTQUFTRixNQUFNRyxLQUFLLENBQUNOO0lBQ3pCLElBQUlPLFdBQVdGLE9BQU9HLE1BQU0sR0FBRztJQUMvQixJQUFJQyxZQUFZQztJQUNoQixJQUFJQyxTQUFTLEVBQUU7SUFDZixJQUFJQztJQUNKLElBQUlkO0lBQ0osSUFBSWU7SUFDSixJQUFJQztJQUVKVCxPQUFPVSxPQUFPLENBQUNyQixPQUFPTyxPQUFPRyxXQUFXRjtJQUV4QyxNQUFPSyxXQUFZO1FBQ2pCVCxjQUFjSCxVQUFVVSxNQUFNLENBQUNFLFNBQVM7UUFFeENJLE1BQU0sQ0FBQ0osU0FBUyxHQUFHVCxZQUFZZSxLQUFLO1FBRXBDLElBQUlyQixLQUFLYSxNQUFNLENBQUNFLFNBQVMsRUFBRUMsTUFBTSxLQUFLLEdBQUc7WUFDdkM7UUFDRjtRQUVBLElBQUlWLFlBQVlrQixNQUFNLEVBQUU7WUFDdEIsSUFBSWxCLFlBQVlrQixNQUFNLEdBQUcsS0FBS2xCLFlBQVlrQixNQUFNLEdBQUdQLFdBQVc7Z0JBQzVEQSxZQUFZWCxZQUFZa0IsTUFBTTtZQUNoQztRQUNGLE9BQU87WUFDTFAsWUFBWUM7WUFFWjtRQUNGO0lBQ0Y7SUFFQSxJQUFJRCxjQUFjQyxVQUFVO1FBQzFCSCxXQUFXRixPQUFPRyxNQUFNO1FBRXhCLE1BQU9ELFdBQVk7WUFDakJNLFFBQVFGLE1BQU0sQ0FBQ0osU0FBUztZQUN4QkssUUFBUUg7WUFFUixNQUFPRyxTQUFTLENBQUVBLENBQUFBLFNBQVNDLEtBQUksRUFBSTtnQkFDakNEO1lBQ0Y7WUFFQSxJQUNFcEIsS0FBS2EsTUFBTSxDQUFDRSxTQUFTLEVBQUVDLE1BQU0sS0FBSyxLQUNsQ0MsYUFDQUcsVUFBVUgsV0FDVjtnQkFDQUssVUFBVWY7WUFDWixPQUFPO2dCQUNMZSxVQUFVO1lBQ1o7WUFFQVQsTUFBTSxDQUFDRSxTQUFTLEdBQ2RPLFVBQVVULE1BQU0sQ0FBQ0UsU0FBUyxDQUFDVSxLQUFLLENBQUNMLFNBQVNDLFFBQVFBLEtBQUssQ0FBQ0QsTUFBTSxHQUFHLElBQUk7UUFDekU7SUFDRjtJQUVBUCxPQUFPYSxLQUFLO0lBRVosT0FBT2IsT0FBT2MsSUFBSSxDQUFDbkI7QUFDckIiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9ibG9nLXN0YXJ0ZXItdHlwZXNjcmlwdC8uL25vZGVfbW9kdWxlcy9yZW1hcmstcGFyc2UvbGliL3V0aWwvcmVtb3ZlLWluZGVudGF0aW9uLmpzPzljYTYiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbnZhciB0cmltID0gcmVxdWlyZSgndHJpbScpXG52YXIgcmVwZWF0ID0gcmVxdWlyZSgncmVwZWF0LXN0cmluZycpXG52YXIgZ2V0SW5kZW50ID0gcmVxdWlyZSgnLi9nZXQtaW5kZW50YXRpb24nKVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluZGVudGF0aW9uXG5cbnZhciB0YWIgPSAnXFx0J1xudmFyIGxpbmVGZWVkID0gJ1xcbidcbnZhciBzcGFjZSA9ICcgJ1xudmFyIGV4Y2xhbWF0aW9uTWFyayA9ICchJ1xuXG4vLyBSZW1vdmUgdGhlIG1pbmltdW0gaW5kZW50IGZyb20gZXZlcnkgbGluZSBpbiBgdmFsdWVgLiAgU3VwcG9ydHMgYm90aCB0YWIsXG4vLyBzcGFjZWQsIGFuZCBtaXhlZCBpbmRlbnRhdGlvbiAoYXMgd2VsbCBhcyBwb3NzaWJsZSkuXG5mdW5jdGlvbiBpbmRlbnRhdGlvbih2YWx1ZSwgbWF4aW11bSkge1xuICB2YXIgdmFsdWVzID0gdmFsdWUuc3BsaXQobGluZUZlZWQpXG4gIHZhciBwb3NpdGlvbiA9IHZhbHVlcy5sZW5ndGggKyAxXG4gIHZhciBtaW5JbmRlbnQgPSBJbmZpbml0eVxuICB2YXIgbWF0cml4ID0gW11cbiAgdmFyIGluZGV4XG4gIHZhciBpbmRlbnRhdGlvblxuICB2YXIgc3RvcHNcbiAgdmFyIHBhZGRpbmdcblxuICB2YWx1ZXMudW5zaGlmdChyZXBlYXQoc3BhY2UsIG1heGltdW0pICsgZXhjbGFtYXRpb25NYXJrKVxuXG4gIHdoaWxlIChwb3NpdGlvbi0tKSB7XG4gICAgaW5kZW50YXRpb24gPSBnZXRJbmRlbnQodmFsdWVzW3Bvc2l0aW9uXSlcblxuICAgIG1hdHJpeFtwb3NpdGlvbl0gPSBpbmRlbnRhdGlvbi5zdG9wc1xuXG4gICAgaWYgKHRyaW0odmFsdWVzW3Bvc2l0aW9uXSkubGVuZ3RoID09PSAwKSB7XG4gICAgICBjb250aW51ZVxuICAgIH1cblxuICAgIGlmIChpbmRlbnRhdGlvbi5pbmRlbnQpIHtcbiAgICAgIGlmIChpbmRlbnRhdGlvbi5pbmRlbnQgPiAwICYmIGluZGVudGF0aW9uLmluZGVudCA8IG1pbkluZGVudCkge1xuICAgICAgICBtaW5JbmRlbnQgPSBpbmRlbnRhdGlvbi5pbmRlbnRcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWluSW5kZW50ID0gSW5maW5pdHlcblxuICAgICAgYnJlYWtcbiAgICB9XG4gIH1cblxuICBpZiAobWluSW5kZW50ICE9PSBJbmZpbml0eSkge1xuICAgIHBvc2l0aW9uID0gdmFsdWVzLmxlbmd0aFxuXG4gICAgd2hpbGUgKHBvc2l0aW9uLS0pIHtcbiAgICAgIHN0b3BzID0gbWF0cml4W3Bvc2l0aW9uXVxuICAgICAgaW5kZXggPSBtaW5JbmRlbnRcblxuICAgICAgd2hpbGUgKGluZGV4ICYmICEoaW5kZXggaW4gc3RvcHMpKSB7XG4gICAgICAgIGluZGV4LS1cbiAgICAgIH1cblxuICAgICAgaWYgKFxuICAgICAgICB0cmltKHZhbHVlc1twb3NpdGlvbl0pLmxlbmd0aCAhPT0gMCAmJlxuICAgICAgICBtaW5JbmRlbnQgJiZcbiAgICAgICAgaW5kZXggIT09IG1pbkluZGVudFxuICAgICAgKSB7XG4gICAgICAgIHBhZGRpbmcgPSB0YWJcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhZGRpbmcgPSAnJ1xuICAgICAgfVxuXG4gICAgICB2YWx1ZXNbcG9zaXRpb25dID1cbiAgICAgICAgcGFkZGluZyArIHZhbHVlc1twb3NpdGlvbl0uc2xpY2UoaW5kZXggaW4gc3RvcHMgPyBzdG9wc1tpbmRleF0gKyAxIDogMClcbiAgICB9XG4gIH1cblxuICB2YWx1ZXMuc2hpZnQoKVxuXG4gIHJldHVybiB2YWx1ZXMuam9pbihsaW5lRmVlZClcbn1cbiJdLCJuYW1lcyI6WyJ0cmltIiwicmVxdWlyZSIsInJlcGVhdCIsImdldEluZGVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJpbmRlbnRhdGlvbiIsInRhYiIsImxpbmVGZWVkIiwic3BhY2UiLCJleGNsYW1hdGlvbk1hcmsiLCJ2YWx1ZSIsIm1heGltdW0iLCJ2YWx1ZXMiLCJzcGxpdCIsInBvc2l0aW9uIiwibGVuZ3RoIiwibWluSW5kZW50IiwiSW5maW5pdHkiLCJtYXRyaXgiLCJpbmRleCIsInN0b3BzIiwicGFkZGluZyIsInVuc2hpZnQiLCJpbmRlbnQiLCJzbGljZSIsInNoaWZ0Iiwiam9pbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/remark-parse/lib/util/remove-indentation.js\n");

/***/ })

};
;