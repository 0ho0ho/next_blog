"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/unified";
exports.ids = ["vendor-chunks/unified"];
exports.modules = {

/***/ "(rsc)/./node_modules/unified/index.js":
/*!***************************************!*\
  !*** ./node_modules/unified/index.js ***!
  \***************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\nvar extend = __webpack_require__(/*! extend */ \"(rsc)/./node_modules/extend/index.js\");\nvar bail = __webpack_require__(/*! bail */ \"(rsc)/./node_modules/bail/index.js\");\nvar vfile = __webpack_require__(/*! vfile */ \"(rsc)/./node_modules/vfile/index.js\");\nvar trough = __webpack_require__(/*! trough */ \"(rsc)/./node_modules/trough/index.js\");\nvar plain = __webpack_require__(/*! is-plain-obj */ \"(rsc)/./node_modules/is-plain-obj/index.js\");\n// Expose a frozen processor.\nmodule.exports = unified().freeze();\nvar slice = [].slice;\nvar own = {}.hasOwnProperty;\n// Process pipeline.\nvar pipeline = trough().use(pipelineParse).use(pipelineRun).use(pipelineStringify);\nfunction pipelineParse(p, ctx) {\n    ctx.tree = p.parse(ctx.file);\n}\nfunction pipelineRun(p, ctx, next) {\n    p.run(ctx.tree, ctx.file, done);\n    function done(err, tree, file) {\n        if (err) {\n            next(err);\n        } else {\n            ctx.tree = tree;\n            ctx.file = file;\n            next();\n        }\n    }\n}\nfunction pipelineStringify(p, ctx) {\n    ctx.file.contents = p.stringify(ctx.tree, ctx.file);\n}\n// Function to create the first processor.\nfunction unified() {\n    var attachers = [];\n    var transformers = trough();\n    var namespace = {};\n    var frozen = false;\n    var freezeIndex = -1;\n    // Data management.\n    processor.data = data;\n    // Lock.\n    processor.freeze = freeze;\n    // Plugins.\n    processor.attachers = attachers;\n    processor.use = use;\n    // API.\n    processor.parse = parse;\n    processor.stringify = stringify;\n    processor.run = run;\n    processor.runSync = runSync;\n    processor.process = process;\n    processor.processSync = processSync;\n    // Expose.\n    return processor;\n    // Create a new processor based on the processor in the current scope.\n    function processor() {\n        var destination = unified();\n        var length = attachers.length;\n        var index = -1;\n        while(++index < length){\n            destination.use.apply(null, attachers[index]);\n        }\n        destination.data(extend(true, {}, namespace));\n        return destination;\n    }\n    // Freeze: used to signal a processor that has finished configuration.\n    //\n    // For example, take unified itself: itâ€™s frozen.\n    // Plugins should not be added to it.\n    // Rather, it should be extended, by invoking it, before modifying it.\n    //\n    // In essence, always invoke this when exporting a processor.\n    function freeze() {\n        var values;\n        var plugin;\n        var options;\n        var transformer;\n        if (frozen) {\n            return processor;\n        }\n        while(++freezeIndex < attachers.length){\n            values = attachers[freezeIndex];\n            plugin = values[0];\n            options = values[1];\n            transformer = null;\n            if (options === false) {\n                continue;\n            }\n            if (options === true) {\n                values[1] = undefined;\n            }\n            transformer = plugin.apply(processor, values.slice(1));\n            if (typeof transformer === \"function\") {\n                transformers.use(transformer);\n            }\n        }\n        frozen = true;\n        freezeIndex = Infinity;\n        return processor;\n    }\n    // Data management.\n    // Getter / setter for processor-specific informtion.\n    function data(key, value) {\n        if (typeof key === \"string\") {\n            // Set `key`.\n            if (arguments.length === 2) {\n                assertUnfrozen(\"data\", frozen);\n                namespace[key] = value;\n                return processor;\n            }\n            // Get `key`.\n            return own.call(namespace, key) && namespace[key] || null;\n        }\n        // Set space.\n        if (key) {\n            assertUnfrozen(\"data\", frozen);\n            namespace = key;\n            return processor;\n        }\n        // Get space.\n        return namespace;\n    }\n    // Plugin management.\n    //\n    // Pass it:\n    // *   an attacher and options,\n    // *   a preset,\n    // *   a list of presets, attachers, and arguments (list of attachers and\n    //     options).\n    function use(value) {\n        var settings;\n        assertUnfrozen(\"use\", frozen);\n        if (value === null || value === undefined) {\n        // Empty.\n        } else if (typeof value === \"function\") {\n            addPlugin.apply(null, arguments);\n        } else if (typeof value === \"object\") {\n            if (\"length\" in value) {\n                addList(value);\n            } else {\n                addPreset(value);\n            }\n        } else {\n            throw new Error(\"Expected usable value, not `\" + value + \"`\");\n        }\n        if (settings) {\n            namespace.settings = extend(namespace.settings || {}, settings);\n        }\n        return processor;\n        function addPreset(result) {\n            addList(result.plugins);\n            if (result.settings) {\n                settings = extend(settings || {}, result.settings);\n            }\n        }\n        function add(value) {\n            if (typeof value === \"function\") {\n                addPlugin(value);\n            } else if (typeof value === \"object\") {\n                if (\"length\" in value) {\n                    addPlugin.apply(null, value);\n                } else {\n                    addPreset(value);\n                }\n            } else {\n                throw new Error(\"Expected usable value, not `\" + value + \"`\");\n            }\n        }\n        function addList(plugins) {\n            var length;\n            var index;\n            if (plugins === null || plugins === undefined) {\n            // Empty.\n            } else if (typeof plugins === \"object\" && \"length\" in plugins) {\n                length = plugins.length;\n                index = -1;\n                while(++index < length){\n                    add(plugins[index]);\n                }\n            } else {\n                throw new Error(\"Expected a list of plugins, not `\" + plugins + \"`\");\n            }\n        }\n        function addPlugin(plugin, value) {\n            var entry = find(plugin);\n            if (entry) {\n                if (plain(entry[1]) && plain(value)) {\n                    value = extend(entry[1], value);\n                }\n                entry[1] = value;\n            } else {\n                attachers.push(slice.call(arguments));\n            }\n        }\n    }\n    function find(plugin) {\n        var length = attachers.length;\n        var index = -1;\n        var entry;\n        while(++index < length){\n            entry = attachers[index];\n            if (entry[0] === plugin) {\n                return entry;\n            }\n        }\n    }\n    // Parse a file (in string or vfile representation) into a unist node using\n    // the `Parser` on the processor.\n    function parse(doc) {\n        var file = vfile(doc);\n        var Parser;\n        freeze();\n        Parser = processor.Parser;\n        assertParser(\"parse\", Parser);\n        if (newable(Parser, \"parse\")) {\n            return new Parser(String(file), file).parse();\n        }\n        return Parser(String(file), file) // eslint-disable-line new-cap\n        ;\n    }\n    // Run transforms on a unist node representation of a file (in string or\n    // vfile representation), async.\n    function run(node, file, cb) {\n        assertNode(node);\n        freeze();\n        if (!cb && typeof file === \"function\") {\n            cb = file;\n            file = null;\n        }\n        if (!cb) {\n            return new Promise(executor);\n        }\n        executor(null, cb);\n        function executor(resolve, reject) {\n            transformers.run(node, vfile(file), done);\n            function done(err, tree, file) {\n                tree = tree || node;\n                if (err) {\n                    reject(err);\n                } else if (resolve) {\n                    resolve(tree);\n                } else {\n                    cb(null, tree, file);\n                }\n            }\n        }\n    }\n    // Run transforms on a unist node representation of a file (in string or\n    // vfile representation), sync.\n    function runSync(node, file) {\n        var complete = false;\n        var result;\n        run(node, file, done);\n        assertDone(\"runSync\", \"run\", complete);\n        return result;\n        function done(err, tree) {\n            complete = true;\n            bail(err);\n            result = tree;\n        }\n    }\n    // Stringify a unist node representation of a file (in string or vfile\n    // representation) into a string using the `Compiler` on the processor.\n    function stringify(node, doc) {\n        var file = vfile(doc);\n        var Compiler;\n        freeze();\n        Compiler = processor.Compiler;\n        assertCompiler(\"stringify\", Compiler);\n        assertNode(node);\n        if (newable(Compiler, \"compile\")) {\n            return new Compiler(node, file).compile();\n        }\n        return Compiler(node, file) // eslint-disable-line new-cap\n        ;\n    }\n    // Parse a file (in string or vfile representation) into a unist node using\n    // the `Parser` on the processor, then run transforms on that node, and\n    // compile the resulting node using the `Compiler` on the processor, and\n    // store that result on the vfile.\n    function process(doc, cb) {\n        freeze();\n        assertParser(\"process\", processor.Parser);\n        assertCompiler(\"process\", processor.Compiler);\n        if (!cb) {\n            return new Promise(executor);\n        }\n        executor(null, cb);\n        function executor(resolve, reject) {\n            var file = vfile(doc);\n            pipeline.run(processor, {\n                file: file\n            }, done);\n            function done(err) {\n                if (err) {\n                    reject(err);\n                } else if (resolve) {\n                    resolve(file);\n                } else {\n                    cb(null, file);\n                }\n            }\n        }\n    }\n    // Process the given document (in string or vfile representation), sync.\n    function processSync(doc) {\n        var complete = false;\n        var file;\n        freeze();\n        assertParser(\"processSync\", processor.Parser);\n        assertCompiler(\"processSync\", processor.Compiler);\n        file = vfile(doc);\n        process(file, done);\n        assertDone(\"processSync\", \"process\", complete);\n        return file;\n        function done(err) {\n            complete = true;\n            bail(err);\n        }\n    }\n}\n// Check if `value` is a constructor.\nfunction newable(value, name) {\n    return typeof value === \"function\" && value.prototype && // A function with keys in its prototype is probably a constructor.\n    // Classesâ€™ prototype methods are not enumerable, so we check if some value\n    // exists in the prototype.\n    (keys(value.prototype) || name in value.prototype);\n}\n// Check if `value` is an object with keys.\nfunction keys(value) {\n    var key;\n    for(key in value){\n        return true;\n    }\n    return false;\n}\n// Assert a parser is available.\nfunction assertParser(name, Parser) {\n    if (typeof Parser !== \"function\") {\n        throw new Error(\"Cannot `\" + name + \"` without `Parser`\");\n    }\n}\n// Assert a compiler is available.\nfunction assertCompiler(name, Compiler) {\n    if (typeof Compiler !== \"function\") {\n        throw new Error(\"Cannot `\" + name + \"` without `Compiler`\");\n    }\n}\n// Assert the processor is not frozen.\nfunction assertUnfrozen(name, frozen) {\n    if (frozen) {\n        throw new Error(\"Cannot invoke `\" + name + \"` on a frozen processor.\\nCreate a new processor first, by invoking it: use `processor()` instead of `processor`.\");\n    }\n}\n// Assert `node` is a unist node.\nfunction assertNode(node) {\n    if (!node || typeof node.type !== \"string\") {\n        throw new Error(\"Expected node, got `\" + node + \"`\");\n    }\n}\n// Assert that `complete` is `true`.\nfunction assertDone(name, asyncName, complete) {\n    if (!complete) {\n        throw new Error(\"`\" + name + \"` finished async. Use `\" + asyncName + \"` instead\");\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/unified/index.js\n");

/***/ })

};
;